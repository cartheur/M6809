0001                         
0002                         * small-c V2.3
0003                         * #include startRAM.h
0004                         * #asm
0005 7000                           ORG $7000
0006                         
0007                         * #endasm
0008                         * int i;
0009                         
0010                         * .global i
0011                         i: 
0012 7000                     RMB 2
0013                         * int j;
0014                         
0015                         * .global j
0016                         j: 
0017 7002                     RMB 2
0018                         * char n;
0019                         
0020                         * .global n
0021                         n: 
0022 7004                     RMB 1
0023                         * char k;
0024                         
0025                         * .global k
0026                         k: 
0027 7005                     RMB 1
0028                         * char u,q,o,key;
0029                         
0030                         * .global u
0031                         u: 
0032 7006                     RMB 1
0033                         
0034                         * .global q
0035                         q: 
0036 7007                     RMB 1
0037                         
0038                         * .global o
0039                         o: 
0040 7008                     RMB 1
0041                         
0042                         * .global key
0043                         key: 
0044 7009                     RMB 1
0045                         * char x;
0046                         
0047                         * .global x
0048                         x: 
0049 700a                     RMB 1
0050                         * char hit, positive;
0051                         
0052                         * .global hit
0053                         hit: 
0054 700b                     RMB 1
0055                         
0056                         * .global positive
0057                         positive: 
0058 700c                     RMB 1
0059                         * char flag;
0060                         
0061                         * .global flag
0062                         flag: 
0063 700d                     RMB 1
0064                         * char tick;
0065                         
0066                         * .global tick
0067                         tick: 
0068 700e                     RMB 1
0069                         * char bcc, save_bcc, bcc_error;
0070                         
0071                         * .global bcc
0072                         bcc: 
0073 700f                     RMB 1
0074                         
0075                         * .global save_bcc
0076                         save_bcc: 
0077 7010                     RMB 1
0078                         
0079                         * .global bcc_erro
0080                         bcc_erro: 
0081 7011                     RMB 1
0082                         * int temp,temp16;
0083                         
0084                         * .global temp
0085                         temp: 
0086 7012                     RMB 2
0087                         
0088                         * .global temp16
0089                         temp16: 
0090 7014                     RMB 2
0091                         * int PC, save_PC;
0092                         
0093                         * .global PC
0094                         PC: 
0095 7016                     RMB 2
0096                         
0097                         * .global save_PC
0098                         save_PC: 
0099 7018                     RMB 2
0100                         * int num, start, end, desti;
0101                         
0102                         * .global num
0103                         num: 
0104 701a                     RMB 2
0105                         
0106                         * .global start
0107                         start: 
0108 701c                     RMB 2
0109                         
0110                         * .global end
0111                         end: 
0112 701e                     RMB 2
0113                         
0114                         * .global desti
0115                         desti: 
0116 7020                     RMB 2
0117                         * int t;
0118                         
0119                         * .global t
0120                         t: 
0121 7022                     RMB 2
0122                         * char state;
0123                         
0124                         * .global state
0125                         state: 
0126 7024                     RMB 1
0127                         * int USER_PC,USER_U,USER_X,SAVE_SP;
0128                         
0129                         * .global USER_PC
0130                         USER_PC: 
0131 7025                     RMB 2
0132                         
0133                         * .global USER_U
0134                         USER_U: 
0135 7027                     RMB 2
0136                         
0137                         * .global USER_X
0138                         USER_X: 
0139 7029                     RMB 2
0140                         
0141                         * .global SAVE_SP
0142                         SAVE_SP: 
0143 702b                     RMB 2
0144                         * int USER_Y;
0145                         
0146                         * .global USER_Y
0147                         USER_Y: 
0148 702d                     RMB 2
0149                         * char USER_A,USER_B,USER_P,USER_DP;
0150                         
0151                         * .global USER_A
0152                         USER_A: 
0153 702f                     RMB 1
0154                         
0155                         * .global USER_B
0156                         USER_B: 
0157 7030                     RMB 1
0158                         
0159                         * .global USER_P
0160                         USER_P: 
0161 7031                     RMB 1
0162                         
0163                         * .global USER_DP
0164                         USER_DP: 
0165 7032                     RMB 1
0166                         * int timeout;
0167                         
0168                         * .global timeout
0169                         timeout: 
0170 7033                     RMB 2
0171                         * char buffer[6];	
0172                         
0173                         * .global buffer
0174                         buffer: 
0175 7035                     RMB 6
0176                         *   
0177                         * char *gpio1;
0178                         
0179                         * .global gpio1
0180                         gpio1: 
0181 703b 00 00               FDB 0
0182                         * char *port2;
0183                         
0184                         * .global port2
0185                         port2: 
0186 703d 00 00               FDB 0
0187                         * char *port1;
0188                         
0189                         * .global port1
0190                         port1: 
0191 703f 00 00               FDB 0
0192                         * char *port0;
0193                         
0194                         * .global port0
0195                         port0: 
0196 7041 00 00               FDB 0
0197                         * char *dptr;
0198                         
0199                         * .global dptr
0200                         dptr: 
0201 7043 00 00               FDB 0
0202                         * char *dptr2;
0203                         
0204                         * .global dptr2
0205                         dptr2: 
0206 7045 00 00               FDB 0
0207                         * #define  AS9 1
0208                         * #include startup.h
0209                         * #ifdef AS9
0210                         * #asm
0211 7047                    ADR1:  RMB 2
0212 7049                    ADR2:  RMB 2
0213 704b                    ADR3:  RMB 1
0214 704c                    ADR31: RMB 3
0215 fffe                       ORG  $fffe
0216 fffe c0 00                 FDB  $c000
0217 fff8                       org $fff8
0218                         *   fdb irq_serv
0219 fff8 7f f0                 fdb $7ff0       use ram vector
0220 fffc                       org $fffc
0221 fffc 7f f3                 fdb $7ff3        nmi vector
0222 fff6                       org $fff6
0223 fff6 7f f6                 fdb $7ff6        firq vector
0224 fffa                       org $fffa
0225 fffa c0 27                 fdb swi_serv
0226 c000                       ORG  $c000
0227 c000 10 ce 7f f0           lds  #$7ff0
0228 c004 86 7e                 lda #$7e        store jmp instruction 
0229 c006 b7 7f f0              sta $7ff0       irq vector
0230 c009 8e c0 23              ldx #irq_serv
0231 c00c bf 7f f1              stx $7ff1
0232 c00f 86 3b                 lda #$3b        store rti instruction
0233 c011 b7 7f f3              sta $7ff3       must be modified when testing
0234 c014 b7 7f f6              sta $7ff6       with ram vector
0235 c017 8e 00 00              ldx #0
0236 c01a bf 7f f4              stx $7ff4
0237 c01d bf 7f f7              stx $7ff7
0238 c020 7e e7 71              jmp  main
0239                         irq_serv
0240 c023 7c 70 0e              inc tick
0241 c026 3b                    rti
0242                         swi_serv
0243 c027 35 02                 PULS A
0244 c029 b7 70 31              STA USER_P
0245 c02c 35 02                 PULS A
0246 c02e b7 70 2f              STA USER_A
0247 c031 35 02                 PULS A
0248 c033 b7 70 30              STA USER_B
0249 c036 35 02                 PULS A
0250 c038 b7 70 32              STA USER_DP
0251 c03b 35 10                 PULS X
0252 c03d bf 70 29              STX USER_X
0253 c040 35 10                 PULS X
0254 c042 bf 70 2d              STX USER_Y
0255 c045 35 10                 PULS X
0256 c047 bf 70 27              STX USER_U
0257 c04a 35 10                 PULS X
0258 c04c bf 70 25              STX USER_PC
0259 c04f bf 70 18              stx save_PC
0260 c052 10 fe 70 2b           LDS SAVE_SP
0261 c056 bd d0 6d              JSR key_PC
0262 c059 39                    rts
0263                         *
0264                         * 16 bit division
0265                         *
0266                         *
0267                         * D=X/D
0268                         *
0269 c05a 7f 70 4c           ccdiv: CLR ADR31
0270 c05d bf 70 47            STX ADR1
0271 c060 fd 70 49            STD ADR2
0272 c063 2e 0b              ccd1: BGT ccd2
0273 c065 73 70 4c            COM ADR31
0274 c068 43                  COMA
0275 c069 53                  COMB
0276 c06a c3 00 01            ADDD #1
0277 c06d fd 70 49            STD ADR2
0278 c070 fc 70 47           ccd2: LDD ADR1
0279 c073 10 83 00 00         CMPD #0
0280 c077 2e 0b               BGT ccd3
0281 c079 73 70 4c            COM ADR31
0282 c07c 43                  COMA
0283 c07d 53                  COMB
0284 c07e c3 00 01            ADDD #1
0285 c081 fd 70 47            STD ADR1
0286 c084 86 10              ccd3: LDA #16
0287 c086 b7 70 4b            STA ADR3
0288 c089 4f                  CLRA
0289 c08a 5f                  CLRB
0290                         DIVD:
0291 c08b 78 70 48            ASL ADR1+1
0292 c08e 79 70 47            ROL ADR1
0293 c091 59                  ROLB
0294 c092 49                  ROLA
0295 c093 10 b3 70 49         CMPD ADR2
0296 c097 25 06               BLO NOSUB
0297 c099 b3 70 49            SUBD ADR2
0298 c09c 7c 70 48            INC ADR1+1
0299 c09f 7a 70 4b           NOSUB: DEC ADR3
0300 c0a2 26 e7               BNE DIVD
0301 c0a4 1f 01               TFR D,X
0302 c0a6 fc 70 47            LDD ADR1
0303 c0a9 7d 70 4c            TST ADR31
0304 c0ac 27 05               BEQ ccd4
0305 c0ae 43                  COMA
0306 c0af 53                  COMB
0307 c0b0 c3 00 01            ADDD #1
0308 c0b3 39                 ccd4: RTS
0309                         *
0310                         * 16 bit multiplication
0311                         *
0312 c0b4 bf 70 47           ccmult: STX ADR1
0313 c0b7 fd 70 49            STD ADR2
0314 c0ba 7f 70 4b            CLR ADR3
0315 c0bd 7f 70 4c            CLR ADR3+1
0316 c0c0 b6 70 48            LDA ADR1+1
0317 c0c3 f6 70 4a            LDB ADR2+1
0318 c0c6 3d                  MUL
0319 c0c7 fd 70 4d            STD ADR3+2
0320 c0ca b6 70 47            LDA ADR1
0321 c0cd f6 70 4a            LDB ADR2+1
0322 c0d0 3d                  MUL
0323 c0d1 f3 70 4c            ADDD ADR3+1
0324 c0d4 fd 70 4c            STD ADR3+1
0325 c0d7 b6 70 48            LDA ADR1+1
0326 c0da f6 70 49            LDB ADR2
0327 c0dd 3d                  MUL
0328 c0de f3 70 4c            ADDD ADR3+1
0329 c0e1 fd 70 4c            STD ADR3+1
0330 c0e4 24 03               BCC NOCARRY
0331 c0e6 7c 70 4b            INC ADR3
0332 c0e9 b6 70 47           NOCARRY: LDA ADR1
0333 c0ec f6 70 49            LDB ADR2
0334 c0ef 3d                  MUL
0335 c0f0 f3 70 4b            ADDD ADR3
0336 c0f3 1f 01               TFR D,X
0337 c0f5 fc 70 4d            LDD ADR3+2
0338 c0f8 39                  RTS
0339                         *
0340                         *  switch statement
0341                         *
0342                         * D = switch value
0343                         * S = switch table
0344                         *     FDB addr1, value1
0345                         *     FDB addr2, value2
0346                         *     ...
0347                         *     FDB 0
0348                         *     [JMP DEFAULT]
0349                         *     continuation
0350                         *
0351 c0f9 35 10              ccswitch: PULS X get stack adr
0352 c0fb 10 ae 81           SWLOOP: LDY ,X++ get address
0353 c0fe 10 8c 00 00                CMPY #0 if 0
0354 c102 27 07                      BEQ SWEND then it is the default
0355 c104 10 a3 81                   CMPD ,X++ else, if it is not the switch value
0356 c107 26 f2                      BNE SWLOOP try next one
0357 c109 6e a4                      JMP ,Y else we found it
0358 c10b 6e 84              SWEND:  JMP ,X default exit
0359                         
0360                         * #endasm
0361                         * #else
0362                         * #asm
0363                         *    .globl  main
0364                         *    .globl  ccdi
0365                         *    .globl  ccmult
0366                         *    .globl  ccswitch
0367                         *    .area   RESET    (ABS,OVR)
0368                         *    .org    0hfffe       ; reset vector
0369                         *    .dw     0hc000
0370                         *    .area   RAMDATA  (REL,CON)
0371                         *    .area   ROMCODE  (REL,CON)
0372                         *    lds     #0h7000
0373                         *    jmp     main
0374                         * #endasm
0375                         * #endif
0376                         * #define ACIAPORT  0xA000
0377                         * #define LCD_cwr 0x9000
0378                         * #define LCD_dwr 0x9001
0379                         * #define LCD_crd 0x9002
0380                         * #define LCD_drd 0x9003
0381                         * #define BUSY 0x80
0382                         * #define xon 17
0383                         * #define xoff 19
0384                         * #const
0385                         
0386                         *  .area  CONST  (REL,CON)
0387                         * char convert[16]= {0xBD,0x30,0x9B,0xBA,0x36,0xAE,0xAF,0x38,
0388                         
0389                         * .global convert
0390                         convert: 
0391                         *                   0xBF,0xBE,0x3F,0xA7,0x8D,0xB3,0x8F,0x0F};
0392 c10d bd 30 9b ba 36 ae   FCB 189,48,155,186,54,174,175,56,191,190
     af 38 bf be
0393 c117 3f a7 8d b3 8f 0f   FCB 63,167,141,179,143,15
0394                         * char cold_msg[12]= {0,0,0,0,0,0,0xae,0xbf,0xbd,0xbe,0,0};
0395                         
0396                         * .global cold_msg
0397                         cold_msg: 
0398 c11d 00 00 00 00 00 00   FCB 0,0,0,0,0,0,174,191,189,190
     ae bf bd be
0399 c127 00 00               FCB 0,0
0400                         * #code
0401                         
0402                         *  .area  ROMCODE  (REL,CON)
0403                         * /*   LCD driver   */
0404                         * LcdReady()
0405                         
0406                         * .module LcdReady
0407                         
0408                         * .global LcdReady
0409                         LcdReady: 
0410                         * {
0411                         *    timeout=0;
0412 c129 cc 00 00            ldd  #0
0413 c12c fd 70 33            std  timeout
0414                         *     dptr = LCD_crd;
0415 c12f cc 90 02            ldd  #-28670
0416 c132 fd 70 43            std  dptr
0417                         *   
0418                         *    while((*dptr&0x80==1) && (timeout<500))
0419                         cc2:  
0420 c135 fc 70 43            ldd  dptr
0421 c138 34 06               pshs d
0422 c13a e6 f1               ldb  [,s++]
0423 c13c 1d                  sex
0424 c13d 34 06               pshs d
0425 c13f cc 00 80            ldd  #128
0426 c142 34 06               pshs d
0427 c144 cc 00 01            ldd  #1
0428 c147 10 a3 e1            cmpd ,s++
0429 c14a 27 05               beq  *+7
0430 c14c cc 00 00            ldd  #0
0431 c14f 20 03               bra  *+5
0432 c151 cc 00 01            ldd  #1
0433 c154 a4 e0               anda ,s+
0434 c156 e4 e0               andb ,s+
0435 c158 10 83 00 00         cmpd #0
0436 c15c 10 27 00 20         lbeq cc4 ;_  instruction flagged for non optimize
0437 c160 fc 70 33            ldd  timeout
0438 c163 34 06               pshs d
0439 c165 cc 01 f4            ldd  #500
0440 c168 10 a3 e1            cmpd ,s++
0441 c16b 2e 05               bgt  *+7
0442 c16d cc 00 00            ldd  #0
0443 c170 20 03               bra  *+5
0444 c172 cc 00 01            ldd  #1
0445 c175 10 83 00 00         cmpd #0
0446 c179 10 27 00 03         lbeq cc4 ;_  instruction flagged for non optimize
0447 c17d cc 00 01            ldd  #1
0448                         cc4:  
0449 c180 10 83 00 00         cmpd #0
0450 c184 10 27 00 0c         lbeq cc3
0451                         *     ++timeout; 
0452 c188 fc 70 33            ldd  timeout
0453 c18b c3 00 01            addd #1
0454 c18e fd 70 33            std  timeout
0455 c191 7e c1 35            jmp cc2
0456                         cc3:  
0457                         * }
0458 c194 39                  rts
0459                         * clr_screen()
0460                         
0461                         * .global clr_scre
0462                         clr_scre: 
0463                         * {
0464                         *     LcdReady();
0465 c195 bd c1 29            jsr LcdReady
0466                         * 	dptr = LCD_cwr;
0467 c198 cc 90 00            ldd  #-28672
0468 c19b fd 70 43            std  dptr
0469                         *     *dptr=0x01;
0470 c19e fc 70 43            ldd  dptr
0471 c1a1 34 06               pshs d
0472 c1a3 cc 00 01            ldd  #1
0473 c1a6 e7 f1               stb  [,s++]
0474                         * }
0475 c1a8 39                  rts
0476                         * goto_xy(x,y)
0477                         
0478                         * .global goto_xy
0479                         goto_xy: 
0480                         * int x, y;
0481                         * {
0482                         *     LcdReady();
0483 c1a9 bd c1 29            jsr LcdReady
0484                         * 	dptr = LCD_cwr;
0485 c1ac cc 90 00            ldd  #-28672
0486 c1af fd 70 43            std  dptr
0487                         *     switch(y)
0488 c1b2 31 62               leay 2,s
0489 c1b4 1f 20               tfr  y,d
0490 c1b6 34 06               pshs d
0491 c1b8 ec f1               ldd  [,s++]
0492 c1ba 7e c2 24            jmp cc7
0493                         * 	{
0494                         * 	case 0: *dptr=0x80+x; break;
0495                         cc8:  
0496 c1bd fc 70 43            ldd  dptr
0497 c1c0 34 06               pshs d
0498 c1c2 cc 00 80            ldd  #128
0499 c1c5 34 06               pshs d
0500 c1c7 31 68               leay 8,s
0501 c1c9 1f 20               tfr  y,d
0502 c1cb 34 06               pshs d
0503 c1cd ec f1               ldd  [,s++]
0504 c1cf e3 e1               addd ,s++
0505 c1d1 e7 f1               stb  [,s++]
0506 c1d3 7e c2 39            jmp cc6
0507                         *     case 1: *dptr=0xC0+x; break; 
0508                         cc9:  
0509 c1d6 fc 70 43            ldd  dptr
0510 c1d9 34 06               pshs d
0511 c1db cc 00 c0            ldd  #192
0512 c1de 34 06               pshs d
0513 c1e0 31 68               leay 8,s
0514 c1e2 1f 20               tfr  y,d
0515 c1e4 34 06               pshs d
0516 c1e6 ec f1               ldd  [,s++]
0517 c1e8 e3 e1               addd ,s++
0518 c1ea e7 f1               stb  [,s++]
0519 c1ec 7e c2 39            jmp cc6
0520                         *     case 2: *dptr=0x94+x; break; 
0521                         cc10:  
0522 c1ef fc 70 43            ldd  dptr
0523 c1f2 34 06               pshs d
0524 c1f4 cc 00 94            ldd  #148
0525 c1f7 34 06               pshs d
0526 c1f9 31 68               leay 8,s
0527 c1fb 1f 20               tfr  y,d
0528 c1fd 34 06               pshs d
0529 c1ff ec f1               ldd  [,s++]
0530 c201 e3 e1               addd ,s++
0531 c203 e7 f1               stb  [,s++]
0532 c205 7e c2 39            jmp cc6
0533                         *     case 3: *dptr=0xd4+x; break;
0534                         cc11:  
0535 c208 fc 70 43            ldd  dptr
0536 c20b 34 06               pshs d
0537 c20d cc 00 d4            ldd  #212
0538 c210 34 06               pshs d
0539 c212 31 68               leay 8,s
0540 c214 1f 20               tfr  y,d
0541 c216 34 06               pshs d
0542 c218 ec f1               ldd  [,s++]
0543 c21a e3 e1               addd ,s++
0544 c21c e7 f1               stb  [,s++]
0545 c21e 7e c2 39            jmp cc6
0546                         *     }
0547 c221 7e c2 39            jmp cc6
0548                         cc7:  
0549 c224 bd c0 f9            jsr ccswitch
0550 c227 c1 bd 00 00         FDB cc8,0
0551 c22b c1 d6 00 01         FDB cc9,1
0552 c22f c1 ef 00 02         FDB cc10,2
0553 c233 c2 08 00 03         FDB cc11,3
0554 c237 00 00               FDB 0
0555                         cc6:  
0556                         * }
0557 c239 39                  rts
0558                         * InitLcd()
0559                         
0560                         * .global InitLcd
0561                         InitLcd: 
0562                         * {
0563                         *     LcdReady();
0564 c23a bd c1 29            jsr LcdReady
0565                         * 	dptr = LCD_cwr;
0566 c23d cc 90 00            ldd  #-28672
0567 c240 fd 70 43            std  dptr
0568                         *     *dptr=0x38;
0569 c243 fc 70 43            ldd  dptr
0570 c246 34 06               pshs d
0571 c248 cc 00 38            ldd  #56
0572 c24b e7 f1               stb  [,s++]
0573                         *     LcdReady();
0574 c24d bd c1 29            jsr LcdReady
0575                         *     dptr = LCD_cwr;
0576 c250 cc 90 00            ldd  #-28672
0577 c253 fd 70 43            std  dptr
0578                         *     *dptr=0x0c;
0579 c256 fc 70 43            ldd  dptr
0580 c259 34 06               pshs d
0581 c25b cc 00 0c            ldd  #12
0582 c25e e7 f1               stb  [,s++]
0583                         *     clr_screen();
0584 c260 bd c1 95            jsr clr_scre
0585                         *     goto_xy(0,0);
0586 c263 cc 00 00            ldd  #0
0587 c266 34 06               pshs d
0588 c268 cc 00 00            ldd  #0
0589 c26b 34 06               pshs d
0590 c26d bd c1 a9            jsr goto_xy
0591 c270 32 64               leas 4,s
0592                         * 	delay_ms(100);
0593 c272 cc 00 64            ldd  #100
0594 c275 34 06               pshs d
0595 c277 bd c8 53            jsr delay_ms
0596 c27a 32 62               leas 2,s
0597                         * }	
0598 c27c 39                  rts
0599                         * PutLCD(str)
0600                         
0601                         * .global PutLCD
0602                         PutLCD: 
0603                         * char *str;
0604                         * {   
0605                         *     char i;
0606                         *     for (i=0; str[i] != '\0'; i++)
0607 c27d 32 7f               leas -1,s
0608 c27f 31 e4               leay 0,s
0609 c281 1f 20               tfr  y,d
0610 c283 34 06               pshs d
0611 c285 cc 00 00            ldd  #0
0612 c288 e7 f1               stb  [,s++]
0613                         cc14:  
0614 c28a 31 63               leay 3,s
0615 c28c 1f 20               tfr  y,d
0616 c28e 34 06               pshs d
0617 c290 ec f1               ldd  [,s++]
0618 c292 34 06               pshs d
0619 c294 31 62               leay 2,s
0620 c296 1f 20               tfr  y,d
0621 c298 34 06               pshs d
0622 c29a e6 f1               ldb  [,s++]
0623 c29c 1d                  sex
0624 c29d e3 e1               addd ,s++
0625 c29f 34 06               pshs d
0626 c2a1 e6 f1               ldb  [,s++]
0627 c2a3 1d                  sex
0628 c2a4 34 06               pshs d
0629 c2a6 cc 00 00            ldd  #0
0630 c2a9 10 a3 e1            cmpd ,s++
0631 c2ac 26 05               bne   *+7
0632 c2ae cc 00 00            ldd  #0
0633 c2b1 20 03               bra  *+5
0634 c2b3 cc 00 01            ldd  #1
0635 c2b6 10 83 00 00         cmpd #0
0636 c2ba 10 27 00 46         lbeq cc13
0637 c2be 7e c2 d7            jmp cc15
0638                         cc12:  
0639 c2c1 31 e4               leay 0,s
0640 c2c3 1f 20               tfr  y,d
0641 c2c5 34 06               pshs d
0642 c2c7 34 06               pshs d
0643 c2c9 e6 f1               ldb  [,s++]
0644 c2cb 1d                  sex
0645 c2cc c3 00 01            addd #1
0646 c2cf e7 f1               stb  [,s++]
0647 c2d1 83 00 01            subd #1
0648 c2d4 7e c2 8a            jmp cc14
0649                         cc15:  
0650                         * 	{
0651                         *     LcdReady();
0652 c2d7 bd c1 29            jsr LcdReady
0653                         * 	dptr = LCD_dwr;
0654 c2da cc 90 01            ldd  #-28671
0655 c2dd fd 70 43            std  dptr
0656                         *     *dptr=str[i];
0657 c2e0 fc 70 43            ldd  dptr
0658 c2e3 34 06               pshs d
0659 c2e5 31 65               leay 5,s
0660 c2e7 1f 20               tfr  y,d
0661 c2e9 34 06               pshs d
0662 c2eb ec f1               ldd  [,s++]
0663 c2ed 34 06               pshs d
0664 c2ef 31 64               leay 4,s
0665 c2f1 1f 20               tfr  y,d
0666 c2f3 34 06               pshs d
0667 c2f5 e6 f1               ldb  [,s++]
0668 c2f7 1d                  sex
0669 c2f8 e3 e1               addd ,s++
0670 c2fa 34 06               pshs d
0671 c2fc e6 f1               ldb  [,s++]
0672 c2fe 1d                  sex
0673 c2ff e7 f1               stb  [,s++]
0674                         *     }
0675 c301 7e c2 c1            jmp cc12
0676                         cc13:  
0677                         * }
0678 c304 32 61               leas 1,s
0679 c306 39                  rts
0680                         * putch_lcd(ch)
0681                         
0682                         * .global putch_lc
0683                         putch_lc: 
0684                         * char ch;
0685                         * {
0686                         *     LcdReady();
0687 c307 bd c1 29            jsr LcdReady
0688                         * 	dptr= LCD_dwr;
0689 c30a cc 90 01            ldd  #-28671
0690 c30d fd 70 43            std  dptr
0691                         *     *dptr=ch;
0692 c310 fc 70 43            ldd  dptr
0693 c313 34 06               pshs d
0694 c315 31 65               leay 5,s
0695 c317 1f 20               tfr  y,d
0696 c319 34 06               pshs d
0697 c31b e6 f1               ldb  [,s++]
0698 c31d 1d                  sex
0699 c31e e7 f1               stb  [,s++]
0700                         * }
0701 c320 39                  rts
0702                         * /* return internal code hex keys and function keys  */
0703                         * key_code(n)
0704                         
0705                         * .global key_code
0706                         key_code: 
0707                         * char n;
0708                         * {
0709                         * 	char d;
0710                         * 	if(n == 0x16) return 0;
0711 c321 32 7f               leas -1,s
0712 c323 31 64               leay 4,s
0713 c325 1f 20               tfr  y,d
0714 c327 34 06               pshs d
0715 c329 e6 f1               ldb  [,s++]
0716 c32b 1d                  sex
0717 c32c 34 06               pshs d
0718 c32e cc 00 16            ldd  #22
0719 c331 10 a3 e1            cmpd ,s++
0720 c334 27 05               beq  *+7
0721 c336 cc 00 00            ldd  #0
0722 c339 20 03               bra  *+5
0723 c33b cc 00 01            ldd  #1
0724 c33e 10 83 00 00         cmpd #0
0725 c342 10 27 00 06         lbeq cc16
0726 c346 cc 00 00            ldd  #0
0727 c349 32 61               leas 1,s
0728 c34b 39                  rts
0729                         * 	if(n == 0x21) return 1;
0730                         cc16:  
0731 c34c 31 64               leay 4,s
0732 c34e 1f 20               tfr  y,d
0733 c350 34 06               pshs d
0734 c352 e6 f1               ldb  [,s++]
0735 c354 1d                  sex
0736 c355 34 06               pshs d
0737 c357 cc 00 21            ldd  #33
0738 c35a 10 a3 e1            cmpd ,s++
0739 c35d 27 05               beq  *+7
0740 c35f cc 00 00            ldd  #0
0741 c362 20 03               bra  *+5
0742 c364 cc 00 01            ldd  #1
0743 c367 10 83 00 00         cmpd #0
0744 c36b 10 27 00 06         lbeq cc17
0745 c36f cc 00 01            ldd  #1
0746 c372 32 61               leas 1,s
0747 c374 39                  rts
0748                         * 	if(n == 0x1b) return 2;
0749                         cc17:  
0750 c375 31 64               leay 4,s
0751 c377 1f 20               tfr  y,d
0752 c379 34 06               pshs d
0753 c37b e6 f1               ldb  [,s++]
0754 c37d 1d                  sex
0755 c37e 34 06               pshs d
0756 c380 cc 00 1b            ldd  #27
0757 c383 10 a3 e1            cmpd ,s++
0758 c386 27 05               beq  *+7
0759 c388 cc 00 00            ldd  #0
0760 c38b 20 03               bra  *+5
0761 c38d cc 00 01            ldd  #1
0762 c390 10 83 00 00         cmpd #0
0763 c394 10 27 00 06         lbeq cc18
0764 c398 cc 00 02            ldd  #2
0765 c39b 32 61               leas 1,s
0766 c39d 39                  rts
0767                         * 	if(n == 0x15) return 3;
0768                         cc18:  
0769 c39e 31 64               leay 4,s
0770 c3a0 1f 20               tfr  y,d
0771 c3a2 34 06               pshs d
0772 c3a4 e6 f1               ldb  [,s++]
0773 c3a6 1d                  sex
0774 c3a7 34 06               pshs d
0775 c3a9 cc 00 15            ldd  #21
0776 c3ac 10 a3 e1            cmpd ,s++
0777 c3af 27 05               beq  *+7
0778 c3b1 cc 00 00            ldd  #0
0779 c3b4 20 03               bra  *+5
0780 c3b6 cc 00 01            ldd  #1
0781 c3b9 10 83 00 00         cmpd #0
0782 c3bd 10 27 00 06         lbeq cc19
0783 c3c1 cc 00 03            ldd  #3
0784 c3c4 32 61               leas 1,s
0785 c3c6 39                  rts
0786                         * 	if(n == 0x1c) return 4;
0787                         cc19:  
0788 c3c7 31 64               leay 4,s
0789 c3c9 1f 20               tfr  y,d
0790 c3cb 34 06               pshs d
0791 c3cd e6 f1               ldb  [,s++]
0792 c3cf 1d                  sex
0793 c3d0 34 06               pshs d
0794 c3d2 cc 00 1c            ldd  #28
0795 c3d5 10 a3 e1            cmpd ,s++
0796 c3d8 27 05               beq  *+7
0797 c3da cc 00 00            ldd  #0
0798 c3dd 20 03               bra  *+5
0799 c3df cc 00 01            ldd  #1
0800 c3e2 10 83 00 00         cmpd #0
0801 c3e6 10 27 00 06         lbeq cc20
0802 c3ea cc 00 04            ldd  #4
0803 c3ed 32 61               leas 1,s
0804 c3ef 39                  rts
0805                         * 	if(n == 0x20) return 5;
0806                         cc20:  
0807 c3f0 31 64               leay 4,s
0808 c3f2 1f 20               tfr  y,d
0809 c3f4 34 06               pshs d
0810 c3f6 e6 f1               ldb  [,s++]
0811 c3f8 1d                  sex
0812 c3f9 34 06               pshs d
0813 c3fb cc 00 20            ldd  #32
0814 c3fe 10 a3 e1            cmpd ,s++
0815 c401 27 05               beq  *+7
0816 c403 cc 00 00            ldd  #0
0817 c406 20 03               bra  *+5
0818 c408 cc 00 01            ldd  #1
0819 c40b 10 83 00 00         cmpd #0
0820 c40f 10 27 00 06         lbeq cc21
0821 c413 cc 00 05            ldd  #5
0822 c416 32 61               leas 1,s
0823 c418 39                  rts
0824                         * 	if(n == 0x1a) return 6;
0825                         cc21:  
0826 c419 31 64               leay 4,s
0827 c41b 1f 20               tfr  y,d
0828 c41d 34 06               pshs d
0829 c41f e6 f1               ldb  [,s++]
0830 c421 1d                  sex
0831 c422 34 06               pshs d
0832 c424 cc 00 1a            ldd  #26
0833 c427 10 a3 e1            cmpd ,s++
0834 c42a 27 05               beq  *+7
0835 c42c cc 00 00            ldd  #0
0836 c42f 20 03               bra  *+5
0837 c431 cc 00 01            ldd  #1
0838 c434 10 83 00 00         cmpd #0
0839 c438 10 27 00 06         lbeq cc22
0840 c43c cc 00 06            ldd  #6
0841 c43f 32 61               leas 1,s
0842 c441 39                  rts
0843                         * 	if(n == 0x14) return 7;
0844                         cc22:  
0845 c442 31 64               leay 4,s
0846 c444 1f 20               tfr  y,d
0847 c446 34 06               pshs d
0848 c448 e6 f1               ldb  [,s++]
0849 c44a 1d                  sex
0850 c44b 34 06               pshs d
0851 c44d cc 00 14            ldd  #20
0852 c450 10 a3 e1            cmpd ,s++
0853 c453 27 05               beq  *+7
0854 c455 cc 00 00            ldd  #0
0855 c458 20 03               bra  *+5
0856 c45a cc 00 01            ldd  #1
0857 c45d 10 83 00 00         cmpd #0
0858 c461 10 27 00 06         lbeq cc23
0859 c465 cc 00 07            ldd  #7
0860 c468 32 61               leas 1,s
0861 c46a 39                  rts
0862                         * 	if(n == 0x22) return 8;
0863                         cc23:  
0864 c46b 31 64               leay 4,s
0865 c46d 1f 20               tfr  y,d
0866 c46f 34 06               pshs d
0867 c471 e6 f1               ldb  [,s++]
0868 c473 1d                  sex
0869 c474 34 06               pshs d
0870 c476 cc 00 22            ldd  #34
0871 c479 10 a3 e1            cmpd ,s++
0872 c47c 27 05               beq  *+7
0873 c47e cc 00 00            ldd  #0
0874 c481 20 03               bra  *+5
0875 c483 cc 00 01            ldd  #1
0876 c486 10 83 00 00         cmpd #0
0877 c48a 10 27 00 06         lbeq cc24
0878 c48e cc 00 08            ldd  #8
0879 c491 32 61               leas 1,s
0880 c493 39                  rts
0881                         * 	if(n == 0x1f) return 9;
0882                         cc24:  
0883 c494 31 64               leay 4,s
0884 c496 1f 20               tfr  y,d
0885 c498 34 06               pshs d
0886 c49a e6 f1               ldb  [,s++]
0887 c49c 1d                  sex
0888 c49d 34 06               pshs d
0889 c49f cc 00 1f            ldd  #31
0890 c4a2 10 a3 e1            cmpd ,s++
0891 c4a5 27 05               beq  *+7
0892 c4a7 cc 00 00            ldd  #0
0893 c4aa 20 03               bra  *+5
0894 c4ac cc 00 01            ldd  #1
0895 c4af 10 83 00 00         cmpd #0
0896 c4b3 10 27 00 06         lbeq cc25
0897 c4b7 cc 00 09            ldd  #9
0898 c4ba 32 61               leas 1,s
0899 c4bc 39                  rts
0900                         * 	if(n == 0x19) return 0xa;
0901                         cc25:  
0902 c4bd 31 64               leay 4,s
0903 c4bf 1f 20               tfr  y,d
0904 c4c1 34 06               pshs d
0905 c4c3 e6 f1               ldb  [,s++]
0906 c4c5 1d                  sex
0907 c4c6 34 06               pshs d
0908 c4c8 cc 00 19            ldd  #25
0909 c4cb 10 a3 e1            cmpd ,s++
0910 c4ce 27 05               beq  *+7
0911 c4d0 cc 00 00            ldd  #0
0912 c4d3 20 03               bra  *+5
0913 c4d5 cc 00 01            ldd  #1
0914 c4d8 10 83 00 00         cmpd #0
0915 c4dc 10 27 00 06         lbeq cc26
0916 c4e0 cc 00 0a            ldd  #10
0917 c4e3 32 61               leas 1,s
0918 c4e5 39                  rts
0919                         * 	if(n == 0x13) return 0xb;
0920                         cc26:  
0921 c4e6 31 64               leay 4,s
0922 c4e8 1f 20               tfr  y,d
0923 c4ea 34 06               pshs d
0924 c4ec e6 f1               ldb  [,s++]
0925 c4ee 1d                  sex
0926 c4ef 34 06               pshs d
0927 c4f1 cc 00 13            ldd  #19
0928 c4f4 10 a3 e1            cmpd ,s++
0929 c4f7 27 05               beq  *+7
0930 c4f9 cc 00 00            ldd  #0
0931 c4fc 20 03               bra  *+5
0932 c4fe cc 00 01            ldd  #1
0933 c501 10 83 00 00         cmpd #0
0934 c505 10 27 00 06         lbeq cc27
0935 c509 cc 00 0b            ldd  #11
0936 c50c 32 61               leas 1,s
0937 c50e 39                  rts
0938                         * 	if(n == 3) return 0xc;
0939                         cc27:  
0940 c50f 31 64               leay 4,s
0941 c511 1f 20               tfr  y,d
0942 c513 34 06               pshs d
0943 c515 e6 f1               ldb  [,s++]
0944 c517 1d                  sex
0945 c518 34 06               pshs d
0946 c51a cc 00 03            ldd  #3
0947 c51d 10 a3 e1            cmpd ,s++
0948 c520 27 05               beq  *+7
0949 c522 cc 00 00            ldd  #0
0950 c525 20 03               bra  *+5
0951 c527 cc 00 01            ldd  #1
0952 c52a 10 83 00 00         cmpd #0
0953 c52e 10 27 00 06         lbeq cc28
0954 c532 cc 00 0c            ldd  #12
0955 c535 32 61               leas 1,s
0956 c537 39                  rts
0957                         * 	if(n == 0x1e) return 0xd;
0958                         cc28:  
0959 c538 31 64               leay 4,s
0960 c53a 1f 20               tfr  y,d
0961 c53c 34 06               pshs d
0962 c53e e6 f1               ldb  [,s++]
0963 c540 1d                  sex
0964 c541 34 06               pshs d
0965 c543 cc 00 1e            ldd  #30
0966 c546 10 a3 e1            cmpd ,s++
0967 c549 27 05               beq  *+7
0968 c54b cc 00 00            ldd  #0
0969 c54e 20 03               bra  *+5
0970 c550 cc 00 01            ldd  #1
0971 c553 10 83 00 00         cmpd #0
0972 c557 10 27 00 06         lbeq cc29
0973 c55b cc 00 0d            ldd  #13
0974 c55e 32 61               leas 1,s
0975 c560 39                  rts
0976                         * 	if(n == 0x18) return 0xe;
0977                         cc29:  
0978 c561 31 64               leay 4,s
0979 c563 1f 20               tfr  y,d
0980 c565 34 06               pshs d
0981 c567 e6 f1               ldb  [,s++]
0982 c569 1d                  sex
0983 c56a 34 06               pshs d
0984 c56c cc 00 18            ldd  #24
0985 c56f 10 a3 e1            cmpd ,s++
0986 c572 27 05               beq  *+7
0987 c574 cc 00 00            ldd  #0
0988 c577 20 03               bra  *+5
0989 c579 cc 00 01            ldd  #1
0990 c57c 10 83 00 00         cmpd #0
0991 c580 10 27 00 06         lbeq cc30
0992 c584 cc 00 0e            ldd  #14
0993 c587 32 61               leas 1,s
0994 c589 39                  rts
0995                         * 	if(n == 0x12) return 0xf;
0996                         cc30:  
0997 c58a 31 64               leay 4,s
0998 c58c 1f 20               tfr  y,d
0999 c58e 34 06               pshs d
1000 c590 e6 f1               ldb  [,s++]
1001 c592 1d                  sex
1002 c593 34 06               pshs d
1003 c595 cc 00 12            ldd  #18
1004 c598 10 a3 e1            cmpd ,s++
1005 c59b 27 05               beq  *+7
1006 c59d cc 00 00            ldd  #0
1007 c5a0 20 03               bra  *+5
1008 c5a2 cc 00 01            ldd  #1
1009 c5a5 10 83 00 00         cmpd #0
1010 c5a9 10 27 00 06         lbeq cc31
1011 c5ad cc 00 0f            ldd  #15
1012 c5b0 32 61               leas 1,s
1013 c5b2 39                  rts
1014                         * 	
1015                         * 	if(n == 0xc) return 0x10;
1016                         cc31:  
1017 c5b3 31 64               leay 4,s
1018 c5b5 1f 20               tfr  y,d
1019 c5b7 34 06               pshs d
1020 c5b9 e6 f1               ldb  [,s++]
1021 c5bb 1d                  sex
1022 c5bc 34 06               pshs d
1023 c5be cc 00 0c            ldd  #12
1024 c5c1 10 a3 e1            cmpd ,s++
1025 c5c4 27 05               beq  *+7
1026 c5c6 cc 00 00            ldd  #0
1027 c5c9 20 03               bra  *+5
1028 c5cb cc 00 01            ldd  #1
1029 c5ce 10 83 00 00         cmpd #0
1030 c5d2 10 27 00 06         lbeq cc32
1031 c5d6 cc 00 10            ldd  #16
1032 c5d9 32 61               leas 1,s
1033 c5db 39                  rts
1034                         * 	if(n == 0xd) return 0x11;
1035                         cc32:  
1036 c5dc 31 64               leay 4,s
1037 c5de 1f 20               tfr  y,d
1038 c5e0 34 06               pshs d
1039 c5e2 e6 f1               ldb  [,s++]
1040 c5e4 1d                  sex
1041 c5e5 34 06               pshs d
1042 c5e7 cc 00 0d            ldd  #13
1043 c5ea 10 a3 e1            cmpd ,s++
1044 c5ed 27 05               beq  *+7
1045 c5ef cc 00 00            ldd  #0
1046 c5f2 20 03               bra  *+5
1047 c5f4 cc 00 01            ldd  #1
1048 c5f7 10 83 00 00         cmpd #0
1049 c5fb 10 27 00 06         lbeq cc33
1050 c5ff cc 00 11            ldd  #17
1051 c602 32 61               leas 1,s
1052 c604 39                  rts
1053                         * 	if(n == 0xe) return 0x12;
1054                         cc33:  
1055 c605 31 64               leay 4,s
1056 c607 1f 20               tfr  y,d
1057 c609 34 06               pshs d
1058 c60b e6 f1               ldb  [,s++]
1059 c60d 1d                  sex
1060 c60e 34 06               pshs d
1061 c610 cc 00 0e            ldd  #14
1062 c613 10 a3 e1            cmpd ,s++
1063 c616 27 05               beq  *+7
1064 c618 cc 00 00            ldd  #0
1065 c61b 20 03               bra  *+5
1066 c61d cc 00 01            ldd  #1
1067 c620 10 83 00 00         cmpd #0
1068 c624 10 27 00 06         lbeq cc34
1069 c628 cc 00 12            ldd  #18
1070 c62b 32 61               leas 1,s
1071 c62d 39                  rts
1072                         * 	if(n == 0xf) return 0x13;
1073                         cc34:  
1074 c62e 31 64               leay 4,s
1075 c630 1f 20               tfr  y,d
1076 c632 34 06               pshs d
1077 c634 e6 f1               ldb  [,s++]
1078 c636 1d                  sex
1079 c637 34 06               pshs d
1080 c639 cc 00 0f            ldd  #15
1081 c63c 10 a3 e1            cmpd ,s++
1082 c63f 27 05               beq  *+7
1083 c641 cc 00 00            ldd  #0
1084 c644 20 03               bra  *+5
1085 c646 cc 00 01            ldd  #1
1086 c649 10 83 00 00         cmpd #0
1087 c64d 10 27 00 06         lbeq cc35
1088 c651 cc 00 13            ldd  #19
1089 c654 32 61               leas 1,s
1090 c656 39                  rts
1091                         * 	if(n == 6) return 0x14;
1092                         cc35:  
1093 c657 31 64               leay 4,s
1094 c659 1f 20               tfr  y,d
1095 c65b 34 06               pshs d
1096 c65d e6 f1               ldb  [,s++]
1097 c65f 1d                  sex
1098 c660 34 06               pshs d
1099 c662 cc 00 06            ldd  #6
1100 c665 10 a3 e1            cmpd ,s++
1101 c668 27 05               beq  *+7
1102 c66a cc 00 00            ldd  #0
1103 c66d 20 03               bra  *+5
1104 c66f cc 00 01            ldd  #1
1105 c672 10 83 00 00         cmpd #0
1106 c676 10 27 00 06         lbeq cc36
1107 c67a cc 00 14            ldd  #20
1108 c67d 32 61               leas 1,s
1109 c67f 39                  rts
1110                         * 	if(n == 7) return 0x15;
1111                         cc36:  
1112 c680 31 64               leay 4,s
1113 c682 1f 20               tfr  y,d
1114 c684 34 06               pshs d
1115 c686 e6 f1               ldb  [,s++]
1116 c688 1d                  sex
1117 c689 34 06               pshs d
1118 c68b cc 00 07            ldd  #7
1119 c68e 10 a3 e1            cmpd ,s++
1120 c691 27 05               beq  *+7
1121 c693 cc 00 00            ldd  #0
1122 c696 20 03               bra  *+5
1123 c698 cc 00 01            ldd  #1
1124 c69b 10 83 00 00         cmpd #0
1125 c69f 10 27 00 06         lbeq cc37
1126 c6a3 cc 00 15            ldd  #21
1127 c6a6 32 61               leas 1,s
1128 c6a8 39                  rts
1129                         * 	if(n == 8) return 0x16;
1130                         cc37:  
1131 c6a9 31 64               leay 4,s
1132 c6ab 1f 20               tfr  y,d
1133 c6ad 34 06               pshs d
1134 c6af e6 f1               ldb  [,s++]
1135 c6b1 1d                  sex
1136 c6b2 34 06               pshs d
1137 c6b4 cc 00 08            ldd  #8
1138 c6b7 10 a3 e1            cmpd ,s++
1139 c6ba 27 05               beq  *+7
1140 c6bc cc 00 00            ldd  #0
1141 c6bf 20 03               bra  *+5
1142 c6c1 cc 00 01            ldd  #1
1143 c6c4 10 83 00 00         cmpd #0
1144 c6c8 10 27 00 06         lbeq cc38
1145 c6cc cc 00 16            ldd  #22
1146 c6cf 32 61               leas 1,s
1147 c6d1 39                  rts
1148                         * 	if(n == 9) return 0x17;
1149                         cc38:  
1150 c6d2 31 64               leay 4,s
1151 c6d4 1f 20               tfr  y,d
1152 c6d6 34 06               pshs d
1153 c6d8 e6 f1               ldb  [,s++]
1154 c6da 1d                  sex
1155 c6db 34 06               pshs d
1156 c6dd cc 00 09            ldd  #9
1157 c6e0 10 a3 e1            cmpd ,s++
1158 c6e3 27 05               beq  *+7
1159 c6e5 cc 00 00            ldd  #0
1160 c6e8 20 03               bra  *+5
1161 c6ea cc 00 01            ldd  #1
1162 c6ed 10 83 00 00         cmpd #0
1163 c6f1 10 27 00 06         lbeq cc39
1164 c6f5 cc 00 17            ldd  #23
1165 c6f8 32 61               leas 1,s
1166 c6fa 39                  rts
1167                         * 	if(n == 0) return 0x18;
1168                         cc39:  
1169 c6fb 31 64               leay 4,s
1170 c6fd 1f 20               tfr  y,d
1171 c6ff 34 06               pshs d
1172 c701 e6 f1               ldb  [,s++]
1173 c703 1d                  sex
1174 c704 34 06               pshs d
1175 c706 cc 00 00            ldd  #0
1176 c709 10 a3 e1            cmpd ,s++
1177 c70c 27 05               beq  *+7
1178 c70e cc 00 00            ldd  #0
1179 c711 20 03               bra  *+5
1180 c713 cc 00 01            ldd  #1
1181 c716 10 83 00 00         cmpd #0
1182 c71a 10 27 00 06         lbeq cc40
1183 c71e cc 00 18            ldd  #24
1184 c721 32 61               leas 1,s
1185 c723 39                  rts
1186                         * 	if(n == 1) return 0x19;
1187                         cc40:  
1188 c724 31 64               leay 4,s
1189 c726 1f 20               tfr  y,d
1190 c728 34 06               pshs d
1191 c72a e6 f1               ldb  [,s++]
1192 c72c 1d                  sex
1193 c72d 34 06               pshs d
1194 c72f cc 00 01            ldd  #1
1195 c732 10 a3 e1            cmpd ,s++
1196 c735 27 05               beq  *+7
1197 c737 cc 00 00            ldd  #0
1198 c73a 20 03               bra  *+5
1199 c73c cc 00 01            ldd  #1
1200 c73f 10 83 00 00         cmpd #0
1201 c743 10 27 00 06         lbeq cc41
1202 c747 cc 00 19            ldd  #25
1203 c74a 32 61               leas 1,s
1204 c74c 39                  rts
1205                         * 	if(n == 2) return 0x1a;
1206                         cc41:  
1207 c74d 31 64               leay 4,s
1208 c74f 1f 20               tfr  y,d
1209 c751 34 06               pshs d
1210 c753 e6 f1               ldb  [,s++]
1211 c755 1d                  sex
1212 c756 34 06               pshs d
1213 c758 cc 00 02            ldd  #2
1214 c75b 10 a3 e1            cmpd ,s++
1215 c75e 27 05               beq  *+7
1216 c760 cc 00 00            ldd  #0
1217 c763 20 03               bra  *+5
1218 c765 cc 00 01            ldd  #1
1219 c768 10 83 00 00         cmpd #0
1220 c76c 10 27 00 06         lbeq cc42
1221 c770 cc 00 1a            ldd  #26
1222 c773 32 61               leas 1,s
1223 c775 39                  rts
1224                         * 	if(n == 0x24) return 0x1b;
1225                         cc42:  
1226 c776 31 64               leay 4,s
1227 c778 1f 20               tfr  y,d
1228 c77a 34 06               pshs d
1229 c77c e6 f1               ldb  [,s++]
1230 c77e 1d                  sex
1231 c77f 34 06               pshs d
1232 c781 cc 00 24            ldd  #36
1233 c784 10 a3 e1            cmpd ,s++
1234 c787 27 05               beq  *+7
1235 c789 cc 00 00            ldd  #0
1236 c78c 20 03               bra  *+5
1237 c78e cc 00 01            ldd  #1
1238 c791 10 83 00 00         cmpd #0
1239 c795 10 27 00 06         lbeq cc43
1240 c799 cc 00 1b            ldd  #27
1241 c79c 32 61               leas 1,s
1242 c79e 39                  rts
1243                         *     if(n == 0x23) return 0x1c;
1244                         cc43:  
1245 c79f 31 64               leay 4,s
1246 c7a1 1f 20               tfr  y,d
1247 c7a3 34 06               pshs d
1248 c7a5 e6 f1               ldb  [,s++]
1249 c7a7 1d                  sex
1250 c7a8 34 06               pshs d
1251 c7aa cc 00 23            ldd  #35
1252 c7ad 10 a3 e1            cmpd ,s++
1253 c7b0 27 05               beq  *+7
1254 c7b2 cc 00 00            ldd  #0
1255 c7b5 20 03               bra  *+5
1256 c7b7 cc 00 01            ldd  #1
1257 c7ba 10 83 00 00         cmpd #0
1258 c7be 10 27 00 06         lbeq cc44
1259 c7c2 cc 00 1c            ldd  #28
1260 c7c5 32 61               leas 1,s
1261 c7c7 39                  rts
1262                         * 	if(n == 0x1d) return 0x1d;
1263                         cc44:  
1264 c7c8 31 64               leay 4,s
1265 c7ca 1f 20               tfr  y,d
1266 c7cc 34 06               pshs d
1267 c7ce e6 f1               ldb  [,s++]
1268 c7d0 1d                  sex
1269 c7d1 34 06               pshs d
1270 c7d3 cc 00 1d            ldd  #29
1271 c7d6 10 a3 e1            cmpd ,s++
1272 c7d9 27 05               beq  *+7
1273 c7db cc 00 00            ldd  #0
1274 c7de 20 03               bra  *+5
1275 c7e0 cc 00 01            ldd  #1
1276 c7e3 10 83 00 00         cmpd #0
1277 c7e7 10 27 00 06         lbeq cc45
1278 c7eb cc 00 1d            ldd  #29
1279 c7ee 32 61               leas 1,s
1280 c7f0 39                  rts
1281                         * 	if(n == 0x17) return 0x1e;
1282                         cc45:  
1283 c7f1 31 64               leay 4,s
1284 c7f3 1f 20               tfr  y,d
1285 c7f5 34 06               pshs d
1286 c7f7 e6 f1               ldb  [,s++]
1287 c7f9 1d                  sex
1288 c7fa 34 06               pshs d
1289 c7fc cc 00 17            ldd  #23
1290 c7ff 10 a3 e1            cmpd ,s++
1291 c802 27 05               beq  *+7
1292 c804 cc 00 00            ldd  #0
1293 c807 20 03               bra  *+5
1294 c809 cc 00 01            ldd  #1
1295 c80c 10 83 00 00         cmpd #0
1296 c810 10 27 00 06         lbeq cc46
1297 c814 cc 00 1e            ldd  #30
1298 c817 32 61               leas 1,s
1299 c819 39                  rts
1300                         * 	if(n == 0x10) return 0x1f;
1301                         cc46:  
1302 c81a 31 64               leay 4,s
1303 c81c 1f 20               tfr  y,d
1304 c81e 34 06               pshs d
1305 c820 e6 f1               ldb  [,s++]
1306 c822 1d                  sex
1307 c823 34 06               pshs d
1308 c825 cc 00 10            ldd  #16
1309 c828 10 a3 e1            cmpd ,s++
1310 c82b 27 05               beq  *+7
1311 c82d cc 00 00            ldd  #0
1312 c830 20 03               bra  *+5
1313 c832 cc 00 01            ldd  #1
1314 c835 10 83 00 00         cmpd #0
1315 c839 10 27 00 06         lbeq cc47
1316 c83d cc 00 1f            ldd  #31
1317 c840 32 61               leas 1,s
1318 c842 39                  rts
1319                         * 	
1320                         * 	
1321                         *     
1322                         * }
1323                         cc47:  
1324 c843 32 61               leas 1,s
1325 c845 39                  rts
1326                         * delay_num1()
1327                         
1328                         * .global delay_nu
1329                         delay_nu: 
1330                         * {
1331                         *   temp=0;
1332 c846 cc 00 00            ldd  #0
1333 c849 fd 70 12            std  temp
1334                         *   temp=0;
1335 c84c cc 00 00            ldd  #0
1336 c84f fd 70 12            std  temp
1337                         * }
1338 c852 39                  rts
1339                         * delay_ms(w)
1340                         
1341                         * .global delay_ms
1342                         delay_ms: 
1343                         * int w;
1344                         * {
1345                         *   for( n = 0; n < w; n++)
1346 c853 cc 00 00            ldd  #0
1347 c856 f7 70 04            stb  n
1348                         cc50:  
1349 c859 f6 70 04            ldb  n
1350 c85c 1d                  sex
1351 c85d 34 06               pshs d
1352 c85f 31 64               leay 4,s
1353 c861 1f 20               tfr  y,d
1354 c863 34 06               pshs d
1355 c865 ec f1               ldd  [,s++]
1356 c867 10 a3 e1            cmpd ,s++
1357 c86a 2e 05               bgt  *+7
1358 c86c cc 00 00            ldd  #0
1359 c86f 20 03               bra  *+5
1360 c871 cc 00 01            ldd  #1
1361 c874 10 83 00 00         cmpd #0
1362 c878 10 27 00 19         lbeq cc49
1363 c87c 7e c8 8f            jmp cc51
1364                         cc48:  
1365 c87f f6 70 04            ldb  n
1366 c882 1d                  sex
1367 c883 c3 00 01            addd #1
1368 c886 f7 70 04            stb  n
1369 c889 83 00 01            subd #1
1370 c88c 7e c8 59            jmp cc50
1371                         cc51:  
1372                         * 	  continue;
1373 c88f 7e c8 7f            jmp cc48
1374 c892 7e c8 7f            jmp cc48
1375                         cc49:  
1376                         * }
1377 c895 39                  rts
1378                         * scan()
1379                         
1380                         * .global scan
1381                         scan: 
1382                         * {
1383                         * 	char key_pressed;
1384                         *     k = 1;
1385 c896 32 7f               leas -1,s
1386 c898 cc 00 01            ldd  #1
1387 c89b f7 70 05            stb  k
1388                         * 	u = 0;
1389 c89e cc 00 00            ldd  #0
1390 c8a1 f7 70 06            stb  u
1391                         * 	key = -1; 
1392 c8a4 cc 00 01            ldd  #1
1393 c8a7 43                  coma
1394 c8a8 53                  comb
1395 c8a9 c3 00 01            addd #1
1396 c8ac f7 70 09            stb  key
1397                         * 	q = 0; 
1398 c8af cc 00 00            ldd  #0
1399 c8b2 f7 70 07            stb  q
1400                         *    for(i=0; i<6; i++)
1401 c8b5 cc 00 00            ldd  #0
1402 c8b8 fd 70 00            std  i
1403                         cc54:  
1404 c8bb fc 70 00            ldd  i
1405 c8be 34 06               pshs d
1406 c8c0 cc 00 06            ldd  #6
1407 c8c3 10 a3 e1            cmpd ,s++
1408 c8c6 2e 05               bgt  *+7
1409 c8c8 cc 00 00            ldd  #0
1410 c8cb 20 03               bra  *+5
1411 c8cd cc 00 01            ldd  #1
1412 c8d0 10 83 00 00         cmpd #0
1413 c8d4 10 27 01 9e         lbeq cc53
1414 c8d8 7e c8 ea            jmp cc55
1415                         cc52:  
1416 c8db fc 70 00            ldd  i
1417 c8de c3 00 01            addd #1
1418 c8e1 fd 70 00            std  i
1419 c8e4 83 00 01            subd #1
1420 c8e7 7e c8 bb            jmp cc54
1421                         cc55:  
1422                         *    {
1423                         *      *port1 = ~k;
1424 c8ea fc 70 3f            ldd  port1
1425 c8ed 34 06               pshs d
1426 c8ef f6 70 05            ldb  k
1427 c8f2 1d                  sex
1428 c8f3 43                  coma
1429 c8f4 53                  comb
1430 c8f5 e7 f1               stb  [,s++]
1431                         * 	 
1432                         * 	 *port2 = buffer[i];
1433 c8f7 fc 70 3d            ldd  port2
1434 c8fa 34 06               pshs d
1435 c8fc cc 70 35            ldd  #buffer
1436 c8ff 34 06               pshs d
1437 c901 fc 70 00            ldd  i
1438 c904 e3 e1               addd ,s++
1439 c906 34 06               pshs d
1440 c908 e6 f1               ldb  [,s++]
1441 c90a 1d                  sex
1442 c90b e7 f1               stb  [,s++]
1443                         * 	 
1444                         * 	 if(buffer[i] != 0x30 && buffer[i] != 0x38 && buffer[i] != 0x70) delay_ms(2);
1445 c90d cc 70 35            ldd  #buffer
1446 c910 34 06               pshs d
1447 c912 fc 70 00            ldd  i
1448 c915 e3 e1               addd ,s++
1449 c917 34 06               pshs d
1450 c919 e6 f1               ldb  [,s++]
1451 c91b 1d                  sex
1452 c91c 34 06               pshs d
1453 c91e cc 00 30            ldd  #48
1454 c921 10 a3 e1            cmpd ,s++
1455 c924 26 05               bne   *+7
1456 c926 cc 00 00            ldd  #0
1457 c929 20 03               bra  *+5
1458 c92b cc 00 01            ldd  #1
1459 c92e 10 83 00 00         cmpd #0
1460 c932 10 27 00 2c         lbeq cc57 ;_  instruction flagged for non optimize
1461 c936 cc 70 35            ldd  #buffer
1462 c939 34 06               pshs d
1463 c93b fc 70 00            ldd  i
1464 c93e e3 e1               addd ,s++
1465 c940 34 06               pshs d
1466 c942 e6 f1               ldb  [,s++]
1467 c944 1d                  sex
1468 c945 34 06               pshs d
1469 c947 cc 00 38            ldd  #56
1470 c94a 10 a3 e1            cmpd ,s++
1471 c94d 26 05               bne   *+7
1472 c94f cc 00 00            ldd  #0
1473 c952 20 03               bra  *+5
1474 c954 cc 00 01            ldd  #1
1475 c957 10 83 00 00         cmpd #0
1476 c95b 10 27 00 03         lbeq cc57 ;_  instruction flagged for non optimize
1477 c95f cc 00 01            ldd  #1
1478                         cc57:  
1479 c962 10 83 00 00         cmpd #0
1480 c966 10 27 00 2c         lbeq cc58 ;_  instruction flagged for non optimize
1481 c96a cc 70 35            ldd  #buffer
1482 c96d 34 06               pshs d
1483 c96f fc 70 00            ldd  i
1484 c972 e3 e1               addd ,s++
1485 c974 34 06               pshs d
1486 c976 e6 f1               ldb  [,s++]
1487 c978 1d                  sex
1488 c979 34 06               pshs d
1489 c97b cc 00 70            ldd  #112
1490 c97e 10 a3 e1            cmpd ,s++
1491 c981 26 05               bne   *+7
1492 c983 cc 00 00            ldd  #0
1493 c986 20 03               bra  *+5
1494 c988 cc 00 01            ldd  #1
1495 c98b 10 83 00 00         cmpd #0
1496 c98f 10 27 00 03         lbeq cc58 ;_  instruction flagged for non optimize
1497 c993 cc 00 01            ldd  #1
1498                         cc58:  
1499 c996 10 83 00 00         cmpd #0
1500 c99a 10 27 00 0d         lbeq cc56
1501 c99e cc 00 02            ldd  #2
1502 c9a1 34 06               pshs d
1503 c9a3 bd c8 53            jsr delay_ms
1504 c9a6 32 62               leas 2,s
1505                         * 	 else delay_num1(); 
1506 c9a8 7e c9 ae            jmp cc59
1507                         cc56:  
1508 c9ab bd c8 46            jsr delay_nu
1509                         cc59:  
1510                         * 	 
1511                         * 	 *port2 = 0;
1512 c9ae fc 70 3d            ldd  port2
1513 c9b1 34 06               pshs d
1514 c9b3 cc 00 00            ldd  #0
1515 c9b6 e7 f1               stb  [,s++]
1516                         * 	  
1517                         * 	  delay_ms(1);
1518 c9b8 cc 00 01            ldd  #1
1519 c9bb 34 06               pshs d
1520 c9bd bd c8 53            jsr delay_ms
1521 c9c0 32 62               leas 2,s
1522                         *       
1523                         * 	  o= *port0; 
1524 c9c2 fc 70 41            ldd  port0
1525 c9c5 34 06               pshs d
1526 c9c7 e6 f1               ldb  [,s++]
1527 c9c9 1d                  sex
1528 c9ca f7 70 08            stb  o
1529                         * 	 for(n=0; n<6; n++) 
1530 c9cd cc 00 00            ldd  #0
1531 c9d0 f7 70 04            stb  n
1532                         cc62:  
1533 c9d3 f6 70 04            ldb  n
1534 c9d6 1d                  sex
1535 c9d7 34 06               pshs d
1536 c9d9 cc 00 06            ldd  #6
1537 c9dc 10 a3 e1            cmpd ,s++
1538 c9df 2e 05               bgt  *+7
1539 c9e1 cc 00 00            ldd  #0
1540 c9e4 20 03               bra  *+5
1541 c9e6 cc 00 01            ldd  #1
1542 c9e9 10 83 00 00         cmpd #0
1543 c9ed 10 27 00 6b         lbeq cc61
1544 c9f1 7e ca 04            jmp cc63
1545                         cc60:  
1546 c9f4 f6 70 04            ldb  n
1547 c9f7 1d                  sex
1548 c9f8 c3 00 01            addd #1
1549 c9fb f7 70 04            stb  n
1550 c9fe 83 00 01            subd #1
1551 ca01 7e c9 d3            jmp cc62
1552                         cc63:  
1553                         * 	 {
1554                         * 	   if((o&1)==0)
1555 ca04 f6 70 08            ldb  o
1556 ca07 1d                  sex
1557 ca08 34 06               pshs d
1558 ca0a cc 00 01            ldd  #1
1559 ca0d a4 e0               anda ,s+
1560 ca0f e4 e0               andb ,s+
1561 ca11 34 06               pshs d
1562 ca13 cc 00 00            ldd  #0
1563 ca16 10 a3 e1            cmpd ,s++
1564 ca19 27 05               beq  *+7
1565 ca1b cc 00 00            ldd  #0
1566 ca1e 20 03               bra  *+5
1567 ca20 cc 00 01            ldd  #1
1568 ca23 10 83 00 00         cmpd #0
1569 ca27 10 27 00 0a         lbeq cc64
1570                         * 		 {key=q;
1571 ca2b f6 70 07            ldb  q
1572 ca2e 1d                  sex
1573 ca2f f7 70 09            stb  key
1574                         *       
1575                         * 	
1576                         * 		 }
1577                         * 	   
1578                         * 	   else q++;
1579 ca32 7e ca 42            jmp cc65
1580                         cc64:  
1581 ca35 f6 70 07            ldb  q
1582 ca38 1d                  sex
1583 ca39 c3 00 01            addd #1
1584 ca3c f7 70 07            stb  q
1585 ca3f 83 00 01            subd #1
1586                         cc65:  
1587                         * 	   o = o >> 1;
1588 ca42 f6 70 08            ldb  o
1589 ca45 1d                  sex
1590 ca46 34 06               pshs d
1591 ca48 cc 00 01            ldd  #1
1592 ca4b 5a                  decb
1593 ca4c 2d 06               blt  *+8
1594 ca4e 64 e4               lsr  ,s
1595 ca50 66 61               ror  1,s
1596 ca52 20 f7               bra *-7
1597 ca54 35 06               puls d
1598 ca56 f7 70 08            stb  o
1599                         * 	 }
1600 ca59 7e c9 f4            jmp cc60
1601                         cc61:  
1602                         *  
1603                         * 	  k = k << 1;
1604 ca5c f6 70 05            ldb  k
1605 ca5f 1d                  sex
1606 ca60 34 06               pshs d
1607 ca62 cc 00 01            ldd  #1
1608 ca65 5a                  decb
1609 ca66 2d 06               blt  *+8
1610 ca68 68 61               asl  1,s
1611 ca6a 69 e4               rol  ,s
1612 ca6c 20 f7               bra  *-7
1613 ca6e 35 06               puls d
1614 ca70 f7 70 05            stb  k
1615                         *   }
1616 ca73 7e c8 db            jmp cc52
1617                         cc53:  
1618                         *    o = *port0;
1619 ca76 fc 70 41            ldd  port0
1620 ca79 34 06               pshs d
1621 ca7b e6 f1               ldb  [,s++]
1622 ca7d 1d                  sex
1623 ca7e f7 70 08            stb  o
1624                         *   
1625                         *   if((o&0x40)==0) key=0x24; 
1626 ca81 f6 70 08            ldb  o
1627 ca84 1d                  sex
1628 ca85 34 06               pshs d
1629 ca87 cc 00 40            ldd  #64
1630 ca8a a4 e0               anda ,s+
1631 ca8c e4 e0               andb ,s+
1632 ca8e 34 06               pshs d
1633 ca90 cc 00 00            ldd  #0
1634 ca93 10 a3 e1            cmpd ,s++
1635 ca96 27 05               beq  *+7
1636 ca98 cc 00 00            ldd  #0
1637 ca9b 20 03               bra  *+5
1638 ca9d cc 00 01            ldd  #1
1639 caa0 10 83 00 00         cmpd #0
1640 caa4 10 27 00 06         lbeq cc66
1641 caa8 cc 00 24            ldd  #36
1642 caab f7 70 09            stb  key
1643                         *      key_pressed=key;
1644                         cc66:  
1645 caae 31 e4               leay 0,s
1646 cab0 1f 20               tfr  y,d
1647 cab2 34 06               pshs d
1648 cab4 f6 70 09            ldb  key
1649 cab7 1d                  sex
1650 cab8 e7 f1               stb  [,s++]
1651                         * 	 return key_pressed;
1652 caba 31 e4               leay 0,s
1653 cabc 1f 20               tfr  y,d
1654 cabe 34 06               pshs d
1655 cac0 e6 f1               ldb  [,s++]
1656 cac2 1d                  sex
1657 cac3 32 61               leas 1,s
1658 cac5 39                  rts
1659                         *     
1660                         * }
1661                         * dot_address()
1662                         
1663                         * .global dot_addr
1664                         dot_addr: 
1665                         * {
1666                         *  buffer[0]=buffer[0]&~0x40;
1667 cac6 cc 70 35            ldd  #buffer
1668 cac9 34 06               pshs d
1669 cacb cc 00 00            ldd  #0
1670 cace e3 e1               addd ,s++
1671 cad0 34 06               pshs d
1672 cad2 cc 70 35            ldd  #buffer
1673 cad5 34 06               pshs d
1674 cad7 cc 00 00            ldd  #0
1675 cada e3 e1               addd ,s++
1676 cadc 34 06               pshs d
1677 cade e6 f1               ldb  [,s++]
1678 cae0 1d                  sex
1679 cae1 34 06               pshs d
1680 cae3 cc 00 40            ldd  #64
1681 cae6 43                  coma
1682 cae7 53                  comb
1683 cae8 a4 e0               anda ,s+
1684 caea e4 e0               andb ,s+
1685 caec e7 f1               stb  [,s++]
1686                         * 	buffer[1]=buffer[1]&~0x40;
1687 caee cc 70 35            ldd  #buffer
1688 caf1 34 06               pshs d
1689 caf3 cc 00 01            ldd  #1
1690 caf6 e3 e1               addd ,s++
1691 caf8 34 06               pshs d
1692 cafa cc 70 35            ldd  #buffer
1693 cafd 34 06               pshs d
1694 caff cc 00 01            ldd  #1
1695 cb02 e3 e1               addd ,s++
1696 cb04 34 06               pshs d
1697 cb06 e6 f1               ldb  [,s++]
1698 cb08 1d                  sex
1699 cb09 34 06               pshs d
1700 cb0b cc 00 40            ldd  #64
1701 cb0e 43                  coma
1702 cb0f 53                  comb
1703 cb10 a4 e0               anda ,s+
1704 cb12 e4 e0               andb ,s+
1705 cb14 e7 f1               stb  [,s++]
1706                         * 	
1707                         * 		buffer[2]=buffer[2]|0x40;
1708 cb16 cc 70 35            ldd  #buffer
1709 cb19 34 06               pshs d
1710 cb1b cc 00 02            ldd  #2
1711 cb1e e3 e1               addd ,s++
1712 cb20 34 06               pshs d
1713 cb22 cc 70 35            ldd  #buffer
1714 cb25 34 06               pshs d
1715 cb27 cc 00 02            ldd  #2
1716 cb2a e3 e1               addd ,s++
1717 cb2c 34 06               pshs d
1718 cb2e e6 f1               ldb  [,s++]
1719 cb30 1d                  sex
1720 cb31 34 06               pshs d
1721 cb33 cc 00 40            ldd  #64
1722 cb36 aa e0               ora  ,s+
1723 cb38 ea e0               orb  ,s+
1724 cb3a e7 f1               stb  [,s++]
1725                         * 			buffer[3]=buffer[3]|0x40;
1726 cb3c cc 70 35            ldd  #buffer
1727 cb3f 34 06               pshs d
1728 cb41 cc 00 03            ldd  #3
1729 cb44 e3 e1               addd ,s++
1730 cb46 34 06               pshs d
1731 cb48 cc 70 35            ldd  #buffer
1732 cb4b 34 06               pshs d
1733 cb4d cc 00 03            ldd  #3
1734 cb50 e3 e1               addd ,s++
1735 cb52 34 06               pshs d
1736 cb54 e6 f1               ldb  [,s++]
1737 cb56 1d                  sex
1738 cb57 34 06               pshs d
1739 cb59 cc 00 40            ldd  #64
1740 cb5c aa e0               ora  ,s+
1741 cb5e ea e0               orb  ,s+
1742 cb60 e7 f1               stb  [,s++]
1743                         * 				buffer[4]=buffer[4]|0x40;
1744 cb62 cc 70 35            ldd  #buffer
1745 cb65 34 06               pshs d
1746 cb67 cc 00 04            ldd  #4
1747 cb6a e3 e1               addd ,s++
1748 cb6c 34 06               pshs d
1749 cb6e cc 70 35            ldd  #buffer
1750 cb71 34 06               pshs d
1751 cb73 cc 00 04            ldd  #4
1752 cb76 e3 e1               addd ,s++
1753 cb78 34 06               pshs d
1754 cb7a e6 f1               ldb  [,s++]
1755 cb7c 1d                  sex
1756 cb7d 34 06               pshs d
1757 cb7f cc 00 40            ldd  #64
1758 cb82 aa e0               ora  ,s+
1759 cb84 ea e0               orb  ,s+
1760 cb86 e7 f1               stb  [,s++]
1761                         * 				buffer[5]=buffer[5]|0x40;
1762 cb88 cc 70 35            ldd  #buffer
1763 cb8b 34 06               pshs d
1764 cb8d cc 00 05            ldd  #5
1765 cb90 e3 e1               addd ,s++
1766 cb92 34 06               pshs d
1767 cb94 cc 70 35            ldd  #buffer
1768 cb97 34 06               pshs d
1769 cb99 cc 00 05            ldd  #5
1770 cb9c e3 e1               addd ,s++
1771 cb9e 34 06               pshs d
1772 cba0 e6 f1               ldb  [,s++]
1773 cba2 1d                  sex
1774 cba3 34 06               pshs d
1775 cba5 cc 00 40            ldd  #64
1776 cba8 aa e0               ora  ,s+
1777 cbaa ea e0               orb  ,s+
1778 cbac e7 f1               stb  [,s++]
1779                         * 			
1780                         * }
1781 cbae 39                  rts
1782                         * dot_data()
1783                         
1784                         * .global dot_data
1785                         dot_data: 
1786                         * {
1787                         *  	buffer[0]=buffer[0]|0x40;
1788 cbaf cc 70 35            ldd  #buffer
1789 cbb2 34 06               pshs d
1790 cbb4 cc 00 00            ldd  #0
1791 cbb7 e3 e1               addd ,s++
1792 cbb9 34 06               pshs d
1793 cbbb cc 70 35            ldd  #buffer
1794 cbbe 34 06               pshs d
1795 cbc0 cc 00 00            ldd  #0
1796 cbc3 e3 e1               addd ,s++
1797 cbc5 34 06               pshs d
1798 cbc7 e6 f1               ldb  [,s++]
1799 cbc9 1d                  sex
1800 cbca 34 06               pshs d
1801 cbcc cc 00 40            ldd  #64
1802 cbcf aa e0               ora  ,s+
1803 cbd1 ea e0               orb  ,s+
1804 cbd3 e7 f1               stb  [,s++]
1805                         * 	buffer[1]=buffer[1]|0x40;
1806 cbd5 cc 70 35            ldd  #buffer
1807 cbd8 34 06               pshs d
1808 cbda cc 00 01            ldd  #1
1809 cbdd e3 e1               addd ,s++
1810 cbdf 34 06               pshs d
1811 cbe1 cc 70 35            ldd  #buffer
1812 cbe4 34 06               pshs d
1813 cbe6 cc 00 01            ldd  #1
1814 cbe9 e3 e1               addd ,s++
1815 cbeb 34 06               pshs d
1816 cbed e6 f1               ldb  [,s++]
1817 cbef 1d                  sex
1818 cbf0 34 06               pshs d
1819 cbf2 cc 00 40            ldd  #64
1820 cbf5 aa e0               ora  ,s+
1821 cbf7 ea e0               orb  ,s+
1822 cbf9 e7 f1               stb  [,s++]
1823                         * 	buffer[2]=buffer[2]&~0x40;
1824 cbfb cc 70 35            ldd  #buffer
1825 cbfe 34 06               pshs d
1826 cc00 cc 00 02            ldd  #2
1827 cc03 e3 e1               addd ,s++
1828 cc05 34 06               pshs d
1829 cc07 cc 70 35            ldd  #buffer
1830 cc0a 34 06               pshs d
1831 cc0c cc 00 02            ldd  #2
1832 cc0f e3 e1               addd ,s++
1833 cc11 34 06               pshs d
1834 cc13 e6 f1               ldb  [,s++]
1835 cc15 1d                  sex
1836 cc16 34 06               pshs d
1837 cc18 cc 00 40            ldd  #64
1838 cc1b 43                  coma
1839 cc1c 53                  comb
1840 cc1d a4 e0               anda ,s+
1841 cc1f e4 e0               andb ,s+
1842 cc21 e7 f1               stb  [,s++]
1843                         * 			buffer[3]=buffer[3]&~0x40;
1844 cc23 cc 70 35            ldd  #buffer
1845 cc26 34 06               pshs d
1846 cc28 cc 00 03            ldd  #3
1847 cc2b e3 e1               addd ,s++
1848 cc2d 34 06               pshs d
1849 cc2f cc 70 35            ldd  #buffer
1850 cc32 34 06               pshs d
1851 cc34 cc 00 03            ldd  #3
1852 cc37 e3 e1               addd ,s++
1853 cc39 34 06               pshs d
1854 cc3b e6 f1               ldb  [,s++]
1855 cc3d 1d                  sex
1856 cc3e 34 06               pshs d
1857 cc40 cc 00 40            ldd  #64
1858 cc43 43                  coma
1859 cc44 53                  comb
1860 cc45 a4 e0               anda ,s+
1861 cc47 e4 e0               andb ,s+
1862 cc49 e7 f1               stb  [,s++]
1863                         * 				buffer[4]=buffer[4]&~0x40;
1864 cc4b cc 70 35            ldd  #buffer
1865 cc4e 34 06               pshs d
1866 cc50 cc 00 04            ldd  #4
1867 cc53 e3 e1               addd ,s++
1868 cc55 34 06               pshs d
1869 cc57 cc 70 35            ldd  #buffer
1870 cc5a 34 06               pshs d
1871 cc5c cc 00 04            ldd  #4
1872 cc5f e3 e1               addd ,s++
1873 cc61 34 06               pshs d
1874 cc63 e6 f1               ldb  [,s++]
1875 cc65 1d                  sex
1876 cc66 34 06               pshs d
1877 cc68 cc 00 40            ldd  #64
1878 cc6b 43                  coma
1879 cc6c 53                  comb
1880 cc6d a4 e0               anda ,s+
1881 cc6f e4 e0               andb ,s+
1882 cc71 e7 f1               stb  [,s++]
1883                         * 				buffer[5]=buffer[5]&~0x40;
1884 cc73 cc 70 35            ldd  #buffer
1885 cc76 34 06               pshs d
1886 cc78 cc 00 05            ldd  #5
1887 cc7b e3 e1               addd ,s++
1888 cc7d 34 06               pshs d
1889 cc7f cc 70 35            ldd  #buffer
1890 cc82 34 06               pshs d
1891 cc84 cc 00 05            ldd  #5
1892 cc87 e3 e1               addd ,s++
1893 cc89 34 06               pshs d
1894 cc8b e6 f1               ldb  [,s++]
1895 cc8d 1d                  sex
1896 cc8e 34 06               pshs d
1897 cc90 cc 00 40            ldd  #64
1898 cc93 43                  coma
1899 cc94 53                  comb
1900 cc95 a4 e0               anda ,s+
1901 cc97 e4 e0               andb ,s+
1902 cc99 e7 f1               stb  [,s++]
1903                         * 				
1904                         * }
1905 cc9b 39                  rts
1906                         * hex4(h)
1907                         
1908                         * .global hex4
1909                         hex4: 
1910                         * int h;
1911                         * {
1912                         *     temp16 = h;
1913 cc9c 31 62               leay 2,s
1914 cc9e 1f 20               tfr  y,d
1915 cca0 34 06               pshs d
1916 cca2 ec f1               ldd  [,s++]
1917 cca4 fd 70 14            std  temp16
1918                         * 	buffer[2]= convert[temp16&0xf];
1919 cca7 cc 70 35            ldd  #buffer
1920 ccaa 34 06               pshs d
1921 ccac cc 00 02            ldd  #2
1922 ccaf e3 e1               addd ,s++
1923 ccb1 34 06               pshs d
1924 ccb3 cc c1 0d            ldd  #convert
1925 ccb6 34 06               pshs d
1926 ccb8 fc 70 14            ldd  temp16
1927 ccbb 34 06               pshs d
1928 ccbd cc 00 0f            ldd  #15
1929 ccc0 a4 e0               anda ,s+
1930 ccc2 e4 e0               andb ,s+
1931 ccc4 e3 e1               addd ,s++
1932 ccc6 34 06               pshs d
1933 ccc8 e6 f1               ldb  [,s++]
1934 ccca 1d                  sex
1935 cccb e7 f1               stb  [,s++]
1936                         * 	temp16>>=4;
1937 cccd cc 70 14            ldd  #temp16
1938 ccd0 34 06               pshs d
1939 ccd2 cc 00 04            ldd  #4
1940 ccd5 ae f4               ldx  [,s]
1941 ccd7 34 10               pshs x
1942 ccd9 5a                  decb
1943 ccda 2d 06               blt  *+8
1944 ccdc 64 e4               lsr  ,s
1945 ccde 66 61               ror  1,s
1946 cce0 20 f7               bra *-7
1947 cce2 35 06               puls d
1948 cce4 fd 70 14            std  temp16
1949                         * 	buffer[3]= convert[temp16&0xf];
1950 cce7 cc 70 35            ldd  #buffer
1951 ccea 34 06               pshs d
1952 ccec cc 00 03            ldd  #3
1953 ccef e3 e1               addd ,s++
1954 ccf1 34 06               pshs d
1955 ccf3 cc c1 0d            ldd  #convert
1956 ccf6 34 06               pshs d
1957 ccf8 fc 70 14            ldd  temp16
1958 ccfb 34 06               pshs d
1959 ccfd cc 00 0f            ldd  #15
1960 cd00 a4 e0               anda ,s+
1961 cd02 e4 e0               andb ,s+
1962 cd04 e3 e1               addd ,s++
1963 cd06 34 06               pshs d
1964 cd08 e6 f1               ldb  [,s++]
1965 cd0a 1d                  sex
1966 cd0b e7 f1               stb  [,s++]
1967                         * 	temp16>>=4;
1968 cd0d cc 70 14            ldd  #temp16
1969 cd10 34 06               pshs d
1970 cd12 cc 00 04            ldd  #4
1971 cd15 ae f4               ldx  [,s]
1972 cd17 34 10               pshs x
1973 cd19 5a                  decb
1974 cd1a 2d 06               blt  *+8
1975 cd1c 64 e4               lsr  ,s
1976 cd1e 66 61               ror  1,s
1977 cd20 20 f7               bra *-7
1978 cd22 35 06               puls d
1979 cd24 fd 70 14            std  temp16
1980                         * 	buffer[4]=convert[temp16&0xf];
1981 cd27 cc 70 35            ldd  #buffer
1982 cd2a 34 06               pshs d
1983 cd2c cc 00 04            ldd  #4
1984 cd2f e3 e1               addd ,s++
1985 cd31 34 06               pshs d
1986 cd33 cc c1 0d            ldd  #convert
1987 cd36 34 06               pshs d
1988 cd38 fc 70 14            ldd  temp16
1989 cd3b 34 06               pshs d
1990 cd3d cc 00 0f            ldd  #15
1991 cd40 a4 e0               anda ,s+
1992 cd42 e4 e0               andb ,s+
1993 cd44 e3 e1               addd ,s++
1994 cd46 34 06               pshs d
1995 cd48 e6 f1               ldb  [,s++]
1996 cd4a 1d                  sex
1997 cd4b e7 f1               stb  [,s++]
1998                         * 	temp16>>=4;
1999 cd4d cc 70 14            ldd  #temp16
2000 cd50 34 06               pshs d
2001 cd52 cc 00 04            ldd  #4
2002 cd55 ae f4               ldx  [,s]
2003 cd57 34 10               pshs x
2004 cd59 5a                  decb
2005 cd5a 2d 06               blt  *+8
2006 cd5c 64 e4               lsr  ,s
2007 cd5e 66 61               ror  1,s
2008 cd60 20 f7               bra *-7
2009 cd62 35 06               puls d
2010 cd64 fd 70 14            std  temp16
2011                         * 	buffer[5]=convert[temp16&0xf];
2012 cd67 cc 70 35            ldd  #buffer
2013 cd6a 34 06               pshs d
2014 cd6c cc 00 05            ldd  #5
2015 cd6f e3 e1               addd ,s++
2016 cd71 34 06               pshs d
2017 cd73 cc c1 0d            ldd  #convert
2018 cd76 34 06               pshs d
2019 cd78 fc 70 14            ldd  temp16
2020 cd7b 34 06               pshs d
2021 cd7d cc 00 0f            ldd  #15
2022 cd80 a4 e0               anda ,s+
2023 cd82 e4 e0               andb ,s+
2024 cd84 e3 e1               addd ,s++
2025 cd86 34 06               pshs d
2026 cd88 e6 f1               ldb  [,s++]
2027 cd8a 1d                  sex
2028 cd8b e7 f1               stb  [,s++]
2029                         * }
2030 cd8d 32 66               leas 6,s
2031 cd8f 39                  rts
2032                         * address_display()
2033                         
2034                         * .global address_
2035                         address_: 
2036                         * {
2037                         * 	temp16 = PC;
2038 cd90 fc 70 16            ldd  PC
2039 cd93 fd 70 14            std  temp16
2040                         * 	hex4(temp16);
2041 cd96 fc 70 14            ldd  temp16
2042 cd99 34 06               pshs d
2043 cd9b bd cc 9c            jsr hex4
2044 cd9e 32 62               leas 2,s
2045                         * 	
2046                         * }
2047 cda0 39                  rts
2048                         * data_display()
2049                         
2050                         * .global data_dis
2051                         data_dis: 
2052                         * {
2053                         *     dptr =PC;
2054 cda1 fc 70 16            ldd  PC
2055 cda4 fd 70 43            std  dptr
2056                         * 	n = *dptr;
2057 cda7 fc 70 43            ldd  dptr
2058 cdaa 34 06               pshs d
2059 cdac e6 f1               ldb  [,s++]
2060 cdae 1d                  sex
2061 cdaf f7 70 04            stb  n
2062                         * 	buffer[0]= convert[n&0xf];
2063 cdb2 cc 70 35            ldd  #buffer
2064 cdb5 34 06               pshs d
2065 cdb7 cc 00 00            ldd  #0
2066 cdba e3 e1               addd ,s++
2067 cdbc 34 06               pshs d
2068 cdbe cc c1 0d            ldd  #convert
2069 cdc1 34 06               pshs d
2070 cdc3 f6 70 04            ldb  n
2071 cdc6 1d                  sex
2072 cdc7 34 06               pshs d
2073 cdc9 cc 00 0f            ldd  #15
2074 cdcc a4 e0               anda ,s+
2075 cdce e4 e0               andb ,s+
2076 cdd0 e3 e1               addd ,s++
2077 cdd2 34 06               pshs d
2078 cdd4 e6 f1               ldb  [,s++]
2079 cdd6 1d                  sex
2080 cdd7 e7 f1               stb  [,s++]
2081                         * 	n = n>>4;
2082 cdd9 f6 70 04            ldb  n
2083 cddc 1d                  sex
2084 cddd 34 06               pshs d
2085 cddf cc 00 04            ldd  #4
2086 cde2 5a                  decb
2087 cde3 2d 06               blt  *+8
2088 cde5 64 e4               lsr  ,s
2089 cde7 66 61               ror  1,s
2090 cde9 20 f7               bra *-7
2091 cdeb 35 06               puls d
2092 cded f7 70 04            stb  n
2093                         * 	buffer[1]=convert[n&0xf];
2094 cdf0 cc 70 35            ldd  #buffer
2095 cdf3 34 06               pshs d
2096 cdf5 cc 00 01            ldd  #1
2097 cdf8 e3 e1               addd ,s++
2098 cdfa 34 06               pshs d
2099 cdfc cc c1 0d            ldd  #convert
2100 cdff 34 06               pshs d
2101 ce01 f6 70 04            ldb  n
2102 ce04 1d                  sex
2103 ce05 34 06               pshs d
2104 ce07 cc 00 0f            ldd  #15
2105 ce0a a4 e0               anda ,s+
2106 ce0c e4 e0               andb ,s+
2107 ce0e e3 e1               addd ,s++
2108 ce10 34 06               pshs d
2109 ce12 e6 f1               ldb  [,s++]
2110 ce14 1d                  sex
2111 ce15 e7 f1               stb  [,s++]
2112                         * 	dot_data();
2113 ce17 bd cb af            jsr dot_data
2114                         * }
2115 ce1a 39                  rts
2116                         * read_memory()
2117                         
2118                         * .global read_mem
2119                         read_mem: 
2120                         * {
2121                         *     address_display();
2122 ce1b bd cd 90            jsr address_
2123                         * 	data_display();
2124 ce1e bd cd a1            jsr data_dis
2125                         * }
2126 ce21 39                  rts
2127                         * key_address()
2128                         
2129                         * .global key_addr
2130                         key_addr: 
2131                         * {
2132                         * 	
2133                         * 	state = 1;
2134 ce22 cc 00 01            ldd  #1
2135 ce25 f7 70 24            stb  state
2136                         * 	
2137                         *   	read_memory();
2138 ce28 bd ce 1b            jsr read_mem
2139                         *     dot_address();
2140 ce2b bd ca c6            jsr dot_addr
2141                         * 	hit=0;
2142 ce2e cc 00 00            ldd  #0
2143 ce31 f7 70 0b            stb  hit
2144                         *  }
2145 ce34 39                  rts
2146                         * key_data()
2147                         
2148                         * .global key_data
2149                         key_data: 
2150                         * {
2151                         * 	
2152                         * 	read_memory();
2153 ce35 bd ce 1b            jsr read_mem
2154                         *     dot_data();
2155 ce38 bd cb af            jsr dot_data
2156                         *     hit=0;
2157 ce3b cc 00 00            ldd  #0
2158 ce3e f7 70 0b            stb  hit
2159                         * 	state=2;
2160 ce41 cc 00 02            ldd  #2
2161 ce44 f7 70 24            stb  state
2162                         * }
2163 ce47 39                  rts
2164                         * key_plus()
2165                         
2166                         * .global key_plus
2167                         key_plus: 
2168                         * {
2169                         *       
2170                         *      if(state==1 || state==2)
2171 ce48 f6 70 24            ldb  state
2172 ce4b 1d                  sex
2173 ce4c 34 06               pshs d
2174 ce4e cc 00 01            ldd  #1
2175 ce51 10 a3 e1            cmpd ,s++
2176 ce54 27 05               beq  *+7
2177 ce56 cc 00 00            ldd  #0
2178 ce59 20 03               bra  *+5
2179 ce5b cc 00 01            ldd  #1
2180 ce5e 10 83 00 00         cmpd #0
2181 ce62 10 26 00 24         lbne cc68
2182 ce66 f6 70 24            ldb  state
2183 ce69 1d                  sex
2184 ce6a 34 06               pshs d
2185 ce6c cc 00 02            ldd  #2
2186 ce6f 10 a3 e1            cmpd ,s++
2187 ce72 27 05               beq  *+7
2188 ce74 cc 00 00            ldd  #0
2189 ce77 20 03               bra  *+5
2190 ce79 cc 00 01            ldd  #1
2191 ce7c 10 83 00 00         cmpd #0
2192 ce80 10 26 00 06         lbne cc68
2193 ce84 cc 00 00            ldd  #0
2194 ce87 7e ce 8d            jmp cc69
2195                         cc68:  
2196 ce8a cc 00 01            ldd  #1
2197                         cc69:  
2198 ce8d 10 83 00 00         cmpd #0
2199 ce91 10 27 00 12         lbeq cc67
2200                         *      {
2201                         *        PC++;
2202 ce95 fc 70 16            ldd  PC
2203 ce98 c3 00 01            addd #1
2204 ce9b fd 70 16            std  PC
2205 ce9e 83 00 01            subd #1
2206                         *        read_memory();
2207 cea1 bd ce 1b            jsr read_mem
2208                         * 	   key_data();
2209 cea4 bd ce 35            jsr key_data
2210                         * 	  }
2211                         * 	  if(state==4)
2212                         cc67:  
2213 cea7 f6 70 24            ldb  state
2214 ceaa 1d                  sex
2215 ceab 34 06               pshs d
2216 cead cc 00 04            ldd  #4
2217 ceb0 10 a3 e1            cmpd ,s++
2218 ceb3 27 05               beq  *+7
2219 ceb5 cc 00 00            ldd  #0
2220 ceb8 20 03               bra  *+5
2221 ceba cc 00 01            ldd  #1
2222 cebd 10 83 00 00         cmpd #0
2223 cec1 10 27 00 12         lbeq cc70
2224                         * 	{
2225                         * 	   start=num;
2226 cec5 fc 70 1a            ldd  num
2227 cec8 fd 70 1c            std  start
2228                         *        hit =0;
2229 cecb cc 00 00            ldd  #0
2230 cece f7 70 0b            stb  hit
2231                         * 	   positive=1;
2232 ced1 cc 00 01            ldd  #1
2233 ced4 f7 70 0c            stb  positive
2234                         * 	}
2235                         * 	if(state==5)
2236                         cc70:  
2237 ced7 f6 70 24            ldb  state
2238 ceda 1d                  sex
2239 cedb 34 06               pshs d
2240 cedd cc 00 05            ldd  #5
2241 cee0 10 a3 e1            cmpd ,s++
2242 cee3 27 05               beq  *+7
2243 cee5 cc 00 00            ldd  #0
2244 cee8 20 03               bra  *+5
2245 ceea cc 00 01            ldd  #1
2246 ceed 10 83 00 00         cmpd #0
2247 cef1 10 27 00 24         lbeq cc71
2248                         * 	{
2249                         *      state=6;
2250 cef5 cc 00 06            ldd  #6
2251 cef8 f7 70 24            stb  state
2252                         * 	 start = num;
2253 cefb fc 70 1a            ldd  num
2254 cefe fd 70 1c            std  start
2255                         * 	 hit=0;
2256 cf01 cc 00 00            ldd  #0
2257 cf04 f7 70 0b            stb  hit
2258                         * 	 buffer[0]=0x8f;  /* end cursor */
2259 cf07 cc 70 35            ldd  #buffer
2260 cf0a 34 06               pshs d
2261 cf0c cc 00 00            ldd  #0
2262 cf0f e3 e1               addd ,s++
2263 cf11 34 06               pshs d
2264 cf13 cc 00 8f            ldd  #143
2265 cf16 e7 f1               stb  [,s++]
2266                         *      return;
2267 cf18 39                  rts
2268                         * 	
2269                         * 	}
2270                         * 	
2271                         *     if(state==6)
2272                         cc71:  
2273 cf19 f6 70 24            ldb  state
2274 cf1c 1d                  sex
2275 cf1d 34 06               pshs d
2276 cf1f cc 00 06            ldd  #6
2277 cf22 10 a3 e1            cmpd ,s++
2278 cf25 27 05               beq  *+7
2279 cf27 cc 00 00            ldd  #0
2280 cf2a 20 03               bra  *+5
2281 cf2c cc 00 01            ldd  #1
2282 cf2f 10 83 00 00         cmpd #0
2283 cf33 10 27 00 43         lbeq cc72
2284                         * 	{
2285                         *      state=7;
2286 cf37 cc 00 07            ldd  #7
2287 cf3a f7 70 24            stb  state
2288                         * 	 end = num;
2289 cf3d fc 70 1a            ldd  num
2290 cf40 fd 70 1e            std  end
2291                         * 	 hit=0;
2292 cf43 cc 00 00            ldd  #0
2293 cf46 f7 70 0b            stb  hit
2294                         * 	 buffer[0]=0xb3;  /* destination cursor */
2295 cf49 cc 70 35            ldd  #buffer
2296 cf4c 34 06               pshs d
2297 cf4e cc 00 00            ldd  #0
2298 cf51 e3 e1               addd ,s++
2299 cf53 34 06               pshs d
2300 cf55 cc 00 b3            ldd  #179
2301 cf58 e7 f1               stb  [,s++]
2302                         * 	 
2303                         * 	 if(end <= start) print_error();
2304 cf5a fc 70 1e            ldd  end
2305 cf5d 34 06               pshs d
2306 cf5f fc 70 1c            ldd  start
2307 cf62 10 a3 e1            cmpd ,s++
2308 cf65 2c 05               bge  *+7
2309 cf67 cc 00 00            ldd  #0
2310 cf6a 20 03               bra  *+5
2311 cf6c cc 00 01            ldd  #1
2312 cf6f 10 83 00 00         cmpd #0
2313 cf73 10 27 00 03         lbeq cc73
2314 cf77 bd d0 d8            jsr print_er
2315                         * 	}
2316                         cc73:  
2317                         * 	
2318                         * }
2319                         cc72:  
2320 cf7a 39                  rts
2321                         * key_minus()
2322                         
2323                         * .global key_minu
2324                         key_minu: 
2325                         * {
2326                         *    if(state==1 | state ==2)
2327 cf7b f6 70 24            ldb  state
2328 cf7e 1d                  sex
2329 cf7f 34 06               pshs d
2330 cf81 cc 00 01            ldd  #1
2331 cf84 10 a3 e1            cmpd ,s++
2332 cf87 27 05               beq  *+7
2333 cf89 cc 00 00            ldd  #0
2334 cf8c 20 03               bra  *+5
2335 cf8e cc 00 01            ldd  #1
2336 cf91 34 06               pshs d
2337 cf93 f6 70 24            ldb  state
2338 cf96 1d                  sex
2339 cf97 34 06               pshs d
2340 cf99 cc 00 02            ldd  #2
2341 cf9c 10 a3 e1            cmpd ,s++
2342 cf9f 27 05               beq  *+7
2343 cfa1 cc 00 00            ldd  #0
2344 cfa4 20 03               bra  *+5
2345 cfa6 cc 00 01            ldd  #1
2346 cfa9 aa e0               ora  ,s+
2347 cfab ea e0               orb  ,s+
2348 cfad 10 83 00 00         cmpd #0
2349 cfb1 10 27 00 12         lbeq cc74
2350                         *    {
2351                         *     PC--;
2352 cfb5 fc 70 16            ldd  PC
2353 cfb8 83 00 01            subd #1
2354 cfbb fd 70 16            std  PC
2355 cfbe c3 00 01            addd #1
2356                         *     read_memory();
2357 cfc1 bd ce 1b            jsr read_mem
2358                         * 	key_data();
2359 cfc4 bd ce 35            jsr key_data
2360                         *    }
2361                         *    
2362                         *    if(state==4)
2363                         cc74:  
2364 cfc7 f6 70 24            ldb  state
2365 cfca 1d                  sex
2366 cfcb 34 06               pshs d
2367 cfcd cc 00 04            ldd  #4
2368 cfd0 10 a3 e1            cmpd ,s++
2369 cfd3 27 05               beq  *+7
2370 cfd5 cc 00 00            ldd  #0
2371 cfd8 20 03               bra  *+5
2372 cfda cc 00 01            ldd  #1
2373 cfdd 10 83 00 00         cmpd #0
2374 cfe1 10 27 00 12         lbeq cc75
2375                         * 	{
2376                         * 	   start=num;
2377 cfe5 fc 70 1a            ldd  num
2378 cfe8 fd 70 1c            std  start
2379                         *        hit =0;
2380 cfeb cc 00 00            ldd  #0
2381 cfee f7 70 0b            stb  hit
2382                         *        positive=0;
2383 cff1 cc 00 00            ldd  #0
2384 cff4 f7 70 0c            stb  positive
2385                         * 	}
2386                         * }
2387                         cc75:  
2388 cff7 39                  rts
2389                         * data_hex()
2390                         
2391                         * .global data_hex
2392                         data_hex: 
2393                         * {
2394                         *    
2395                         *    dptr = PC;
2396 cff8 fc 70 16            ldd  PC
2397 cffb fd 70 43            std  dptr
2398                         * 	x = *dptr;
2399 cffe fc 70 43            ldd  dptr
2400 d001 34 06               pshs d
2401 d003 e6 f1               ldb  [,s++]
2402 d005 1d                  sex
2403 d006 f7 70 0a            stb  x
2404                         * 	if(hit==0) x=0;
2405 d009 f6 70 0b            ldb  hit
2406 d00c 1d                  sex
2407 d00d 34 06               pshs d
2408 d00f cc 00 00            ldd  #0
2409 d012 10 a3 e1            cmpd ,s++
2410 d015 27 05               beq  *+7
2411 d017 cc 00 00            ldd  #0
2412 d01a 20 03               bra  *+5
2413 d01c cc 00 01            ldd  #1
2414 d01f 10 83 00 00         cmpd #0
2415 d023 10 27 00 06         lbeq cc76
2416 d027 cc 00 00            ldd  #0
2417 d02a f7 70 0a            stb  x
2418                         * 	{
2419                         cc76:  
2420                         * 	 hit =1;
2421 d02d cc 00 01            ldd  #1
2422 d030 f7 70 0b            stb  hit
2423                         * 	 x = x << 4;
2424 d033 f6 70 0a            ldb  x
2425 d036 1d                  sex
2426 d037 34 06               pshs d
2427 d039 cc 00 04            ldd  #4
2428 d03c 5a                  decb
2429 d03d 2d 06               blt  *+8
2430 d03f 68 61               asl  1,s
2431 d041 69 e4               rol  ,s
2432 d043 20 f7               bra  *-7
2433 d045 35 06               puls d
2434 d047 f7 70 0a            stb  x
2435                         * 	 x = x|key;
2436 d04a f6 70 0a            ldb  x
2437 d04d 1d                  sex
2438 d04e 34 06               pshs d
2439 d050 f6 70 09            ldb  key
2440 d053 1d                  sex
2441 d054 aa e0               ora  ,s+
2442 d056 ea e0               orb  ,s+
2443 d058 f7 70 0a            stb  x
2444                         * 	 *dptr = x;
2445 d05b fc 70 43            ldd  dptr
2446 d05e 34 06               pshs d
2447 d060 f6 70 0a            ldb  x
2448 d063 1d                  sex
2449 d064 e7 f1               stb  [,s++]
2450                         * 	 read_memory();
2451 d066 bd ce 1b            jsr read_mem
2452                         *      dot_data();
2453 d069 bd cb af            jsr dot_data
2454                         * 	}
2455                         * }
2456 d06c 39                  rts
2457                         * key_PC()
2458                         
2459                         * .global key_PC
2460                         key_PC: 
2461                         * {
2462                         *      PC=save_PC;
2463 d06d fc 70 18            ldd  save_PC
2464 d070 fd 70 16            std  PC
2465                         * 	 key_data();
2466 d073 bd ce 35            jsr key_data
2467                         * }
2468 d076 39                  rts
2469                         * hex_address()
2470                         
2471                         * .global hex_addr
2472                         hex_addr: 
2473                         * {
2474                         *     if(hit==0) PC=0;
2475 d077 f6 70 0b            ldb  hit
2476 d07a 1d                  sex
2477 d07b 34 06               pshs d
2478 d07d cc 00 00            ldd  #0
2479 d080 10 a3 e1            cmpd ,s++
2480 d083 27 05               beq  *+7
2481 d085 cc 00 00            ldd  #0
2482 d088 20 03               bra  *+5
2483 d08a cc 00 01            ldd  #1
2484 d08d 10 83 00 00         cmpd #0
2485 d091 10 27 00 06         lbeq cc77
2486 d095 cc 00 00            ldd  #0
2487 d098 fd 70 16            std  PC
2488                         * 	{
2489                         cc77:  
2490                         * 	   hit=1;
2491 d09b cc 00 01            ldd  #1
2492 d09e f7 70 0b            stb  hit
2493                         * 	   PC<<=4;
2494 d0a1 cc 70 16            ldd  #PC
2495 d0a4 34 06               pshs d
2496 d0a6 cc 00 04            ldd  #4
2497 d0a9 ae f4               ldx  [,s]
2498 d0ab 34 10               pshs x
2499 d0ad 5a                  decb
2500 d0ae 2d 06               blt  *+8
2501 d0b0 68 61               asl  1,s
2502 d0b2 69 e4               rol  ,s
2503 d0b4 20 f7               bra  *-7
2504 d0b6 35 06               puls d
2505 d0b8 fd 70 16            std  PC
2506                         * 	   PC |= key;
2507 d0bb cc 70 16            ldd  #PC
2508 d0be 34 06               pshs d
2509 d0c0 f6 70 09            ldb  key
2510 d0c3 1d                  sex
2511 d0c4 ae f4               ldx  [,s]
2512 d0c6 34 10               pshs x
2513 d0c8 aa e0               ora  ,s+
2514 d0ca ea e0               orb  ,s+
2515 d0cc fd 70 16            std  PC
2516                         * 	   read_memory();
2517 d0cf bd ce 1b            jsr read_mem
2518                         * 	   dot_address();
2519 d0d2 bd ca c6            jsr dot_addr
2520                         * 	}
2521 d0d5 32 64               leas 4,s
2522                         * }
2523 d0d7 39                  rts
2524                         * print_error()
2525                         
2526                         * .global print_er
2527                         print_er: 
2528                         * {
2529                         *   
2530                         *   buffer[5]= 0x8f;
2531 d0d8 cc 70 35            ldd  #buffer
2532 d0db 34 06               pshs d
2533 d0dd cc 00 05            ldd  #5
2534 d0e0 e3 e1               addd ,s++
2535 d0e2 34 06               pshs d
2536 d0e4 cc 00 8f            ldd  #143
2537 d0e7 e7 f1               stb  [,s++]
2538                         *   buffer[4]= 3;
2539 d0e9 cc 70 35            ldd  #buffer
2540 d0ec 34 06               pshs d
2541 d0ee cc 00 04            ldd  #4
2542 d0f1 e3 e1               addd ,s++
2543 d0f3 34 06               pshs d
2544 d0f5 cc 00 03            ldd  #3
2545 d0f8 e7 f1               stb  [,s++]
2546                         *   buffer[3]=3;
2547 d0fa cc 70 35            ldd  #buffer
2548 d0fd 34 06               pshs d
2549 d0ff cc 00 03            ldd  #3
2550 d102 e3 e1               addd ,s++
2551 d104 34 06               pshs d
2552 d106 cc 00 03            ldd  #3
2553 d109 e7 f1               stb  [,s++]
2554                         *   buffer[2]=0;
2555 d10b cc 70 35            ldd  #buffer
2556 d10e 34 06               pshs d
2557 d110 cc 00 02            ldd  #2
2558 d113 e3 e1               addd ,s++
2559 d115 34 06               pshs d
2560 d117 cc 00 00            ldd  #0
2561 d11a e7 f1               stb  [,s++]
2562                         *   buffer[1]=0;
2563 d11c cc 70 35            ldd  #buffer
2564 d11f 34 06               pshs d
2565 d121 cc 00 01            ldd  #1
2566 d124 e3 e1               addd ,s++
2567 d126 34 06               pshs d
2568 d128 cc 00 00            ldd  #0
2569 d12b e7 f1               stb  [,s++]
2570                         *   buffer[0]=0;
2571 d12d cc 70 35            ldd  #buffer
2572 d130 34 06               pshs d
2573 d132 cc 00 00            ldd  #0
2574 d135 e3 e1               addd ,s++
2575 d137 34 06               pshs d
2576 d139 cc 00 00            ldd  #0
2577 d13c e7 f1               stb  [,s++]
2578                         *   state=0;
2579 d13e cc 00 00            ldd  #0
2580 d141 f7 70 24            stb  state
2581                         * }
2582 d144 39                  rts
2583                         * key_go(){
2584                         
2585                         * .global key_go
2586                         key_go: 
2587                         * 	if(state==1 || state==2)
2588 d145 f6 70 24            ldb  state
2589 d148 1d                  sex
2590 d149 34 06               pshs d
2591 d14b cc 00 01            ldd  #1
2592 d14e 10 a3 e1            cmpd ,s++
2593 d151 27 05               beq  *+7
2594 d153 cc 00 00            ldd  #0
2595 d156 20 03               bra  *+5
2596 d158 cc 00 01            ldd  #1
2597 d15b 10 83 00 00         cmpd #0
2598 d15f 10 26 00 24         lbne cc79
2599 d163 f6 70 24            ldb  state
2600 d166 1d                  sex
2601 d167 34 06               pshs d
2602 d169 cc 00 02            ldd  #2
2603 d16c 10 a3 e1            cmpd ,s++
2604 d16f 27 05               beq  *+7
2605 d171 cc 00 00            ldd  #0
2606 d174 20 03               bra  *+5
2607 d176 cc 00 01            ldd  #1
2608 d179 10 83 00 00         cmpd #0
2609 d17d 10 26 00 06         lbne cc79
2610 d181 cc 00 00            ldd  #0
2611 d184 7e d1 8a            jmp cc80
2612                         cc79:  
2613 d187 cc 00 01            ldd  #1
2614                         cc80:  
2615 d18a 10 83 00 00         cmpd #0
2616 d18e 10 27 00 24         lbeq cc78
2617                         * 	{
2618                         * #asm
2619 d192 10 ff 70 2b           STS SAVE_SP   
2620 d196 fe 70 27              LDU USER_U   
2621 d199 fc 70 16              LDD PC
2622 d19c 34 06                 PSHS D
2623 d19e b6 70 31              LDA USER_P
2624 d1a1 1f 8a                 TFR A,CC
2625 d1a3 b6 70 32              LDA USER_DP
2626 d1a6 1f 8b                 TFR A,DP
2627 d1a8 be 70 29              LDX USER_X
2628 d1ab 10 be 70 2d           LDY USER_Y
2629 d1af f6 70 30              LDB USER_B
2630 d1b2 b6 70 2f              LDA USER_A
2631 d1b5 39                    RTS
2632                         
2633                         * #endasm
2634                         * 	}
2635                         *    
2636                         *    if(state==4)
2637                         cc78:  
2638 d1b6 f6 70 24            ldb  state
2639 d1b9 1d                  sex
2640 d1ba 34 06               pshs d
2641 d1bc cc 00 04            ldd  #4
2642 d1bf 10 a3 e1            cmpd ,s++
2643 d1c2 27 05               beq  *+7
2644 d1c4 cc 00 00            ldd  #0
2645 d1c7 20 03               bra  *+5
2646 d1c9 cc 00 01            ldd  #1
2647 d1cc 10 83 00 00         cmpd #0
2648 d1d0 10 27 00 57         lbeq cc81
2649                         * 	{
2650                         *       
2651                         * 	   desti = num;
2652 d1d4 fc 70 1a            ldd  num
2653 d1d7 fd 70 20            std  desti
2654                         * 	  
2655                         * 	  if(positive==0) start= start-desti;
2656 d1da f6 70 0c            ldb  positive
2657 d1dd 1d                  sex
2658 d1de 34 06               pshs d
2659 d1e0 cc 00 00            ldd  #0
2660 d1e3 10 a3 e1            cmpd ,s++
2661 d1e6 27 05               beq  *+7
2662 d1e8 cc 00 00            ldd  #0
2663 d1eb 20 03               bra  *+5
2664 d1ed cc 00 01            ldd  #1
2665 d1f0 10 83 00 00         cmpd #0
2666 d1f4 10 27 00 16         lbeq cc82
2667 d1f8 fc 70 1c            ldd  start
2668 d1fb 34 06               pshs d
2669 d1fd fc 70 20            ldd  desti
2670 d200 35 10               puls x
2671 d202 34 06               pshs d
2672 d204 1f 10               tfr  x,d
2673 d206 a3 e1               subd ,s++
2674 d208 fd 70 1c            std  start
2675                         * 	  	  else start = start+desti;
2676 d20b 7e d2 1b            jmp cc83
2677                         cc82:  
2678 d20e fc 70 1c            ldd  start
2679 d211 34 06               pshs d
2680 d213 fc 70 20            ldd  desti
2681 d216 e3 e1               addd ,s++
2682 d218 fd 70 1c            std  start
2683                         cc83:  
2684                         * 	   hex4(start);
2685 d21b fc 70 1c            ldd  start
2686 d21e 34 06               pshs d
2687 d220 bd cc 9c            jsr hex4
2688 d223 32 62               leas 2,s
2689                         * 	   hit=0;
2690 d225 cc 00 00            ldd  #0
2691 d228 f7 70 0b            stb  hit
2692                         * 	}
2693                         * 	if(state==7)
2694                         cc81:  
2695 d22b f6 70 24            ldb  state
2696 d22e 1d                  sex
2697 d22f 34 06               pshs d
2698 d231 cc 00 07            ldd  #7
2699 d234 10 a3 e1            cmpd ,s++
2700 d237 27 05               beq  *+7
2701 d239 cc 00 00            ldd  #0
2702 d23c 20 03               bra  *+5
2703 d23e cc 00 01            ldd  #1
2704 d241 10 83 00 00         cmpd #0
2705 d245 10 27 00 8c         lbeq cc84
2706                         * 	{
2707                         * 		desti = num;
2708 d249 fc 70 1a            ldd  num
2709 d24c fd 70 20            std  desti
2710                         * 		temp = end-start;
2711 d24f fc 70 1e            ldd  end
2712 d252 34 06               pshs d
2713 d254 fc 70 1c            ldd  start
2714 d257 35 10               puls x
2715 d259 34 06               pshs d
2716 d25b 1f 10               tfr  x,d
2717 d25d a3 e1               subd ,s++
2718 d25f fd 70 12            std  temp
2719                         * 		dptr = start;
2720 d262 fc 70 1c            ldd  start
2721 d265 fd 70 43            std  dptr
2722                         * 		dptr2 = desti;
2723 d268 fc 70 20            ldd  desti
2724 d26b fd 70 45            std  dptr2
2725                         * 	
2726                         * 		for(i=0; i<temp; i++)
2727 d26e cc 00 00            ldd  #0
2728 d271 fd 70 00            std  i
2729                         cc87:  
2730 d274 fc 70 00            ldd  i
2731 d277 34 06               pshs d
2732 d279 fc 70 12            ldd  temp
2733 d27c 10 a3 e1            cmpd ,s++
2734 d27f 2e 05               bgt  *+7
2735 d281 cc 00 00            ldd  #0
2736 d284 20 03               bra  *+5
2737 d286 cc 00 01            ldd  #1
2738 d289 10 83 00 00         cmpd #0
2739 d28d 10 27 00 32         lbeq cc86
2740 d291 7e d2 a3            jmp cc88
2741                         cc85:  
2742 d294 fc 70 00            ldd  i
2743 d297 c3 00 01            addd #1
2744 d29a fd 70 00            std  i
2745 d29d 83 00 01            subd #1
2746 d2a0 7e d2 74            jmp cc87
2747                         cc88:  
2748                         * 		{
2749                         * 			*(dptr2+i)=*(dptr+i);
2750 d2a3 fc 70 45            ldd  dptr2
2751 d2a6 34 06               pshs d
2752 d2a8 fc 70 00            ldd  i
2753 d2ab e3 e1               addd ,s++
2754 d2ad 34 06               pshs d
2755 d2af fc 70 43            ldd  dptr
2756 d2b2 34 06               pshs d
2757 d2b4 fc 70 00            ldd  i
2758 d2b7 e3 e1               addd ,s++
2759 d2b9 34 06               pshs d
2760 d2bb e6 f1               ldb  [,s++]
2761 d2bd 1d                  sex
2762 d2be e7 f1               stb  [,s++]
2763                         * 		}	
2764 d2c0 7e d2 94            jmp cc85
2765                         cc86:  
2766                         * 		PC = desti;
2767 d2c3 fc 70 20            ldd  desti
2768 d2c6 fd 70 16            std  PC
2769                         *         read_memory();
2770 d2c9 bd ce 1b            jsr read_mem
2771                         *         dot_data();
2772 d2cc bd cb af            jsr dot_data
2773                         * 		state=2;
2774 d2cf cc 00 02            ldd  #2
2775 d2d2 f7 70 24            stb  state
2776                         * 	}
2777                         * }
2778                         cc84:  
2779 d2d5 39                  rts
2780                         * key_reg()
2781                         
2782                         * .global key_reg
2783                         key_reg: 
2784                         * {
2785                         *    buffer[7]=0;
2786 d2d6 cc 70 35            ldd  #buffer
2787 d2d9 34 06               pshs d
2788 d2db cc 00 07            ldd  #7
2789 d2de e3 e1               addd ,s++
2790 d2e0 34 06               pshs d
2791 d2e2 cc 00 00            ldd  #0
2792 d2e5 e7 f1               stb  [,s++]
2793                         *    buffer[6]=0;
2794 d2e7 cc 70 35            ldd  #buffer
2795 d2ea 34 06               pshs d
2796 d2ec cc 00 06            ldd  #6
2797 d2ef e3 e1               addd ,s++
2798 d2f1 34 06               pshs d
2799 d2f3 cc 00 00            ldd  #0
2800 d2f6 e7 f1               stb  [,s++]
2801                         *    buffer[5]= 0x03;
2802 d2f8 cc 70 35            ldd  #buffer
2803 d2fb 34 06               pshs d
2804 d2fd cc 00 05            ldd  #5
2805 d300 e3 e1               addd ,s++
2806 d302 34 06               pshs d
2807 d304 cc 00 03            ldd  #3
2808 d307 e7 f1               stb  [,s++]
2809                         *    buffer[4]= 0x8F;
2810 d309 cc 70 35            ldd  #buffer
2811 d30c 34 06               pshs d
2812 d30e cc 00 04            ldd  #4
2813 d311 e3 e1               addd ,s++
2814 d313 34 06               pshs d
2815 d315 cc 00 8f            ldd  #143
2816 d318 e7 f1               stb  [,s++]
2817                         *    buffer[3]= 0xad;
2818 d31a cc 70 35            ldd  #buffer
2819 d31d 34 06               pshs d
2820 d31f cc 00 03            ldd  #3
2821 d322 e3 e1               addd ,s++
2822 d324 34 06               pshs d
2823 d326 cc 00 ad            ldd  #173
2824 d329 e7 f1               stb  [,s++]
2825                         *    buffer[2]=0;
2826 d32b cc 70 35            ldd  #buffer
2827 d32e 34 06               pshs d
2828 d330 cc 00 02            ldd  #2
2829 d333 e3 e1               addd ,s++
2830 d335 34 06               pshs d
2831 d337 cc 00 00            ldd  #0
2832 d33a e7 f1               stb  [,s++]
2833                         *    buffer[1]=0;
2834 d33c cc 70 35            ldd  #buffer
2835 d33f 34 06               pshs d
2836 d341 cc 00 01            ldd  #1
2837 d344 e3 e1               addd ,s++
2838 d346 34 06               pshs d
2839 d348 cc 00 00            ldd  #0
2840 d34b e7 f1               stb  [,s++]
2841                         *    buffer[0]=0;
2842 d34d cc 70 35            ldd  #buffer
2843 d350 34 06               pshs d
2844 d352 cc 00 00            ldd  #0
2845 d355 e3 e1               addd ,s++
2846 d357 34 06               pshs d
2847 d359 cc 00 00            ldd  #0
2848 d35c e7 f1               stb  [,s++]
2849                         *    state = 3;    /* register display state = 3 with hex key */
2850 d35e cc 00 03            ldd  #3
2851 d361 f7 70 24            stb  state
2852                         * }
2853 d364 39                  rts
2854                         * acca()
2855                         
2856                         * .global acca
2857                         acca: 
2858                         * {
2859                         * 	
2860                         *     n = USER_A;
2861 d365 f6 70 2f            ldb  USER_A
2862 d368 1d                  sex
2863 d369 f7 70 04            stb  n
2864                         * 	buffer[2]= convert[n&0xf];
2865 d36c cc 70 35            ldd  #buffer
2866 d36f 34 06               pshs d
2867 d371 cc 00 02            ldd  #2
2868 d374 e3 e1               addd ,s++
2869 d376 34 06               pshs d
2870 d378 cc c1 0d            ldd  #convert
2871 d37b 34 06               pshs d
2872 d37d f6 70 04            ldb  n
2873 d380 1d                  sex
2874 d381 34 06               pshs d
2875 d383 cc 00 0f            ldd  #15
2876 d386 a4 e0               anda ,s+
2877 d388 e4 e0               andb ,s+
2878 d38a e3 e1               addd ,s++
2879 d38c 34 06               pshs d
2880 d38e e6 f1               ldb  [,s++]
2881 d390 1d                  sex
2882 d391 e7 f1               stb  [,s++]
2883                         * 	n = n>>4;
2884 d393 f6 70 04            ldb  n
2885 d396 1d                  sex
2886 d397 34 06               pshs d
2887 d399 cc 00 04            ldd  #4
2888 d39c 5a                  decb
2889 d39d 2d 06               blt  *+8
2890 d39f 64 e4               lsr  ,s
2891 d3a1 66 61               ror  1,s
2892 d3a3 20 f7               bra *-7
2893 d3a5 35 06               puls d
2894 d3a7 f7 70 04            stb  n
2895                         * 	buffer[3]=convert[n&0xf];
2896 d3aa cc 70 35            ldd  #buffer
2897 d3ad 34 06               pshs d
2898 d3af cc 00 03            ldd  #3
2899 d3b2 e3 e1               addd ,s++
2900 d3b4 34 06               pshs d
2901 d3b6 cc c1 0d            ldd  #convert
2902 d3b9 34 06               pshs d
2903 d3bb f6 70 04            ldb  n
2904 d3be 1d                  sex
2905 d3bf 34 06               pshs d
2906 d3c1 cc 00 0f            ldd  #15
2907 d3c4 a4 e0               anda ,s+
2908 d3c6 e4 e0               andb ,s+
2909 d3c8 e3 e1               addd ,s++
2910 d3ca 34 06               pshs d
2911 d3cc e6 f1               ldb  [,s++]
2912 d3ce 1d                  sex
2913 d3cf e7 f1               stb  [,s++]
2914                         * 	buffer[4]=0;
2915 d3d1 cc 70 35            ldd  #buffer
2916 d3d4 34 06               pshs d
2917 d3d6 cc 00 04            ldd  #4
2918 d3d9 e3 e1               addd ,s++
2919 d3db 34 06               pshs d
2920 d3dd cc 00 00            ldd  #0
2921 d3e0 e7 f1               stb  [,s++]
2922                         * 	buffer[5]=0;
2923 d3e2 cc 70 35            ldd  #buffer
2924 d3e5 34 06               pshs d
2925 d3e7 cc 00 05            ldd  #5
2926 d3ea e3 e1               addd ,s++
2927 d3ec 34 06               pshs d
2928 d3ee cc 00 00            ldd  #0
2929 d3f1 e7 f1               stb  [,s++]
2930                         * 	buffer[1]=0;
2931 d3f3 cc 70 35            ldd  #buffer
2932 d3f6 34 06               pshs d
2933 d3f8 cc 00 01            ldd  #1
2934 d3fb e3 e1               addd ,s++
2935 d3fd 34 06               pshs d
2936 d3ff cc 00 00            ldd  #0
2937 d402 e7 f1               stb  [,s++]
2938                         * 	buffer[0]=0x3f;
2939 d404 cc 70 35            ldd  #buffer
2940 d407 34 06               pshs d
2941 d409 cc 00 00            ldd  #0
2942 d40c e3 e1               addd ,s++
2943 d40e 34 06               pshs d
2944 d410 cc 00 3f            ldd  #63
2945 d413 e7 f1               stb  [,s++]
2946                         * }
2947 d415 39                  rts
2948                         * accb()
2949                         
2950                         * .global accb
2951                         accb: 
2952                         * {
2953                         * 	
2954                         *     n = USER_B;
2955 d416 f6 70 30            ldb  USER_B
2956 d419 1d                  sex
2957 d41a f7 70 04            stb  n
2958                         * 	buffer[2]= convert[n&0xf];
2959 d41d cc 70 35            ldd  #buffer
2960 d420 34 06               pshs d
2961 d422 cc 00 02            ldd  #2
2962 d425 e3 e1               addd ,s++
2963 d427 34 06               pshs d
2964 d429 cc c1 0d            ldd  #convert
2965 d42c 34 06               pshs d
2966 d42e f6 70 04            ldb  n
2967 d431 1d                  sex
2968 d432 34 06               pshs d
2969 d434 cc 00 0f            ldd  #15
2970 d437 a4 e0               anda ,s+
2971 d439 e4 e0               andb ,s+
2972 d43b e3 e1               addd ,s++
2973 d43d 34 06               pshs d
2974 d43f e6 f1               ldb  [,s++]
2975 d441 1d                  sex
2976 d442 e7 f1               stb  [,s++]
2977                         * 	n = n>>4;
2978 d444 f6 70 04            ldb  n
2979 d447 1d                  sex
2980 d448 34 06               pshs d
2981 d44a cc 00 04            ldd  #4
2982 d44d 5a                  decb
2983 d44e 2d 06               blt  *+8
2984 d450 64 e4               lsr  ,s
2985 d452 66 61               ror  1,s
2986 d454 20 f7               bra *-7
2987 d456 35 06               puls d
2988 d458 f7 70 04            stb  n
2989                         * 	buffer[3]=convert[n&0xf];
2990 d45b cc 70 35            ldd  #buffer
2991 d45e 34 06               pshs d
2992 d460 cc 00 03            ldd  #3
2993 d463 e3 e1               addd ,s++
2994 d465 34 06               pshs d
2995 d467 cc c1 0d            ldd  #convert
2996 d46a 34 06               pshs d
2997 d46c f6 70 04            ldb  n
2998 d46f 1d                  sex
2999 d470 34 06               pshs d
3000 d472 cc 00 0f            ldd  #15
3001 d475 a4 e0               anda ,s+
3002 d477 e4 e0               andb ,s+
3003 d479 e3 e1               addd ,s++
3004 d47b 34 06               pshs d
3005 d47d e6 f1               ldb  [,s++]
3006 d47f 1d                  sex
3007 d480 e7 f1               stb  [,s++]
3008                         * 	buffer[4]=0;
3009 d482 cc 70 35            ldd  #buffer
3010 d485 34 06               pshs d
3011 d487 cc 00 04            ldd  #4
3012 d48a e3 e1               addd ,s++
3013 d48c 34 06               pshs d
3014 d48e cc 00 00            ldd  #0
3015 d491 e7 f1               stb  [,s++]
3016                         * 	buffer[5]=0;
3017 d493 cc 70 35            ldd  #buffer
3018 d496 34 06               pshs d
3019 d498 cc 00 05            ldd  #5
3020 d49b e3 e1               addd ,s++
3021 d49d 34 06               pshs d
3022 d49f cc 00 00            ldd  #0
3023 d4a2 e7 f1               stb  [,s++]
3024                         * 	buffer[1]=0;
3025 d4a4 cc 70 35            ldd  #buffer
3026 d4a7 34 06               pshs d
3027 d4a9 cc 00 01            ldd  #1
3028 d4ac e3 e1               addd ,s++
3029 d4ae 34 06               pshs d
3030 d4b0 cc 00 00            ldd  #0
3031 d4b3 e7 f1               stb  [,s++]
3032                         * 	buffer[0]=0xa7;
3033 d4b5 cc 70 35            ldd  #buffer
3034 d4b8 34 06               pshs d
3035 d4ba cc 00 00            ldd  #0
3036 d4bd e3 e1               addd ,s++
3037 d4bf 34 06               pshs d
3038 d4c1 cc 00 a7            ldd  #167
3039 d4c4 e7 f1               stb  [,s++]
3040                         * }
3041 d4c6 39                  rts
3042                         * ab()
3043                         
3044                         * .global ab
3045                         ab: 
3046                         * {
3047                         * 	
3048                         *     n = USER_B;
3049 d4c7 f6 70 30            ldb  USER_B
3050 d4ca 1d                  sex
3051 d4cb f7 70 04            stb  n
3052                         * 	buffer[2]= convert[n&0xf];
3053 d4ce cc 70 35            ldd  #buffer
3054 d4d1 34 06               pshs d
3055 d4d3 cc 00 02            ldd  #2
3056 d4d6 e3 e1               addd ,s++
3057 d4d8 34 06               pshs d
3058 d4da cc c1 0d            ldd  #convert
3059 d4dd 34 06               pshs d
3060 d4df f6 70 04            ldb  n
3061 d4e2 1d                  sex
3062 d4e3 34 06               pshs d
3063 d4e5 cc 00 0f            ldd  #15
3064 d4e8 a4 e0               anda ,s+
3065 d4ea e4 e0               andb ,s+
3066 d4ec e3 e1               addd ,s++
3067 d4ee 34 06               pshs d
3068 d4f0 e6 f1               ldb  [,s++]
3069 d4f2 1d                  sex
3070 d4f3 e7 f1               stb  [,s++]
3071                         * 	n = n>>4;
3072 d4f5 f6 70 04            ldb  n
3073 d4f8 1d                  sex
3074 d4f9 34 06               pshs d
3075 d4fb cc 00 04            ldd  #4
3076 d4fe 5a                  decb
3077 d4ff 2d 06               blt  *+8
3078 d501 64 e4               lsr  ,s
3079 d503 66 61               ror  1,s
3080 d505 20 f7               bra *-7
3081 d507 35 06               puls d
3082 d509 f7 70 04            stb  n
3083                         * 	buffer[3]=convert[n&0xf];
3084 d50c cc 70 35            ldd  #buffer
3085 d50f 34 06               pshs d
3086 d511 cc 00 03            ldd  #3
3087 d514 e3 e1               addd ,s++
3088 d516 34 06               pshs d
3089 d518 cc c1 0d            ldd  #convert
3090 d51b 34 06               pshs d
3091 d51d f6 70 04            ldb  n
3092 d520 1d                  sex
3093 d521 34 06               pshs d
3094 d523 cc 00 0f            ldd  #15
3095 d526 a4 e0               anda ,s+
3096 d528 e4 e0               andb ,s+
3097 d52a e3 e1               addd ,s++
3098 d52c 34 06               pshs d
3099 d52e e6 f1               ldb  [,s++]
3100 d530 1d                  sex
3101 d531 e7 f1               stb  [,s++]
3102                         * 	
3103                         * 	n = USER_A;
3104 d533 f6 70 2f            ldb  USER_A
3105 d536 1d                  sex
3106 d537 f7 70 04            stb  n
3107                         *     buffer[4]= convert[n&0xf];
3108 d53a cc 70 35            ldd  #buffer
3109 d53d 34 06               pshs d
3110 d53f cc 00 04            ldd  #4
3111 d542 e3 e1               addd ,s++
3112 d544 34 06               pshs d
3113 d546 cc c1 0d            ldd  #convert
3114 d549 34 06               pshs d
3115 d54b f6 70 04            ldb  n
3116 d54e 1d                  sex
3117 d54f 34 06               pshs d
3118 d551 cc 00 0f            ldd  #15
3119 d554 a4 e0               anda ,s+
3120 d556 e4 e0               andb ,s+
3121 d558 e3 e1               addd ,s++
3122 d55a 34 06               pshs d
3123 d55c e6 f1               ldb  [,s++]
3124 d55e 1d                  sex
3125 d55f e7 f1               stb  [,s++]
3126                         * 	n = n>>4;
3127 d561 f6 70 04            ldb  n
3128 d564 1d                  sex
3129 d565 34 06               pshs d
3130 d567 cc 00 04            ldd  #4
3131 d56a 5a                  decb
3132 d56b 2d 06               blt  *+8
3133 d56d 64 e4               lsr  ,s
3134 d56f 66 61               ror  1,s
3135 d571 20 f7               bra *-7
3136 d573 35 06               puls d
3137 d575 f7 70 04            stb  n
3138                         * 	buffer[5]=convert[n&0xf];
3139 d578 cc 70 35            ldd  #buffer
3140 d57b 34 06               pshs d
3141 d57d cc 00 05            ldd  #5
3142 d580 e3 e1               addd ,s++
3143 d582 34 06               pshs d
3144 d584 cc c1 0d            ldd  #convert
3145 d587 34 06               pshs d
3146 d589 f6 70 04            ldb  n
3147 d58c 1d                  sex
3148 d58d 34 06               pshs d
3149 d58f cc 00 0f            ldd  #15
3150 d592 a4 e0               anda ,s+
3151 d594 e4 e0               andb ,s+
3152 d596 e3 e1               addd ,s++
3153 d598 34 06               pshs d
3154 d59a e6 f1               ldb  [,s++]
3155 d59c 1d                  sex
3156 d59d e7 f1               stb  [,s++]
3157                         * 	
3158                         * 	buffer[1]=0x3f;
3159 d59f cc 70 35            ldd  #buffer
3160 d5a2 34 06               pshs d
3161 d5a4 cc 00 01            ldd  #1
3162 d5a7 e3 e1               addd ,s++
3163 d5a9 34 06               pshs d
3164 d5ab cc 00 3f            ldd  #63
3165 d5ae e7 f1               stb  [,s++]
3166                         * 	buffer[0]=0xa7;
3167 d5b0 cc 70 35            ldd  #buffer
3168 d5b3 34 06               pshs d
3169 d5b5 cc 00 00            ldd  #0
3170 d5b8 e3 e1               addd ,s++
3171 d5ba 34 06               pshs d
3172 d5bc cc 00 a7            ldd  #167
3173 d5bf e7 f1               stb  [,s++]
3174                         * }
3175 d5c1 39                  rts
3176                         * reg_x()
3177                         
3178                         * .global reg_x
3179                         reg_x: 
3180                         * {
3181                         * 	temp16 = USER_X;
3182 d5c2 fc 70 29            ldd  USER_X
3183 d5c5 fd 70 14            std  temp16
3184                         * 	
3185                         * 	hex4(temp16);
3186 d5c8 fc 70 14            ldd  temp16
3187 d5cb 34 06               pshs d
3188 d5cd bd cc 9c            jsr hex4
3189 d5d0 32 62               leas 2,s
3190                         * 	
3191                         * 	buffer[1] = 0;
3192 d5d2 cc 70 35            ldd  #buffer
3193 d5d5 34 06               pshs d
3194 d5d7 cc 00 01            ldd  #1
3195 d5da e3 e1               addd ,s++
3196 d5dc 34 06               pshs d
3197 d5de cc 00 00            ldd  #0
3198 d5e1 e7 f1               stb  [,s++]
3199                         * 	buffer[0] = 0x13;
3200 d5e3 cc 70 35            ldd  #buffer
3201 d5e6 34 06               pshs d
3202 d5e8 cc 00 00            ldd  #0
3203 d5eb e3 e1               addd ,s++
3204 d5ed 34 06               pshs d
3205 d5ef cc 00 13            ldd  #19
3206 d5f2 e7 f1               stb  [,s++]
3207                         * }
3208 d5f4 39                  rts
3209                         * reg_y()
3210                         
3211                         * .global reg_y
3212                         reg_y: 
3213                         * {
3214                         * 	temp16 = USER_Y;
3215 d5f5 fc 70 2d            ldd  USER_Y
3216 d5f8 fd 70 14            std  temp16
3217                         *      hex4(temp16);
3218 d5fb fc 70 14            ldd  temp16
3219 d5fe 34 06               pshs d
3220 d600 bd cc 9c            jsr hex4
3221 d603 32 62               leas 2,s
3222                         * 	
3223                         * 	buffer[1] = 0;
3224 d605 cc 70 35            ldd  #buffer
3225 d608 34 06               pshs d
3226 d60a cc 00 01            ldd  #1
3227 d60d e3 e1               addd ,s++
3228 d60f 34 06               pshs d
3229 d611 cc 00 00            ldd  #0
3230 d614 e7 f1               stb  [,s++]
3231                         * 	buffer[0] = 0xb6;
3232 d616 cc 70 35            ldd  #buffer
3233 d619 34 06               pshs d
3234 d61b cc 00 00            ldd  #0
3235 d61e e3 e1               addd ,s++
3236 d620 34 06               pshs d
3237 d622 cc 00 b6            ldd  #182
3238 d625 e7 f1               stb  [,s++]
3239                         * }
3240 d627 39                  rts
3241                         * reg_u()
3242                         
3243                         * .global reg_u
3244                         reg_u: 
3245                         * {
3246                         *     temp16 = USER_U;
3247 d628 fc 70 27            ldd  USER_U
3248 d62b fd 70 14            std  temp16
3249                         * 	hex4(temp16);
3250 d62e fc 70 14            ldd  temp16
3251 d631 34 06               pshs d
3252 d633 bd cc 9c            jsr hex4
3253 d636 32 62               leas 2,s
3254                         * 	
3255                         * 	buffer[1] = 0;
3256 d638 cc 70 35            ldd  #buffer
3257 d63b 34 06               pshs d
3258 d63d cc 00 01            ldd  #1
3259 d640 e3 e1               addd ,s++
3260 d642 34 06               pshs d
3261 d644 cc 00 00            ldd  #0
3262 d647 e7 f1               stb  [,s++]
3263                         * 	buffer[0] = 0xb5;
3264 d649 cc 70 35            ldd  #buffer
3265 d64c 34 06               pshs d
3266 d64e cc 00 00            ldd  #0
3267 d651 e3 e1               addd ,s++
3268 d653 34 06               pshs d
3269 d655 cc 00 b5            ldd  #181
3270 d658 e7 f1               stb  [,s++]
3271                         * }
3272 d65a 39                  rts
3273                         * reg_s()
3274                         
3275                         * .global reg_s
3276                         reg_s: 
3277                         * {
3278                         * 	temp16 = SAVE_SP;
3279 d65b fc 70 2b            ldd  SAVE_SP
3280 d65e fd 70 14            std  temp16
3281                         * 	hex4(temp16);
3282 d661 fc 70 14            ldd  temp16
3283 d664 34 06               pshs d
3284 d666 bd cc 9c            jsr hex4
3285 d669 32 62               leas 2,s
3286                         * 	buffer[1] = 0;
3287 d66b cc 70 35            ldd  #buffer
3288 d66e 34 06               pshs d
3289 d670 cc 00 01            ldd  #1
3290 d673 e3 e1               addd ,s++
3291 d675 34 06               pshs d
3292 d677 cc 00 00            ldd  #0
3293 d67a e7 f1               stb  [,s++]
3294                         * 	buffer[0] = 0xae;
3295 d67c cc 70 35            ldd  #buffer
3296 d67f 34 06               pshs d
3297 d681 cc 00 00            ldd  #0
3298 d684 e3 e1               addd ,s++
3299 d686 34 06               pshs d
3300 d688 cc 00 ae            ldd  #174
3301 d68b e7 f1               stb  [,s++]
3302                         * }
3303 d68d 39                  rts
3304                         * reg_dp()
3305                         
3306                         * .global reg_dp
3307                         reg_dp: 
3308                         * {
3309                         * 	n = USER_DP;
3310 d68e f6 70 32            ldb  USER_DP
3311 d691 1d                  sex
3312 d692 f7 70 04            stb  n
3313                         * 	buffer[2]= convert[n&0xf];
3314 d695 cc 70 35            ldd  #buffer
3315 d698 34 06               pshs d
3316 d69a cc 00 02            ldd  #2
3317 d69d e3 e1               addd ,s++
3318 d69f 34 06               pshs d
3319 d6a1 cc c1 0d            ldd  #convert
3320 d6a4 34 06               pshs d
3321 d6a6 f6 70 04            ldb  n
3322 d6a9 1d                  sex
3323 d6aa 34 06               pshs d
3324 d6ac cc 00 0f            ldd  #15
3325 d6af a4 e0               anda ,s+
3326 d6b1 e4 e0               andb ,s+
3327 d6b3 e3 e1               addd ,s++
3328 d6b5 34 06               pshs d
3329 d6b7 e6 f1               ldb  [,s++]
3330 d6b9 1d                  sex
3331 d6ba e7 f1               stb  [,s++]
3332                         * 	n = n>>4;
3333 d6bc f6 70 04            ldb  n
3334 d6bf 1d                  sex
3335 d6c0 34 06               pshs d
3336 d6c2 cc 00 04            ldd  #4
3337 d6c5 5a                  decb
3338 d6c6 2d 06               blt  *+8
3339 d6c8 64 e4               lsr  ,s
3340 d6ca 66 61               ror  1,s
3341 d6cc 20 f7               bra *-7
3342 d6ce 35 06               puls d
3343 d6d0 f7 70 04            stb  n
3344                         * 	buffer[3]=convert[n&0xf];
3345 d6d3 cc 70 35            ldd  #buffer
3346 d6d6 34 06               pshs d
3347 d6d8 cc 00 03            ldd  #3
3348 d6db e3 e1               addd ,s++
3349 d6dd 34 06               pshs d
3350 d6df cc c1 0d            ldd  #convert
3351 d6e2 34 06               pshs d
3352 d6e4 f6 70 04            ldb  n
3353 d6e7 1d                  sex
3354 d6e8 34 06               pshs d
3355 d6ea cc 00 0f            ldd  #15
3356 d6ed a4 e0               anda ,s+
3357 d6ef e4 e0               andb ,s+
3358 d6f1 e3 e1               addd ,s++
3359 d6f3 34 06               pshs d
3360 d6f5 e6 f1               ldb  [,s++]
3361 d6f7 1d                  sex
3362 d6f8 e7 f1               stb  [,s++]
3363                         * 	buffer[4]=0;
3364 d6fa cc 70 35            ldd  #buffer
3365 d6fd 34 06               pshs d
3366 d6ff cc 00 04            ldd  #4
3367 d702 e3 e1               addd ,s++
3368 d704 34 06               pshs d
3369 d706 cc 00 00            ldd  #0
3370 d709 e7 f1               stb  [,s++]
3371                         * 	buffer[5]=0;
3372 d70b cc 70 35            ldd  #buffer
3373 d70e 34 06               pshs d
3374 d710 cc 00 05            ldd  #5
3375 d713 e3 e1               addd ,s++
3376 d715 34 06               pshs d
3377 d717 cc 00 00            ldd  #0
3378 d71a e7 f1               stb  [,s++]
3379                         * 	buffer[1]=0xb3;
3380 d71c cc 70 35            ldd  #buffer
3381 d71f 34 06               pshs d
3382 d721 cc 00 01            ldd  #1
3383 d724 e3 e1               addd ,s++
3384 d726 34 06               pshs d
3385 d728 cc 00 b3            ldd  #179
3386 d72b e7 f1               stb  [,s++]
3387                         * 	buffer[0]=0x1F;
3388 d72d cc 70 35            ldd  #buffer
3389 d730 34 06               pshs d
3390 d732 cc 00 00            ldd  #0
3391 d735 e3 e1               addd ,s++
3392 d737 34 06               pshs d
3393 d739 cc 00 1f            ldd  #31
3394 d73c e7 f1               stb  [,s++]
3395                         * }
3396 d73e 39                  rts
3397                         * low_cc()
3398                         
3399                         * .global low_cc
3400                         low_cc: 
3401                         * {
3402                         *   n = USER_P;
3403 d73f f6 70 31            ldb  USER_P
3404 d742 1d                  sex
3405 d743 f7 70 04            stb  n
3406                         *   if(n&1) buffer[2]=0x30; else buffer[2]=0xbd;
3407 d746 f6 70 04            ldb  n
3408 d749 1d                  sex
3409 d74a 34 06               pshs d
3410 d74c cc 00 01            ldd  #1
3411 d74f a4 e0               anda ,s+
3412 d751 e4 e0               andb ,s+
3413 d753 10 83 00 00         cmpd #0
3414 d757 10 27 00 14         lbeq cc89
3415 d75b cc 70 35            ldd  #buffer
3416 d75e 34 06               pshs d
3417 d760 cc 00 02            ldd  #2
3418 d763 e3 e1               addd ,s++
3419 d765 34 06               pshs d
3420 d767 cc 00 30            ldd  #48
3421 d76a e7 f1               stb  [,s++]
3422 d76c 7e d7 80            jmp cc90
3423                         cc89:  
3424 d76f cc 70 35            ldd  #buffer
3425 d772 34 06               pshs d
3426 d774 cc 00 02            ldd  #2
3427 d777 e3 e1               addd ,s++
3428 d779 34 06               pshs d
3429 d77b cc 00 bd            ldd  #189
3430 d77e e7 f1               stb  [,s++]
3431                         cc90:  
3432                         *   if(n&2) buffer[3]=0x30; else buffer[3]=0xbd;
3433 d780 f6 70 04            ldb  n
3434 d783 1d                  sex
3435 d784 34 06               pshs d
3436 d786 cc 00 02            ldd  #2
3437 d789 a4 e0               anda ,s+
3438 d78b e4 e0               andb ,s+
3439 d78d 10 83 00 00         cmpd #0
3440 d791 10 27 00 14         lbeq cc91
3441 d795 cc 70 35            ldd  #buffer
3442 d798 34 06               pshs d
3443 d79a cc 00 03            ldd  #3
3444 d79d e3 e1               addd ,s++
3445 d79f 34 06               pshs d
3446 d7a1 cc 00 30            ldd  #48
3447 d7a4 e7 f1               stb  [,s++]
3448 d7a6 7e d7 ba            jmp cc92
3449                         cc91:  
3450 d7a9 cc 70 35            ldd  #buffer
3451 d7ac 34 06               pshs d
3452 d7ae cc 00 03            ldd  #3
3453 d7b1 e3 e1               addd ,s++
3454 d7b3 34 06               pshs d
3455 d7b5 cc 00 bd            ldd  #189
3456 d7b8 e7 f1               stb  [,s++]
3457                         cc92:  
3458                         *   if(n&4) buffer[4]=0x30; else buffer[4]=0xbd;
3459 d7ba f6 70 04            ldb  n
3460 d7bd 1d                  sex
3461 d7be 34 06               pshs d
3462 d7c0 cc 00 04            ldd  #4
3463 d7c3 a4 e0               anda ,s+
3464 d7c5 e4 e0               andb ,s+
3465 d7c7 10 83 00 00         cmpd #0
3466 d7cb 10 27 00 14         lbeq cc93
3467 d7cf cc 70 35            ldd  #buffer
3468 d7d2 34 06               pshs d
3469 d7d4 cc 00 04            ldd  #4
3470 d7d7 e3 e1               addd ,s++
3471 d7d9 34 06               pshs d
3472 d7db cc 00 30            ldd  #48
3473 d7de e7 f1               stb  [,s++]
3474 d7e0 7e d7 f4            jmp cc94
3475                         cc93:  
3476 d7e3 cc 70 35            ldd  #buffer
3477 d7e6 34 06               pshs d
3478 d7e8 cc 00 04            ldd  #4
3479 d7eb e3 e1               addd ,s++
3480 d7ed 34 06               pshs d
3481 d7ef cc 00 bd            ldd  #189
3482 d7f2 e7 f1               stb  [,s++]
3483                         cc94:  
3484                         *   if(n&8) buffer[5]=0x30; else buffer[5]=0xbd;
3485 d7f4 f6 70 04            ldb  n
3486 d7f7 1d                  sex
3487 d7f8 34 06               pshs d
3488 d7fa cc 00 08            ldd  #8
3489 d7fd a4 e0               anda ,s+
3490 d7ff e4 e0               andb ,s+
3491 d801 10 83 00 00         cmpd #0
3492 d805 10 27 00 14         lbeq cc95
3493 d809 cc 70 35            ldd  #buffer
3494 d80c 34 06               pshs d
3495 d80e cc 00 05            ldd  #5
3496 d811 e3 e1               addd ,s++
3497 d813 34 06               pshs d
3498 d815 cc 00 30            ldd  #48
3499 d818 e7 f1               stb  [,s++]
3500 d81a 7e d8 2e            jmp cc96
3501                         cc95:  
3502 d81d cc 70 35            ldd  #buffer
3503 d820 34 06               pshs d
3504 d822 cc 00 05            ldd  #5
3505 d825 e3 e1               addd ,s++
3506 d827 34 06               pshs d
3507 d829 cc 00 bd            ldd  #189
3508 d82c e7 f1               stb  [,s++]
3509                         cc96:  
3510                         *     
3511                         * 	buffer[1]=0x8d;
3512 d82e cc 70 35            ldd  #buffer
3513 d831 34 06               pshs d
3514 d833 cc 00 01            ldd  #1
3515 d836 e3 e1               addd ,s++
3516 d838 34 06               pshs d
3517 d83a cc 00 8d            ldd  #141
3518 d83d e7 f1               stb  [,s++]
3519                         * 	buffer[0]=0x85;
3520 d83f cc 70 35            ldd  #buffer
3521 d842 34 06               pshs d
3522 d844 cc 00 00            ldd  #0
3523 d847 e3 e1               addd ,s++
3524 d849 34 06               pshs d
3525 d84b cc 00 85            ldd  #133
3526 d84e e7 f1               stb  [,s++]
3527                         * }
3528 d850 39                  rts
3529                         * hi_cc()
3530                         
3531                         * .global hi_cc
3532                         hi_cc: 
3533                         * {
3534                         *   n = USER_P;
3535 d851 f6 70 31            ldb  USER_P
3536 d854 1d                  sex
3537 d855 f7 70 04            stb  n
3538                         *   if(n&0x10) buffer[2]=0x30; else buffer[2]=0xbd;
3539 d858 f6 70 04            ldb  n
3540 d85b 1d                  sex
3541 d85c 34 06               pshs d
3542 d85e cc 00 10            ldd  #16
3543 d861 a4 e0               anda ,s+
3544 d863 e4 e0               andb ,s+
3545 d865 10 83 00 00         cmpd #0
3546 d869 10 27 00 14         lbeq cc97
3547 d86d cc 70 35            ldd  #buffer
3548 d870 34 06               pshs d
3549 d872 cc 00 02            ldd  #2
3550 d875 e3 e1               addd ,s++
3551 d877 34 06               pshs d
3552 d879 cc 00 30            ldd  #48
3553 d87c e7 f1               stb  [,s++]
3554 d87e 7e d8 92            jmp cc98
3555                         cc97:  
3556 d881 cc 70 35            ldd  #buffer
3557 d884 34 06               pshs d
3558 d886 cc 00 02            ldd  #2
3559 d889 e3 e1               addd ,s++
3560 d88b 34 06               pshs d
3561 d88d cc 00 bd            ldd  #189
3562 d890 e7 f1               stb  [,s++]
3563                         cc98:  
3564                         *   if(n&0x20) buffer[3]=0x30; else buffer[3]=0xbd;
3565 d892 f6 70 04            ldb  n
3566 d895 1d                  sex
3567 d896 34 06               pshs d
3568 d898 cc 00 20            ldd  #32
3569 d89b a4 e0               anda ,s+
3570 d89d e4 e0               andb ,s+
3571 d89f 10 83 00 00         cmpd #0
3572 d8a3 10 27 00 14         lbeq cc99
3573 d8a7 cc 70 35            ldd  #buffer
3574 d8aa 34 06               pshs d
3575 d8ac cc 00 03            ldd  #3
3576 d8af e3 e1               addd ,s++
3577 d8b1 34 06               pshs d
3578 d8b3 cc 00 30            ldd  #48
3579 d8b6 e7 f1               stb  [,s++]
3580 d8b8 7e d8 cc            jmp cc100
3581                         cc99:  
3582 d8bb cc 70 35            ldd  #buffer
3583 d8be 34 06               pshs d
3584 d8c0 cc 00 03            ldd  #3
3585 d8c3 e3 e1               addd ,s++
3586 d8c5 34 06               pshs d
3587 d8c7 cc 00 bd            ldd  #189
3588 d8ca e7 f1               stb  [,s++]
3589                         cc100:  
3590                         *   if(n&0x40) buffer[4]=0x30; else buffer[4]=0xbd;
3591 d8cc f6 70 04            ldb  n
3592 d8cf 1d                  sex
3593 d8d0 34 06               pshs d
3594 d8d2 cc 00 40            ldd  #64
3595 d8d5 a4 e0               anda ,s+
3596 d8d7 e4 e0               andb ,s+
3597 d8d9 10 83 00 00         cmpd #0
3598 d8dd 10 27 00 14         lbeq cc101
3599 d8e1 cc 70 35            ldd  #buffer
3600 d8e4 34 06               pshs d
3601 d8e6 cc 00 04            ldd  #4
3602 d8e9 e3 e1               addd ,s++
3603 d8eb 34 06               pshs d
3604 d8ed cc 00 30            ldd  #48
3605 d8f0 e7 f1               stb  [,s++]
3606 d8f2 7e d9 06            jmp cc102
3607                         cc101:  
3608 d8f5 cc 70 35            ldd  #buffer
3609 d8f8 34 06               pshs d
3610 d8fa cc 00 04            ldd  #4
3611 d8fd e3 e1               addd ,s++
3612 d8ff 34 06               pshs d
3613 d901 cc 00 bd            ldd  #189
3614 d904 e7 f1               stb  [,s++]
3615                         cc102:  
3616                         *   if(n&0x80) buffer[5]=0x30; else buffer[5]=0xbd;
3617 d906 f6 70 04            ldb  n
3618 d909 1d                  sex
3619 d90a 34 06               pshs d
3620 d90c cc 00 80            ldd  #128
3621 d90f a4 e0               anda ,s+
3622 d911 e4 e0               andb ,s+
3623 d913 10 83 00 00         cmpd #0
3624 d917 10 27 00 14         lbeq cc103
3625 d91b cc 70 35            ldd  #buffer
3626 d91e 34 06               pshs d
3627 d920 cc 00 05            ldd  #5
3628 d923 e3 e1               addd ,s++
3629 d925 34 06               pshs d
3630 d927 cc 00 30            ldd  #48
3631 d92a e7 f1               stb  [,s++]
3632 d92c 7e d9 40            jmp cc104
3633                         cc103:  
3634 d92f cc 70 35            ldd  #buffer
3635 d932 34 06               pshs d
3636 d934 cc 00 05            ldd  #5
3637 d937 e3 e1               addd ,s++
3638 d939 34 06               pshs d
3639 d93b cc 00 bd            ldd  #189
3640 d93e e7 f1               stb  [,s++]
3641                         cc104:  
3642                         *     
3643                         * 	buffer[1]=0x8d;
3644 d940 cc 70 35            ldd  #buffer
3645 d943 34 06               pshs d
3646 d945 cc 00 01            ldd  #1
3647 d948 e3 e1               addd ,s++
3648 d94a 34 06               pshs d
3649 d94c cc 00 8d            ldd  #141
3650 d94f e7 f1               stb  [,s++]
3651                         * 	buffer[0]=0x37;
3652 d951 cc 70 35            ldd  #buffer
3653 d954 34 06               pshs d
3654 d956 cc 00 00            ldd  #0
3655 d959 e3 e1               addd ,s++
3656 d95b 34 06               pshs d
3657 d95d cc 00 37            ldd  #55
3658 d960 e7 f1               stb  [,s++]
3659                         * }
3660 d962 39                  rts
3661                         * reg_display()
3662                         
3663                         * .global reg_disp
3664                         reg_disp: 
3665                         * {
3666                         *   switch(key)
3667 d963 f6 70 09            ldb  key
3668 d966 1d                  sex
3669 d967 7e d9 a9            jmp cc107
3670                         * 	{
3671                         *    case 0: acca(); break;
3672                         cc108:  
3673 d96a bd d3 65            jsr acca
3674 d96d 7e d9 d6            jmp cc106
3675                         *    case 1: accb(); break;
3676                         cc109:  
3677 d970 bd d4 16            jsr accb
3678 d973 7e d9 d6            jmp cc106
3679                         *    case 2: ab(); break;
3680                         cc110:  
3681 d976 bd d4 c7            jsr ab
3682 d979 7e d9 d6            jmp cc106
3683                         *    case 6: reg_x(); break;
3684                         cc111:  
3685 d97c bd d5 c2            jsr reg_x
3686 d97f 7e d9 d6            jmp cc106
3687                         *    case 7: reg_y(); break;
3688                         cc112:  
3689 d982 bd d5 f5            jsr reg_y
3690 d985 7e d9 d6            jmp cc106
3691                         *    case 9: reg_u(); break;
3692                         cc113:  
3693 d988 bd d6 28            jsr reg_u
3694 d98b 7e d9 d6            jmp cc106
3695                         *    case 10: reg_s(); break;
3696                         cc114:  
3697 d98e bd d6 5b            jsr reg_s
3698 d991 7e d9 d6            jmp cc106
3699                         *    case 8: reg_dp(); break;
3700                         cc115:  
3701 d994 bd d6 8e            jsr reg_dp
3702 d997 7e d9 d6            jmp cc106
3703                         *    case 5: low_cc(); break;
3704                         cc116:  
3705 d99a bd d7 3f            jsr low_cc
3706 d99d 7e d9 d6            jmp cc106
3707                         *    case 4: hi_cc(); break;
3708                         cc117:  
3709 d9a0 bd d8 51            jsr hi_cc
3710 d9a3 7e d9 d6            jmp cc106
3711                         *     }
3712 d9a6 7e d9 d6            jmp cc106
3713                         cc107:  
3714 d9a9 bd c0 f9            jsr ccswitch
3715 d9ac d9 6a 00 00         FDB cc108,0
3716 d9b0 d9 70 00 01         FDB cc109,1
3717 d9b4 d9 76 00 02         FDB cc110,2
3718 d9b8 d9 7c 00 06         FDB cc111,6
3719 d9bc d9 82 00 07         FDB cc112,7
3720 d9c0 d9 88 00 09         FDB cc113,9
3721 d9c4 d9 8e 00 0a         FDB cc114,10
3722 d9c8 d9 94 00 08         FDB cc115,8
3723 d9cc d9 9a 00 05         FDB cc116,5
3724 d9d0 d9 a0 00 04         FDB cc117,4
3725 d9d4 00 00               FDB 0
3726                         cc106:  
3727                         * }
3728 d9d6 39                  rts
3729                         * /* insert byte and shift 512 bytes down */
3730                         * insert()
3731                         
3732                         * .global insert
3733                         insert: 
3734                         * {
3735                         * 	if(state==1 || state==2)
3736 d9d7 f6 70 24            ldb  state
3737 d9da 1d                  sex
3738 d9db 34 06               pshs d
3739 d9dd cc 00 01            ldd  #1
3740 d9e0 10 a3 e1            cmpd ,s++
3741 d9e3 27 05               beq  *+7
3742 d9e5 cc 00 00            ldd  #0
3743 d9e8 20 03               bra  *+5
3744 d9ea cc 00 01            ldd  #1
3745 d9ed 10 83 00 00         cmpd #0
3746 d9f1 10 26 00 24         lbne cc119
3747 d9f5 f6 70 24            ldb  state
3748 d9f8 1d                  sex
3749 d9f9 34 06               pshs d
3750 d9fb cc 00 02            ldd  #2
3751 d9fe 10 a3 e1            cmpd ,s++
3752 da01 27 05               beq  *+7
3753 da03 cc 00 00            ldd  #0
3754 da06 20 03               bra  *+5
3755 da08 cc 00 01            ldd  #1
3756 da0b 10 83 00 00         cmpd #0
3757 da0f 10 26 00 06         lbne cc119
3758 da13 cc 00 00            ldd  #0
3759 da16 7e da 1c            jmp cc120
3760                         cc119:  
3761 da19 cc 00 01            ldd  #1
3762                         cc120:  
3763 da1c 10 83 00 00         cmpd #0
3764 da20 10 27 00 8e         lbeq cc118
3765                         * 	{
3766                         * 	dptr=PC;
3767 da24 fc 70 16            ldd  PC
3768 da27 fd 70 43            std  dptr
3769                         *     for(j=512; j>0; j--)
3770 da2a cc 02 00            ldd  #512
3771 da2d fd 70 02            std  j
3772                         cc123:  
3773 da30 fc 70 02            ldd  j
3774 da33 34 06               pshs d
3775 da35 cc 00 00            ldd  #0
3776 da38 10 a3 e1            cmpd ,s++
3777 da3b 2d 05               blt  *+7
3778 da3d cc 00 00            ldd  #0
3779 da40 20 03               bra  *+5
3780 da42 cc 00 01            ldd  #1
3781 da45 10 83 00 00         cmpd #0
3782 da49 10 27 00 3f         lbeq cc122
3783 da4d 7e da 5f            jmp cc124
3784                         cc121:  
3785 da50 fc 70 02            ldd  j
3786 da53 83 00 01            subd #1
3787 da56 fd 70 02            std  j
3788 da59 c3 00 01            addd #1
3789 da5c 7e da 30            jmp cc123
3790                         cc124:  
3791                         * 	{
3792                         * 	 *(dptr+j)=*(dptr+j-1);
3793 da5f fc 70 43            ldd  dptr
3794 da62 34 06               pshs d
3795 da64 fc 70 02            ldd  j
3796 da67 e3 e1               addd ,s++
3797 da69 34 06               pshs d
3798 da6b fc 70 43            ldd  dptr
3799 da6e 34 06               pshs d
3800 da70 fc 70 02            ldd  j
3801 da73 e3 e1               addd ,s++
3802 da75 34 06               pshs d
3803 da77 cc 00 01            ldd  #1
3804 da7a 35 10               puls x
3805 da7c 34 06               pshs d
3806 da7e 1f 10               tfr  x,d
3807 da80 a3 e1               subd ,s++
3808 da82 34 06               pshs d
3809 da84 e6 f1               ldb  [,s++]
3810 da86 1d                  sex
3811 da87 e7 f1               stb  [,s++]
3812                         * 	}
3813 da89 7e da 50            jmp cc121
3814                         cc122:  
3815                         * 	*(dptr+1)=0;  /* insert next byte */
3816 da8c fc 70 43            ldd  dptr
3817 da8f 34 06               pshs d
3818 da91 cc 00 01            ldd  #1
3819 da94 e3 e1               addd ,s++
3820 da96 34 06               pshs d
3821 da98 cc 00 00            ldd  #0
3822 da9b e7 f1               stb  [,s++]
3823                         * 	PC++;
3824 da9d fc 70 16            ldd  PC
3825 daa0 c3 00 01            addd #1
3826 daa3 fd 70 16            std  PC
3827 daa6 83 00 01            subd #1
3828                         *     read_memory();
3829 daa9 bd ce 1b            jsr read_mem
3830                         * 	state=2;
3831 daac cc 00 02            ldd  #2
3832 daaf f7 70 24            stb  state
3833                         * 	}
3834                         * }
3835                         cc118:  
3836 dab2 39                  rts
3837                         * /* delete current byte and shift 512 bytes up */
3838                         * cut_byte()
3839                         
3840                         * .global cut_byte
3841                         cut_byte: 
3842                         * {
3843                         *    if(state==1 || state==2)
3844 dab3 f6 70 24            ldb  state
3845 dab6 1d                  sex
3846 dab7 34 06               pshs d
3847 dab9 cc 00 01            ldd  #1
3848 dabc 10 a3 e1            cmpd ,s++
3849 dabf 27 05               beq  *+7
3850 dac1 cc 00 00            ldd  #0
3851 dac4 20 03               bra  *+5
3852 dac6 cc 00 01            ldd  #1
3853 dac9 10 83 00 00         cmpd #0
3854 dacd 10 26 00 24         lbne cc126
3855 dad1 f6 70 24            ldb  state
3856 dad4 1d                  sex
3857 dad5 34 06               pshs d
3858 dad7 cc 00 02            ldd  #2
3859 dada 10 a3 e1            cmpd ,s++
3860 dadd 27 05               beq  *+7
3861 dadf cc 00 00            ldd  #0
3862 dae2 20 03               bra  *+5
3863 dae4 cc 00 01            ldd  #1
3864 dae7 10 83 00 00         cmpd #0
3865 daeb 10 26 00 06         lbne cc126
3866 daef cc 00 00            ldd  #0
3867 daf2 7e da f8            jmp cc127
3868                         cc126:  
3869 daf5 cc 00 01            ldd  #1
3870                         cc127:  
3871 daf8 10 83 00 00         cmpd #0
3872 dafc 10 27 00 6b         lbeq cc125
3873                         * 	{
3874                         *   	dptr=PC;
3875 db00 fc 70 16            ldd  PC
3876 db03 fd 70 43            std  dptr
3877                         *     for(j=0; j<512; j++)
3878 db06 cc 00 00            ldd  #0
3879 db09 fd 70 02            std  j
3880                         cc130:  
3881 db0c fc 70 02            ldd  j
3882 db0f 34 06               pshs d
3883 db11 cc 02 00            ldd  #512
3884 db14 10 a3 e1            cmpd ,s++
3885 db17 2e 05               bgt  *+7
3886 db19 cc 00 00            ldd  #0
3887 db1c 20 03               bra  *+5
3888 db1e cc 00 01            ldd  #1
3889 db21 10 83 00 00         cmpd #0
3890 db25 10 27 00 39         lbeq cc129
3891 db29 7e db 3b            jmp cc131
3892                         cc128:  
3893 db2c fc 70 02            ldd  j
3894 db2f c3 00 01            addd #1
3895 db32 fd 70 02            std  j
3896 db35 83 00 01            subd #1
3897 db38 7e db 0c            jmp cc130
3898                         cc131:  
3899                         * 	{
3900                         * 	 *(dptr+j)=*(dptr+j+1);
3901 db3b fc 70 43            ldd  dptr
3902 db3e 34 06               pshs d
3903 db40 fc 70 02            ldd  j
3904 db43 e3 e1               addd ,s++
3905 db45 34 06               pshs d
3906 db47 fc 70 43            ldd  dptr
3907 db4a 34 06               pshs d
3908 db4c fc 70 02            ldd  j
3909 db4f e3 e1               addd ,s++
3910 db51 34 06               pshs d
3911 db53 cc 00 01            ldd  #1
3912 db56 e3 e1               addd ,s++
3913 db58 34 06               pshs d
3914 db5a e6 f1               ldb  [,s++]
3915 db5c 1d                  sex
3916 db5d e7 f1               stb  [,s++]
3917                         * 	}
3918 db5f 7e db 2c            jmp cc128
3919                         cc129:  
3920                         *     read_memory();
3921 db62 bd ce 1b            jsr read_mem
3922                         * 	state=2;
3923 db65 cc 00 02            ldd  #2
3924 db68 f7 70 24            stb  state
3925                         * 	}
3926                         * }
3927                         cc125:  
3928 db6b 39                  rts
3929                         * key_test()
3930                         
3931                         * .global key_test
3932                         key_test: 
3933                         * {
3934                         * 	/* clear I bit to enable irq */
3935                         * 	  #asm
3936 db6c 1c ef              		andcc #$ef
3937                         
3938                         *       #endasm
3939                         *      t=0;
3940 db6e cc 00 00            ldd  #0
3941 db71 fd 70 22            std  t
3942                         * 	  buffer[0]=0;buffer[1]=0;
3943 db74 cc 70 35            ldd  #buffer
3944 db77 34 06               pshs d
3945 db79 cc 00 00            ldd  #0
3946 db7c e3 e1               addd ,s++
3947 db7e 34 06               pshs d
3948 db80 cc 00 00            ldd  #0
3949 db83 e7 f1               stb  [,s++]
3950 db85 cc 70 35            ldd  #buffer
3951 db88 34 06               pshs d
3952 db8a cc 00 01            ldd  #1
3953 db8d e3 e1               addd ,s++
3954 db8f 34 06               pshs d
3955 db91 cc 00 00            ldd  #0
3956 db94 e7 f1               stb  [,s++]
3957                         *   while(1)
3958                         cc132:  
3959 db96 cc 00 01            ldd  #1
3960 db99 10 83 00 00         cmpd #0
3961 db9d 10 27 00 4d         lbeq cc133
3962                         * 	{
3963                         * 	 
3964                         * 	  while(tick<100)
3965                         cc134:  
3966 dba1 f6 70 0e            ldb  tick
3967 dba4 1d                  sex
3968 dba5 34 06               pshs d
3969 dba7 cc 00 64            ldd  #100
3970 dbaa 10 a3 e1            cmpd ,s++
3971 dbad 2e 05               bgt  *+7
3972 dbaf cc 00 00            ldd  #0
3973 dbb2 20 03               bra  *+5
3974 dbb4 cc 00 01            ldd  #1
3975 dbb7 10 83 00 00         cmpd #0
3976 dbbb 10 27 00 06         lbeq cc135
3977                         * 		  scan();
3978 dbbf bd c8 96            jsr scan
3979 dbc2 7e db a1            jmp cc134
3980                         cc135:  
3981                         * 		tick=0;
3982 dbc5 cc 00 00            ldd  #0
3983 dbc8 f7 70 0e            stb  tick
3984                         * 		hex4(t);
3985 dbcb fc 70 22            ldd  t
3986 dbce 34 06               pshs d
3987 dbd0 bd cc 9c            jsr hex4
3988 dbd3 32 62               leas 2,s
3989                         *      	*gpio1 = t;
3990 dbd5 fc 70 3b            ldd  gpio1
3991 dbd8 34 06               pshs d
3992 dbda fc 70 22            ldd  t
3993 dbdd e7 f1               stb  [,s++]
3994                         * 		t++;
3995 dbdf fc 70 22            ldd  t
3996 dbe2 c3 00 01            addd #1
3997 dbe5 fd 70 22            std  t
3998 dbe8 83 00 01            subd #1
3999                         *     
4000                         * 	
4001                         * 	}
4002 dbeb 7e db 96            jmp cc132
4003                         cc133:  
4004                         * }
4005 dbee 39                  rts
4006                         * clear_buffer()
4007                         
4008                         * .global clear_bu
4009                         clear_bu: 
4010                         * {
4011                         * 	for(i=0; i<6; i++)
4012 dbef cc 00 00            ldd  #0
4013 dbf2 fd 70 00            std  i
4014                         cc138:  
4015 dbf5 fc 70 00            ldd  i
4016 dbf8 34 06               pshs d
4017 dbfa cc 00 06            ldd  #6
4018 dbfd 10 a3 e1            cmpd ,s++
4019 dc00 2e 05               bgt  *+7
4020 dc02 cc 00 00            ldd  #0
4021 dc05 20 03               bra  *+5
4022 dc07 cc 00 01            ldd  #1
4023 dc0a 10 83 00 00         cmpd #0
4024 dc0e 10 27 00 26         lbeq cc137
4025 dc12 7e dc 24            jmp cc139
4026                         cc136:  
4027 dc15 fc 70 00            ldd  i
4028 dc18 c3 00 01            addd #1
4029 dc1b fd 70 00            std  i
4030 dc1e 83 00 01            subd #1
4031 dc21 7e db f5            jmp cc138
4032                         cc139:  
4033                         * 		*(buffer+i)=0;
4034 dc24 cc 70 35            ldd  #buffer
4035 dc27 34 06               pshs d
4036 dc29 fc 70 00            ldd  i
4037 dc2c e3 e1               addd ,s++
4038 dc2e 34 06               pshs d
4039 dc30 cc 00 00            ldd  #0
4040 dc33 e7 f1               stb  [,s++]
4041 dc35 7e dc 15            jmp cc136
4042                         cc137:  
4043                         * }
4044 dc38 39                  rts
4045                         * key_cal()
4046                         
4047                         * .global key_cal
4048                         key_cal: 
4049                         * {
4050                         * 	state = 4;
4051 dc39 cc 00 04            ldd  #4
4052 dc3c f7 70 24            stb  state
4053                         *     clear_buffer();
4054 dc3f bd db ef            jsr clear_bu
4055                         *     buffer[2]= 0xbd;
4056 dc42 cc 70 35            ldd  #buffer
4057 dc45 34 06               pshs d
4058 dc47 cc 00 02            ldd  #2
4059 dc4a e3 e1               addd ,s++
4060 dc4c 34 06               pshs d
4061 dc4e cc 00 bd            ldd  #189
4062 dc51 e7 f1               stb  [,s++]
4063                         * 	start=0;
4064 dc53 cc 00 00            ldd  #0
4065 dc56 fd 70 1c            std  start
4066                         * 	desti=0;
4067 dc59 cc 00 00            ldd  #0
4068 dc5c fd 70 20            std  desti
4069                         * 	/*buffer[1] = 0x8d;
4070                         *     buffer[0] = 0x85;
4071                         * 	*/
4072                         * 	hit = 0;
4073 dc5f cc 00 00            ldd  #0
4074 dc62 f7 70 0b            stb  hit
4075                         * }
4076 dc65 39                  rts
4077                         * enter_num()
4078                         
4079                         * .global enter_nu
4080                         enter_nu: 
4081                         * {
4082                         *    if(hit==0) num=0;
4083 dc66 f6 70 0b            ldb  hit
4084 dc69 1d                  sex
4085 dc6a 34 06               pshs d
4086 dc6c cc 00 00            ldd  #0
4087 dc6f 10 a3 e1            cmpd ,s++
4088 dc72 27 05               beq  *+7
4089 dc74 cc 00 00            ldd  #0
4090 dc77 20 03               bra  *+5
4091 dc79 cc 00 01            ldd  #1
4092 dc7c 10 83 00 00         cmpd #0
4093 dc80 10 27 00 06         lbeq cc140
4094 dc84 cc 00 00            ldd  #0
4095 dc87 fd 70 1a            std  num
4096                         * 	{
4097                         cc140:  
4098                         * 	   hit=1;
4099 dc8a cc 00 01            ldd  #1
4100 dc8d f7 70 0b            stb  hit
4101                         * 	   num<<=4;
4102 dc90 cc 70 1a            ldd  #num
4103 dc93 34 06               pshs d
4104 dc95 cc 00 04            ldd  #4
4105 dc98 ae f4               ldx  [,s]
4106 dc9a 34 10               pshs x
4107 dc9c 5a                  decb
4108 dc9d 2d 06               blt  *+8
4109 dc9f 68 61               asl  1,s
4110 dca1 69 e4               rol  ,s
4111 dca3 20 f7               bra  *-7
4112 dca5 35 06               puls d
4113 dca7 fd 70 1a            std  num
4114                         * 	   num |= key;
4115 dcaa cc 70 1a            ldd  #num
4116 dcad 34 06               pshs d
4117 dcaf f6 70 09            ldb  key
4118 dcb2 1d                  sex
4119 dcb3 ae f4               ldx  [,s]
4120 dcb5 34 10               pshs x
4121 dcb7 aa e0               ora  ,s+
4122 dcb9 ea e0               orb  ,s+
4123 dcbb fd 70 1a            std  num
4124                         * 	   hex4(num);
4125 dcbe fc 70 1a            ldd  num
4126 dcc1 34 06               pshs d
4127 dcc3 bd cc 9c            jsr hex4
4128 dcc6 32 62               leas 2,s
4129                         * 	  
4130                         * 	}
4131 dcc8 32 64               leas 4,s
4132                         * }
4133 dcca 39                  rts
4134                         * key_copy()
4135                         
4136                         * .global key_copy
4137                         key_copy: 
4138                         * {
4139                         * 		state=5;
4140 dccb cc 00 05            ldd  #5
4141 dcce f7 70 24            stb  state
4142                         * 		hit=0;
4143 dcd1 cc 00 00            ldd  #0
4144 dcd4 f7 70 0b            stb  hit
4145                         * 		clear_buffer();
4146 dcd7 bd db ef            jsr clear_bu
4147                         *         buffer[2]= 0xbd;
4148 dcda cc 70 35            ldd  #buffer
4149 dcdd 34 06               pshs d
4150 dcdf cc 00 02            ldd  #2
4151 dce2 e3 e1               addd ,s++
4152 dce4 34 06               pshs d
4153 dce6 cc 00 bd            ldd  #189
4154 dce9 e7 f1               stb  [,s++]
4155                         * 		
4156                         * 		buffer[0]=0xae;
4157 dceb cc 70 35            ldd  #buffer
4158 dcee 34 06               pshs d
4159 dcf0 cc 00 00            ldd  #0
4160 dcf3 e3 e1               addd ,s++
4161 dcf5 34 06               pshs d
4162 dcf7 cc 00 ae            ldd  #174
4163 dcfa e7 f1               stb  [,s++]
4164                         * 		buffer[1]=0;
4165 dcfc cc 70 35            ldd  #buffer
4166 dcff 34 06               pshs d
4167 dd01 cc 00 01            ldd  #1
4168 dd04 e3 e1               addd ,s++
4169 dd06 34 06               pshs d
4170 dd08 cc 00 00            ldd  #0
4171 dd0b e7 f1               stb  [,s++]
4172                         * }
4173 dd0d 39                  rts
4174                         * key_exe()
4175                         
4176                         * .global key_exe
4177                         key_exe: 
4178                         * { 
4179                         *    if(flag==0) beep();
4180 dd0e f6 70 0d            ldb  flag
4181 dd11 1d                  sex
4182 dd12 34 06               pshs d
4183 dd14 cc 00 00            ldd  #0
4184 dd17 10 a3 e1            cmpd ,s++
4185 dd1a 27 05               beq  *+7
4186 dd1c cc 00 00            ldd  #0
4187 dd1f 20 03               bra  *+5
4188 dd21 cc 00 01            ldd  #1
4189 dd24 10 83 00 00         cmpd #0
4190 dd28 10 27 00 03         lbeq cc141
4191 dd2c bd de 94            jsr beep
4192                         *   
4193                         *   
4194                         *  if( key>15)
4195                         cc141:  
4196 dd2f f6 70 09            ldb  key
4197 dd32 1d                  sex
4198 dd33 34 06               pshs d
4199 dd35 cc 00 0f            ldd  #15
4200 dd38 10 a3 e1            cmpd ,s++
4201 dd3b 2d 05               blt  *+7
4202 dd3d cc 00 00            ldd  #0
4203 dd40 20 03               bra  *+5
4204 dd42 cc 00 01            ldd  #1
4205 dd45 10 83 00 00         cmpd #0
4206 dd49 10 27 00 b5         lbeq cc142
4207                         * 	{
4208                         *  switch(key)
4209 dd4d f6 70 09            ldb  key
4210 dd50 1d                  sex
4211 dd51 7e dd be            jmp cc145
4212                         * 		{
4213                         *   case 0x13: key_address(); break;
4214                         cc146:  
4215 dd54 bd ce 22            jsr key_addr
4216 dd57 7e dd ff            jmp cc144
4217                         *   case 0x12: key_data(); break;
4218                         cc147:  
4219 dd5a bd ce 35            jsr key_data
4220 dd5d 7e dd ff            jmp cc144
4221                         *   case 0x17: key_plus(); break;
4222                         cc148:  
4223 dd60 bd ce 48            jsr key_plus
4224 dd63 7e dd ff            jmp cc144
4225                         *   case 0x16: key_minus(); break;
4226                         cc149:  
4227 dd66 bd cf 7b            jsr key_minu
4228 dd69 7e dd ff            jmp cc144
4229                         *   case 0x10: key_PC(); break;
4230                         cc150:  
4231 dd6c bd d0 6d            jsr key_PC
4232 dd6f 7e dd ff            jmp cc144
4233                         *   case 0x1b: key_go(); break;
4234                         cc151:  
4235 dd72 bd d1 45            jsr key_go
4236 dd75 7e dd ff            jmp cc144
4237                         *   case 0x11: key_reg(); break;
4238                         cc152:  
4239 dd78 bd d2 d6            jsr key_reg
4240 dd7b 7e dd ff            jmp cc144
4241                         *   case 0x18: insert(); break;
4242                         cc153:  
4243 dd7e bd d9 d7            jsr insert
4244 dd81 7e dd ff            jmp cc144
4245                         *   case 0x19: cut_byte(); break;
4246                         cc154:  
4247 dd84 bd da b3            jsr cut_byte
4248 dd87 7e dd ff            jmp cc144
4249                         *   case 0x15: flag = flag^1; break;
4250                         cc155:  
4251 dd8a f6 70 0d            ldb  flag
4252 dd8d 1d                  sex
4253 dd8e 34 06               pshs d
4254 dd90 cc 00 01            ldd  #1
4255 dd93 a8 e0               eora ,s+
4256 dd95 e8 e0               eorb ,s+
4257 dd97 f7 70 0d            stb  flag
4258 dd9a 7e dd ff            jmp cc144
4259                         *   case 0x1a: key_test(); break;
4260                         cc156:  
4261 dd9d bd db 6c            jsr key_test
4262 dda0 7e dd ff            jmp cc144
4263                         *   case 0x1d: key_cal(); break;
4264                         cc157:  
4265 dda3 bd dc 39            jsr key_cal
4266 dda6 7e dd ff            jmp cc144
4267                         *   case 0x1c: key_copy(); break;
4268                         cc158:  
4269 dda9 bd dc cb            jsr key_copy
4270 ddac 7e dd ff            jmp cc144
4271                         *   case 0x1e: key_dump(); break;
4272                         cc159:  
4273 ddaf bd e2 33            jsr key_dump
4274 ddb2 7e dd ff            jmp cc144
4275                         *   case 0x1f: key_load(); break;
4276                         cc160:  
4277 ddb5 bd e6 ef            jsr key_load
4278 ddb8 7e dd ff            jmp cc144
4279                         * /*  case 0x14: key_user(); break;  available for user key */
4280                         * 		}
4281 ddbb 7e dd ff            jmp cc144
4282                         cc145:  
4283 ddbe bd c0 f9            jsr ccswitch
4284 ddc1 dd 54 00 13         FDB cc146,19
4285 ddc5 dd 5a 00 12         FDB cc147,18
4286 ddc9 dd 60 00 17         FDB cc148,23
4287 ddcd dd 66 00 16         FDB cc149,22
4288 ddd1 dd 6c 00 10         FDB cc150,16
4289 ddd5 dd 72 00 1b         FDB cc151,27
4290 ddd9 dd 78 00 11         FDB cc152,17
4291 dddd dd 7e 00 18         FDB cc153,24
4292 dde1 dd 84 00 19         FDB cc154,25
4293 dde5 dd 8a 00 15         FDB cc155,21
4294 dde9 dd 9d 00 1a         FDB cc156,26
4295 dded dd a3 00 1d         FDB cc157,29
4296 ddf1 dd a9 00 1c         FDB cc158,28
4297 ddf5 dd af 00 1e         FDB cc159,30
4298 ddf9 dd b5 00 1f         FDB cc160,31
4299 ddfd 00 00               FDB 0
4300                         cc144:  
4301                         *   	}
4302                         *  else
4303 ddff 7e de 57            jmp cc161
4304                         cc142:  
4305                         * 	{
4306                         *   switch(state)
4307 de02 f6 70 24            ldb  state
4308 de05 1d                  sex
4309 de06 7e de 36            jmp cc164
4310                         * 		{
4311                         *   case 1: hex_address(); break;
4312                         cc165:  
4313 de09 bd d0 77            jsr hex_addr
4314 de0c 7e de 57            jmp cc163
4315                         *   case 2: data_hex(); break;
4316                         cc166:  
4317 de0f bd cf f8            jsr data_hex
4318 de12 7e de 57            jmp cc163
4319                         *   case 3: reg_display(); break;
4320                         cc167:  
4321 de15 bd d9 63            jsr reg_disp
4322 de18 7e de 57            jmp cc163
4323                         *   case 4: enter_num(); break;
4324                         cc168:  
4325 de1b bd dc 66            jsr enter_nu
4326 de1e 7e de 57            jmp cc163
4327                         *   case 5: enter_num(); break;
4328                         cc169:  
4329 de21 bd dc 66            jsr enter_nu
4330 de24 7e de 57            jmp cc163
4331                         *   case 6: enter_num(); break;
4332                         cc170:  
4333 de27 bd dc 66            jsr enter_nu
4334 de2a 7e de 57            jmp cc163
4335                         *   case 7: enter_num(); break;
4336                         cc171:  
4337 de2d bd dc 66            jsr enter_nu
4338 de30 7e de 57            jmp cc163
4339                         * 		}
4340 de33 7e de 57            jmp cc163
4341                         cc164:  
4342 de36 bd c0 f9            jsr ccswitch
4343 de39 de 09 00 01         FDB cc165,1
4344 de3d de 0f 00 02         FDB cc166,2
4345 de41 de 15 00 03         FDB cc167,3
4346 de45 de 1b 00 04         FDB cc168,4
4347 de49 de 21 00 05         FDB cc169,5
4348 de4d de 27 00 06         FDB cc170,6
4349 de51 de 2d 00 07         FDB cc171,7
4350 de55 00 00               FDB 0
4351                         cc163:  
4352                         * 	}
4353                         cc161:  
4354                         * }
4355 de57 39                  rts
4356                         * delay_beep()
4357                         
4358                         * .global delay_be
4359                         delay_be: 
4360                         * {
4361                         *    for(j=0; j<2; j++)
4362 de58 cc 00 00            ldd  #0
4363 de5b fd 70 02            std  j
4364                         cc174:  
4365 de5e fc 70 02            ldd  j
4366 de61 34 06               pshs d
4367 de63 cc 00 02            ldd  #2
4368 de66 10 a3 e1            cmpd ,s++
4369 de69 2e 05               bgt  *+7
4370 de6b cc 00 00            ldd  #0
4371 de6e 20 03               bra  *+5
4372 de70 cc 00 01            ldd  #1
4373 de73 10 83 00 00         cmpd #0
4374 de77 10 27 00 18         lbeq cc173
4375 de7b 7e de 8d            jmp cc175
4376                         cc172:  
4377 de7e fc 70 02            ldd  j
4378 de81 c3 00 01            addd #1
4379 de84 fd 70 02            std  j
4380 de87 83 00 01            subd #1
4381 de8a 7e de 5e            jmp cc174
4382                         cc175:  
4383                         *    continue;
4384 de8d 7e de 7e            jmp cc172
4385 de90 7e de 7e            jmp cc172
4386                         cc173:  
4387                         * }
4388 de93 39                  rts
4389                         * beep()
4390                         
4391                         * .global beep
4392                         beep: 
4393                         * {
4394                         * 	char x;
4395                         * 	
4396                         *    *port2=0;   
4397 de94 32 7f               leas -1,s
4398 de96 fc 70 3d            ldd  port2
4399 de99 34 06               pshs d
4400 de9b cc 00 00            ldd  #0
4401 de9e e7 f1               stb  [,s++]
4402                         *    for(x=0; x<60; x++)
4403 dea0 31 e4               leay 0,s
4404 dea2 1f 20               tfr  y,d
4405 dea4 34 06               pshs d
4406 dea6 cc 00 00            ldd  #0
4407 dea9 e7 f1               stb  [,s++]
4408                         cc178:  
4409 deab 31 e4               leay 0,s
4410 dead 1f 20               tfr  y,d
4411 deaf 34 06               pshs d
4412 deb1 e6 f1               ldb  [,s++]
4413 deb3 1d                  sex
4414 deb4 34 06               pshs d
4415 deb6 cc 00 3c            ldd  #60
4416 deb9 10 a3 e1            cmpd ,s++
4417 debc 2e 05               bgt  *+7
4418 debe cc 00 00            ldd  #0
4419 dec1 20 03               bra  *+5
4420 dec3 cc 00 01            ldd  #1
4421 dec6 10 83 00 00         cmpd #0
4422 deca 10 27 00 38         lbeq cc177
4423 dece 7e de e7            jmp cc179
4424                         cc176:  
4425 ded1 31 e4               leay 0,s
4426 ded3 1f 20               tfr  y,d
4427 ded5 34 06               pshs d
4428 ded7 34 06               pshs d
4429 ded9 e6 f1               ldb  [,s++]
4430 dedb 1d                  sex
4431 dedc c3 00 01            addd #1
4432 dedf e7 f1               stb  [,s++]
4433 dee1 83 00 01            subd #1
4434 dee4 7e de ab            jmp cc178
4435                         cc179:  
4436                         *    {
4437                         *    *port1 = ~0x80;
4438 dee7 fc 70 3f            ldd  port1
4439 deea 34 06               pshs d
4440 deec cc 00 80            ldd  #128
4441 deef 43                  coma
4442 def0 53                  comb
4443 def1 e7 f1               stb  [,s++]
4444                         *     delay_beep();
4445 def3 bd de 58            jsr delay_be
4446                         *    *port1 = 0xff;
4447 def6 fc 70 3f            ldd  port1
4448 def9 34 06               pshs d
4449 defb cc 00 ff            ldd  #255
4450 defe e7 f1               stb  [,s++]
4451                         *     delay_beep();
4452 df00 bd de 58            jsr delay_be
4453                         *    }
4454 df03 7e de d1            jmp cc176
4455                         cc177:  
4456                         * }
4457 df06 32 61               leas 1,s
4458 df08 39                  rts
4459                         * scan1()
4460                         
4461                         * .global scan1
4462                         scan1: 
4463                         * {
4464                         *     while( scan() != -1)
4465                         cc180:  
4466 df09 bd c8 96            jsr scan
4467 df0c 34 06               pshs d
4468 df0e cc 00 01            ldd  #1
4469 df11 43                  coma
4470 df12 53                  comb
4471 df13 c3 00 01            addd #1
4472 df16 10 a3 e1            cmpd ,s++
4473 df19 26 05               bne   *+7
4474 df1b cc 00 00            ldd  #0
4475 df1e 20 03               bra  *+5
4476 df20 cc 00 01            ldd  #1
4477 df23 10 83 00 00         cmpd #0
4478 df27 10 27 00 06         lbeq cc181
4479                         *       continue;
4480 df2b 7e df 09            jmp cc180
4481 df2e 7e df 09            jmp cc180
4482                         cc181:  
4483                         *    delay_ms(3);
4484 df31 cc 00 03            ldd  #3
4485 df34 34 06               pshs d
4486 df36 bd c8 53            jsr delay_ms
4487 df39 32 62               leas 2,s
4488                         *    while(scan() == -1)
4489                         cc182:  
4490 df3b bd c8 96            jsr scan
4491 df3e 34 06               pshs d
4492 df40 cc 00 01            ldd  #1
4493 df43 43                  coma
4494 df44 53                  comb
4495 df45 c3 00 01            addd #1
4496 df48 10 a3 e1            cmpd ,s++
4497 df4b 27 05               beq  *+7
4498 df4d cc 00 00            ldd  #0
4499 df50 20 03               bra  *+5
4500 df52 cc 00 01            ldd  #1
4501 df55 10 83 00 00         cmpd #0
4502 df59 10 27 00 06         lbeq cc183
4503                         *       continue;
4504 df5d 7e df 3b            jmp cc182
4505 df60 7e df 3b            jmp cc182
4506                         cc183:  
4507                         *    delay_ms(3);
4508 df63 cc 00 03            ldd  #3
4509 df66 34 06               pshs d
4510 df68 bd c8 53            jsr delay_ms
4511 df6b 32 62               leas 2,s
4512                         *   
4513                         *    	key = scan();
4514 df6d bd c8 96            jsr scan
4515 df70 f7 70 09            stb  key
4516                         * 	key = key_code(key);  
4517 df73 f6 70 09            ldb  key
4518 df76 1d                  sex
4519 df77 34 06               pshs d
4520 df79 bd c3 21            jsr key_code
4521 df7c 32 62               leas 2,s
4522 df7e f7 70 09            stb  key
4523                         *    key_exe();
4524 df81 bd dd 0e            jsr key_exe
4525                         *   
4526                         * }
4527 df84 39                  rts
4528                         * /* ACIA with 4.9152MHz CPU XTAL, bit rate is 19200, 8n1 */
4529                         * initacia()      
4530                         
4531                         * .global initacia
4532                         initacia: 
4533                         * {
4534                         *         char dummy, *acia, reset, baudrate;
4535                         *         acia = ACIAPORT;
4536 df85 32 7b               leas -5,s
4537 df87 31 62               leay 2,s
4538 df89 1f 20               tfr  y,d
4539 df8b 34 06               pshs d
4540 df8d cc a0 00            ldd  #-24576
4541 df90 ed f1               std  [,s++]
4542                         *         baudrate = 0x16;
4543 df92 31 e4               leay 0,s
4544 df94 1f 20               tfr  y,d
4545 df96 34 06               pshs d
4546 df98 cc 00 16            ldd  #22
4547 df9b e7 f1               stb  [,s++]
4548                         *         reset = 3;
4549 df9d 31 61               leay 1,s
4550 df9f 1f 20               tfr  y,d
4551 dfa1 34 06               pshs d
4552 dfa3 cc 00 03            ldd  #3
4553 dfa6 e7 f1               stb  [,s++]
4554                         *         *(acia) = reset;
4555 dfa8 31 62               leay 2,s
4556 dfaa 1f 20               tfr  y,d
4557 dfac 34 06               pshs d
4558 dfae ec f1               ldd  [,s++]
4559 dfb0 34 06               pshs d
4560 dfb2 31 63               leay 3,s
4561 dfb4 1f 20               tfr  y,d
4562 dfb6 34 06               pshs d
4563 dfb8 e6 f1               ldb  [,s++]
4564 dfba 1d                  sex
4565 dfbb e7 f1               stb  [,s++]
4566                         *         *(acia) = baudrate;
4567 dfbd 31 62               leay 2,s
4568 dfbf 1f 20               tfr  y,d
4569 dfc1 34 06               pshs d
4570 dfc3 ec f1               ldd  [,s++]
4571 dfc5 34 06               pshs d
4572 dfc7 31 62               leay 2,s
4573 dfc9 1f 20               tfr  y,d
4574 dfcb 34 06               pshs d
4575 dfcd e6 f1               ldb  [,s++]
4576 dfcf 1d                  sex
4577 dfd0 e7 f1               stb  [,s++]
4578                         *         dummy = *(acia+1);      /*clear RBR*/
4579 dfd2 31 64               leay 4,s
4580 dfd4 1f 20               tfr  y,d
4581 dfd6 34 06               pshs d
4582 dfd8 31 64               leay 4,s
4583 dfda 1f 20               tfr  y,d
4584 dfdc 34 06               pshs d
4585 dfde ec f1               ldd  [,s++]
4586 dfe0 34 06               pshs d
4587 dfe2 cc 00 01            ldd  #1
4588 dfe5 e3 e1               addd ,s++
4589 dfe7 34 06               pshs d
4590 dfe9 e6 f1               ldb  [,s++]
4591 dfeb 1d                  sex
4592 dfec e7 f1               stb  [,s++]
4593                         * }
4594 dfee 32 65               leas 5,s
4595 dff0 39                  rts
4596                         * putchar(ch)
4597                         
4598                         * .global putchar
4599                         putchar: 
4600                         * char ch;
4601                         * {
4602                         *         char *acia;
4603                         *         acia = ACIAPORT;
4604 dff1 32 7e               leas -2,s
4605 dff3 31 e4               leay 0,s
4606 dff5 1f 20               tfr  y,d
4607 dff7 34 06               pshs d
4608 dff9 cc a0 00            ldd  #-24576
4609 dffc ed f1               std  [,s++]
4610                         *         while( ((*acia) & 0x02) == 0)    /* wait on TDRE */
4611                         cc184:  
4612 dffe 31 e4               leay 0,s
4613 e000 1f 20               tfr  y,d
4614 e002 34 06               pshs d
4615 e004 ec f1               ldd  [,s++]
4616 e006 34 06               pshs d
4617 e008 e6 f1               ldb  [,s++]
4618 e00a 1d                  sex
4619 e00b 34 06               pshs d
4620 e00d cc 00 02            ldd  #2
4621 e010 a4 e0               anda ,s+
4622 e012 e4 e0               andb ,s+
4623 e014 34 06               pshs d
4624 e016 cc 00 00            ldd  #0
4625 e019 10 a3 e1            cmpd ,s++
4626 e01c 27 05               beq  *+7
4627 e01e cc 00 00            ldd  #0
4628 e021 20 03               bra  *+5
4629 e023 cc 00 01            ldd  #1
4630 e026 10 83 00 00         cmpd #0
4631 e02a 10 27 00 06         lbeq cc185
4632                         *           continue;
4633 e02e 7e df fe            jmp cc184
4634 e031 7e df fe            jmp cc184
4635                         cc185:  
4636                         *         *(acia+1) = ch;
4637 e034 31 e4               leay 0,s
4638 e036 1f 20               tfr  y,d
4639 e038 34 06               pshs d
4640 e03a ec f1               ldd  [,s++]
4641 e03c 34 06               pshs d
4642 e03e cc 00 01            ldd  #1
4643 e041 e3 e1               addd ,s++
4644 e043 34 06               pshs d
4645 e045 31 67               leay 7,s
4646 e047 1f 20               tfr  y,d
4647 e049 34 06               pshs d
4648 e04b e6 f1               ldb  [,s++]
4649 e04d 1d                  sex
4650 e04e e7 f1               stb  [,s++]
4651                         *       
4652                         * }
4653 e050 32 62               leas 2,s
4654 e052 39                  rts
4655                         * puts(s)  
4656                         
4657                         * .global puts
4658                         puts: 
4659                         * char *s;
4660                         * {
4661                         *         while( *s ) {
4662                         cc186:  
4663 e053 31 62               leay 2,s
4664 e055 1f 20               tfr  y,d
4665 e057 34 06               pshs d
4666 e059 ec f1               ldd  [,s++]
4667 e05b 34 06               pshs d
4668 e05d e6 f1               ldb  [,s++]
4669 e05f 1d                  sex
4670 e060 10 83 00 00         cmpd #0
4671 e064 10 27 00 29         lbeq cc187
4672                         *                putchar(*s);
4673 e068 31 62               leay 2,s
4674 e06a 1f 20               tfr  y,d
4675 e06c 34 06               pshs d
4676 e06e ec f1               ldd  [,s++]
4677 e070 34 06               pshs d
4678 e072 e6 f1               ldb  [,s++]
4679 e074 1d                  sex
4680 e075 34 06               pshs d
4681 e077 bd df f1            jsr putchar
4682 e07a 32 62               leas 2,s
4683                         *                s++;
4684 e07c 31 62               leay 2,s
4685 e07e 1f 20               tfr  y,d
4686 e080 34 06               pshs d
4687 e082 34 06               pshs d
4688 e084 ec f1               ldd  [,s++]
4689 e086 c3 00 01            addd #1
4690 e089 ed f1               std  [,s++]
4691 e08b 83 00 01            subd #1
4692                         *         }
4693 e08e 7e e0 53            jmp cc186
4694                         cc187:  
4695                         *        
4696                         * }
4697 e091 39                  rts
4698                         * getchar()
4699                         
4700                         * .global getchar
4701                         getchar: 
4702                         * {
4703                         * 	char ch;
4704                         * 	char *acia;
4705                         *   	
4706                         * 	acia=ACIAPORT;
4707 e092 32 7d               leas -3,s
4708 e094 31 e4               leay 0,s
4709 e096 1f 20               tfr  y,d
4710 e098 34 06               pshs d
4711 e09a cc a0 00            ldd  #-24576
4712 e09d ed f1               std  [,s++]
4713                         * 	while((*acia&1)==0)
4714                         cc188:  
4715 e09f 31 e4               leay 0,s
4716 e0a1 1f 20               tfr  y,d
4717 e0a3 34 06               pshs d
4718 e0a5 ec f1               ldd  [,s++]
4719 e0a7 34 06               pshs d
4720 e0a9 e6 f1               ldb  [,s++]
4721 e0ab 1d                  sex
4722 e0ac 34 06               pshs d
4723 e0ae cc 00 01            ldd  #1
4724 e0b1 a4 e0               anda ,s+
4725 e0b3 e4 e0               andb ,s+
4726 e0b5 34 06               pshs d
4727 e0b7 cc 00 00            ldd  #0
4728 e0ba 10 a3 e1            cmpd ,s++
4729 e0bd 27 05               beq  *+7
4730 e0bf cc 00 00            ldd  #0
4731 e0c2 20 03               bra  *+5
4732 e0c4 cc 00 01            ldd  #1
4733 e0c7 10 83 00 00         cmpd #0
4734 e0cb 10 27 00 06         lbeq cc189
4735                         * 		continue;
4736 e0cf 7e e0 9f            jmp cc188
4737 e0d2 7e e0 9f            jmp cc188
4738                         cc189:  
4739                         * 	
4740                         * 	   ch = *(acia+1);           /*read 0xA001*/
4741 e0d5 31 62               leay 2,s
4742 e0d7 1f 20               tfr  y,d
4743 e0d9 34 06               pshs d
4744 e0db 31 62               leay 2,s
4745 e0dd 1f 20               tfr  y,d
4746 e0df 34 06               pshs d
4747 e0e1 ec f1               ldd  [,s++]
4748 e0e3 34 06               pshs d
4749 e0e5 cc 00 01            ldd  #1
4750 e0e8 e3 e1               addd ,s++
4751 e0ea 34 06               pshs d
4752 e0ec e6 f1               ldb  [,s++]
4753 e0ee 1d                  sex
4754 e0ef e7 f1               stb  [,s++]
4755                         * 	   return ch;
4756 e0f1 31 62               leay 2,s
4757 e0f3 1f 20               tfr  y,d
4758 e0f5 34 06               pshs d
4759 e0f7 e6 f1               ldb  [,s++]
4760 e0f9 1d                  sex
4761 e0fa 32 63               leas 3,s
4762 e0fc 39                  rts
4763                         * }
4764                         * newline()
4765                         
4766                         * .global newline
4767                         newline: 
4768                         * {
4769                         * 	putchar(0x0a);
4770 e0fd cc 00 0a            ldd  #10
4771 e100 34 06               pshs d
4772 e102 bd df f1            jsr putchar
4773 e105 32 62               leas 2,s
4774                         * 	putchar(0x0d);
4775 e107 cc 00 0d            ldd  #13
4776 e10a 34 06               pshs d
4777 e10c bd df f1            jsr putchar
4778 e10f 32 62               leas 2,s
4779                         * }
4780 e111 39                  rts
4781                         * send_hex(n)
4782                         
4783                         * .global send_hex
4784                         send_hex: 
4785                         * char n;
4786                         * {
4787                         *    k = n>>4;
4788 e112 31 63               leay 3,s
4789 e114 1f 20               tfr  y,d
4790 e116 34 06               pshs d
4791 e118 e6 f1               ldb  [,s++]
4792 e11a 1d                  sex
4793 e11b 34 06               pshs d
4794 e11d cc 00 04            ldd  #4
4795 e120 5a                  decb
4796 e121 2d 06               blt  *+8
4797 e123 64 e4               lsr  ,s
4798 e125 66 61               ror  1,s
4799 e127 20 f7               bra *-7
4800 e129 35 06               puls d
4801 e12b f7 70 05            stb  k
4802                         *    k = k&0xf;
4803 e12e f6 70 05            ldb  k
4804 e131 1d                  sex
4805 e132 34 06               pshs d
4806 e134 cc 00 0f            ldd  #15
4807 e137 a4 e0               anda ,s+
4808 e139 e4 e0               andb ,s+
4809 e13b f7 70 05            stb  k
4810                         *    if (k>9) putchar(k+0x37); else putchar(k+0x30);
4811 e13e f6 70 05            ldb  k
4812 e141 1d                  sex
4813 e142 34 06               pshs d
4814 e144 cc 00 09            ldd  #9
4815 e147 10 a3 e1            cmpd ,s++
4816 e14a 2d 05               blt  *+7
4817 e14c cc 00 00            ldd  #0
4818 e14f 20 03               bra  *+5
4819 e151 cc 00 01            ldd  #1
4820 e154 10 83 00 00         cmpd #0
4821 e158 10 27 00 15         lbeq cc190
4822 e15c f6 70 05            ldb  k
4823 e15f 1d                  sex
4824 e160 34 06               pshs d
4825 e162 cc 00 37            ldd  #55
4826 e165 e3 e1               addd ,s++
4827 e167 34 06               pshs d
4828 e169 bd df f1            jsr putchar
4829 e16c 32 62               leas 2,s
4830 e16e 7e e1 83            jmp cc191
4831                         cc190:  
4832 e171 f6 70 05            ldb  k
4833 e174 1d                  sex
4834 e175 34 06               pshs d
4835 e177 cc 00 30            ldd  #48
4836 e17a e3 e1               addd ,s++
4837 e17c 34 06               pshs d
4838 e17e bd df f1            jsr putchar
4839 e181 32 62               leas 2,s
4840                         cc191:  
4841                         *    k= n&0xf;
4842 e183 31 63               leay 3,s
4843 e185 1f 20               tfr  y,d
4844 e187 34 06               pshs d
4845 e189 e6 f1               ldb  [,s++]
4846 e18b 1d                  sex
4847 e18c 34 06               pshs d
4848 e18e cc 00 0f            ldd  #15
4849 e191 a4 e0               anda ,s+
4850 e193 e4 e0               andb ,s+
4851 e195 f7 70 05            stb  k
4852                         *    if (k>9) putchar(k+0x37); else putchar(k+0x30);
4853 e198 f6 70 05            ldb  k
4854 e19b 1d                  sex
4855 e19c 34 06               pshs d
4856 e19e cc 00 09            ldd  #9
4857 e1a1 10 a3 e1            cmpd ,s++
4858 e1a4 2d 05               blt  *+7
4859 e1a6 cc 00 00            ldd  #0
4860 e1a9 20 03               bra  *+5
4861 e1ab cc 00 01            ldd  #1
4862 e1ae 10 83 00 00         cmpd #0
4863 e1b2 10 27 00 15         lbeq cc192
4864 e1b6 f6 70 05            ldb  k
4865 e1b9 1d                  sex
4866 e1ba 34 06               pshs d
4867 e1bc cc 00 37            ldd  #55
4868 e1bf e3 e1               addd ,s++
4869 e1c1 34 06               pshs d
4870 e1c3 bd df f1            jsr putchar
4871 e1c6 32 62               leas 2,s
4872 e1c8 7e e1 dd            jmp cc193
4873                         cc192:  
4874 e1cb f6 70 05            ldb  k
4875 e1ce 1d                  sex
4876 e1cf 34 06               pshs d
4877 e1d1 cc 00 30            ldd  #48
4878 e1d4 e3 e1               addd ,s++
4879 e1d6 34 06               pshs d
4880 e1d8 bd df f1            jsr putchar
4881 e1db 32 62               leas 2,s
4882                         cc193:  
4883                         * }
4884 e1dd 39                  rts
4885                         * send_word_hex(n)
4886                         
4887                         * .global send_wor
4888                         send_wor: 
4889                         * int n;
4890                         * {
4891                         *    temp16 = n>>8;
4892 e1de 31 62               leay 2,s
4893 e1e0 1f 20               tfr  y,d
4894 e1e2 34 06               pshs d
4895 e1e4 ec f1               ldd  [,s++]
4896 e1e6 34 06               pshs d
4897 e1e8 cc 00 08            ldd  #8
4898 e1eb 5a                  decb
4899 e1ec 2d 06               blt  *+8
4900 e1ee 64 e4               lsr  ,s
4901 e1f0 66 61               ror  1,s
4902 e1f2 20 f7               bra *-7
4903 e1f4 35 06               puls d
4904 e1f6 fd 70 14            std  temp16
4905                         *    k = temp16&0xff;
4906 e1f9 fc 70 14            ldd  temp16
4907 e1fc 34 06               pshs d
4908 e1fe cc 00 ff            ldd  #255
4909 e201 a4 e0               anda ,s+
4910 e203 e4 e0               andb ,s+
4911 e205 f7 70 05            stb  k
4912                         *    send_hex(k);
4913 e208 f6 70 05            ldb  k
4914 e20b 1d                  sex
4915 e20c 34 06               pshs d
4916 e20e bd e1 12            jsr send_hex
4917 e211 32 62               leas 2,s
4918                         *    k = n&0xff;
4919 e213 31 62               leay 2,s
4920 e215 1f 20               tfr  y,d
4921 e217 34 06               pshs d
4922 e219 ec f1               ldd  [,s++]
4923 e21b 34 06               pshs d
4924 e21d cc 00 ff            ldd  #255
4925 e220 a4 e0               anda ,s+
4926 e222 e4 e0               andb ,s+
4927 e224 f7 70 05            stb  k
4928                         *    send_hex(k);
4929 e227 f6 70 05            ldb  k
4930 e22a 1d                  sex
4931 e22b 34 06               pshs d
4932 e22d bd e1 12            jsr send_hex
4933 e230 32 62               leas 2,s
4934                         * }
4935 e232 39                  rts
4936                         * key_dump()
4937                         
4938                         * .global key_dump
4939                         key_dump: 
4940                         * {
4941                         *    int j,p;
4942                         *    dptr = PC;
4943 e233 32 7c               leas -4,s
4944 e235 fc 70 16            ldd  PC
4945 e238 fd 70 43            std  dptr
4946                         *    for(j=0; j<16; j++)
4947 e23b 31 62               leay 2,s
4948 e23d 1f 20               tfr  y,d
4949 e23f 34 06               pshs d
4950 e241 cc 00 00            ldd  #0
4951 e244 ed f1               std  [,s++]
4952                         cc196:  
4953 e246 31 62               leay 2,s
4954 e248 1f 20               tfr  y,d
4955 e24a 34 06               pshs d
4956 e24c ec f1               ldd  [,s++]
4957 e24e 34 06               pshs d
4958 e250 cc 00 10            ldd  #16
4959 e253 10 a3 e1            cmpd ,s++
4960 e256 2e 05               bgt  *+7
4961 e258 cc 00 00            ldd  #0
4962 e25b 20 03               bra  *+5
4963 e25d cc 00 01            ldd  #1
4964 e260 10 83 00 00         cmpd #0
4965 e264 10 27 01 7a         lbeq cc195
4966 e268 7e e2 80            jmp cc197
4967                         cc194:  
4968 e26b 31 62               leay 2,s
4969 e26d 1f 20               tfr  y,d
4970 e26f 34 06               pshs d
4971 e271 34 06               pshs d
4972 e273 ec f1               ldd  [,s++]
4973 e275 c3 00 01            addd #1
4974 e278 ed f1               std  [,s++]
4975 e27a 83 00 01            subd #1
4976 e27d 7e e2 46            jmp cc196
4977                         cc197:  
4978                         *    {
4979                         *      newline();
4980 e280 bd e0 fd            jsr newline
4981                         *      send_word_hex(dptr);
4982 e283 fc 70 43            ldd  dptr
4983 e286 34 06               pshs d
4984 e288 bd e1 de            jsr send_wor
4985 e28b 32 62               leas 2,s
4986                         *      putchar(':');
4987 e28d cc 00 3a            ldd  #58
4988 e290 34 06               pshs d
4989 e292 bd df f1            jsr putchar
4990 e295 32 62               leas 2,s
4991                         *         for(p=0; p<16; p++)
4992 e297 31 e4               leay 0,s
4993 e299 1f 20               tfr  y,d
4994 e29b 34 06               pshs d
4995 e29d cc 00 00            ldd  #0
4996 e2a0 ed f1               std  [,s++]
4997                         cc200:  
4998 e2a2 31 e4               leay 0,s
4999 e2a4 1f 20               tfr  y,d
5000 e2a6 34 06               pshs d
5001 e2a8 ec f1               ldd  [,s++]
5002 e2aa 34 06               pshs d
5003 e2ac cc 00 10            ldd  #16
5004 e2af 10 a3 e1            cmpd ,s++
5005 e2b2 2e 05               bgt  *+7
5006 e2b4 cc 00 00            ldd  #0
5007 e2b7 20 03               bra  *+5
5008 e2b9 cc 00 01            ldd  #1
5009 e2bc 10 83 00 00         cmpd #0
5010 e2c0 10 27 00 40         lbeq cc199
5011 e2c4 7e e2 dc            jmp cc201
5012                         cc198:  
5013 e2c7 31 e4               leay 0,s
5014 e2c9 1f 20               tfr  y,d
5015 e2cb 34 06               pshs d
5016 e2cd 34 06               pshs d
5017 e2cf ec f1               ldd  [,s++]
5018 e2d1 c3 00 01            addd #1
5019 e2d4 ed f1               std  [,s++]
5020 e2d6 83 00 01            subd #1
5021 e2d9 7e e2 a2            jmp cc200
5022                         cc201:  
5023                         *         {
5024                         *          send_hex(*(dptr+p));
5025 e2dc fc 70 43            ldd  dptr
5026 e2df 34 06               pshs d
5027 e2e1 31 62               leay 2,s
5028 e2e3 1f 20               tfr  y,d
5029 e2e5 34 06               pshs d
5030 e2e7 ec f1               ldd  [,s++]
5031 e2e9 e3 e1               addd ,s++
5032 e2eb 34 06               pshs d
5033 e2ed e6 f1               ldb  [,s++]
5034 e2ef 1d                  sex
5035 e2f0 34 06               pshs d
5036 e2f2 bd e1 12            jsr send_hex
5037 e2f5 32 62               leas 2,s
5038                         *          putchar(0x20);
5039 e2f7 cc 00 20            ldd  #32
5040 e2fa 34 06               pshs d
5041 e2fc bd df f1            jsr putchar
5042 e2ff 32 62               leas 2,s
5043                         *          }
5044 e301 7e e2 c7            jmp cc198
5045                         cc199:  
5046                         *         putchar(0x20);
5047 e304 cc 00 20            ldd  #32
5048 e307 34 06               pshs d
5049 e309 bd df f1            jsr putchar
5050 e30c 32 62               leas 2,s
5051                         *         for (p=0; p<16; p++)
5052 e30e 31 e4               leay 0,s
5053 e310 1f 20               tfr  y,d
5054 e312 34 06               pshs d
5055 e314 cc 00 00            ldd  #0
5056 e317 ed f1               std  [,s++]
5057                         cc204:  
5058 e319 31 e4               leay 0,s
5059 e31b 1f 20               tfr  y,d
5060 e31d 34 06               pshs d
5061 e31f ec f1               ldd  [,s++]
5062 e321 34 06               pshs d
5063 e323 cc 00 10            ldd  #16
5064 e326 10 a3 e1            cmpd ,s++
5065 e329 2e 05               bgt  *+7
5066 e32b cc 00 00            ldd  #0
5067 e32e 20 03               bra  *+5
5068 e330 cc 00 01            ldd  #1
5069 e333 10 83 00 00         cmpd #0
5070 e337 10 27 00 91         lbeq cc203
5071 e33b 7e e3 53            jmp cc205
5072                         cc202:  
5073 e33e 31 e4               leay 0,s
5074 e340 1f 20               tfr  y,d
5075 e342 34 06               pshs d
5076 e344 34 06               pshs d
5077 e346 ec f1               ldd  [,s++]
5078 e348 c3 00 01            addd #1
5079 e34b ed f1               std  [,s++]
5080 e34d 83 00 01            subd #1
5081 e350 7e e3 19            jmp cc204
5082                         cc205:  
5083                         *         {
5084                         *           q=*(dptr+p);
5085 e353 fc 70 43            ldd  dptr
5086 e356 34 06               pshs d
5087 e358 31 62               leay 2,s
5088 e35a 1f 20               tfr  y,d
5089 e35c 34 06               pshs d
5090 e35e ec f1               ldd  [,s++]
5091 e360 e3 e1               addd ,s++
5092 e362 34 06               pshs d
5093 e364 e6 f1               ldb  [,s++]
5094 e366 1d                  sex
5095 e367 f7 70 07            stb  q
5096                         *          if(q >= 0x20 && q < 0x80) putchar(q); 
5097 e36a f6 70 07            ldb  q
5098 e36d 1d                  sex
5099 e36e 34 06               pshs d
5100 e370 cc 00 20            ldd  #32
5101 e373 10 a3 e1            cmpd ,s++
5102 e376 2f 05               ble  *+7
5103 e378 cc 00 00            ldd  #0
5104 e37b 20 03               bra  *+5
5105 e37d cc 00 01            ldd  #1
5106 e380 10 83 00 00         cmpd #0
5107 e384 10 27 00 21         lbeq cc207 ;_  instruction flagged for non optimize
5108 e388 f6 70 07            ldb  q
5109 e38b 1d                  sex
5110 e38c 34 06               pshs d
5111 e38e cc 00 80            ldd  #128
5112 e391 10 a3 e1            cmpd ,s++
5113 e394 2e 05               bgt  *+7
5114 e396 cc 00 00            ldd  #0
5115 e399 20 03               bra  *+5
5116 e39b cc 00 01            ldd  #1
5117 e39e 10 83 00 00         cmpd #0
5118 e3a2 10 27 00 03         lbeq cc207 ;_  instruction flagged for non optimize
5119 e3a6 cc 00 01            ldd  #1
5120                         cc207:  
5121 e3a9 10 83 00 00         cmpd #0
5122 e3ad 10 27 00 0e         lbeq cc206
5123 e3b1 f6 70 07            ldb  q
5124 e3b4 1d                  sex
5125 e3b5 34 06               pshs d
5126 e3b7 bd df f1            jsr putchar
5127 e3ba 32 62               leas 2,s
5128                         *           else putchar('.');
5129 e3bc 7e e3 c9            jmp cc208
5130                         cc206:  
5131 e3bf cc 00 2e            ldd  #46
5132 e3c2 34 06               pshs d
5133 e3c4 bd df f1            jsr putchar
5134 e3c7 32 62               leas 2,s
5135                         cc208:  
5136                         *         
5137                         *         }
5138 e3c9 7e e3 3e            jmp cc202
5139                         cc203:  
5140                         *          dptr+=16;
5141 e3cc cc 70 43            ldd  #dptr
5142 e3cf 34 06               pshs d
5143 e3d1 cc 00 10            ldd  #16
5144 e3d4 ae f4               ldx  [,s]
5145 e3d6 34 10               pshs x
5146 e3d8 e3 e1               addd ,s++
5147 e3da fd 70 43            std  dptr
5148                         *    }
5149 e3dd 32 62               leas 2,s
5150 e3df 7e e2 6b            jmp cc194
5151                         cc195:  
5152                         *    newline();
5153 e3e2 bd e0 fd            jsr newline
5154                         *    PC = dptr;   
5155 e3e5 fc 70 43            ldd  dptr
5156 e3e8 fd 70 16            std  PC
5157                         *    key_address(); 
5158 e3eb bd ce 22            jsr key_addr
5159                         * }
5160 e3ee 32 64               leas 4,s
5161 e3f0 39                  rts
5162                         * nibble2hex(c)
5163                         
5164                         * .global nibble2h
5165                         nibble2h: 
5166                         * char c;
5167                         * {
5168                         * 	char n;
5169                         *   if(c<0x40) return (c-0x30);
5170 e3f1 32 7f               leas -1,s
5171 e3f3 31 64               leay 4,s
5172 e3f5 1f 20               tfr  y,d
5173 e3f7 34 06               pshs d
5174 e3f9 e6 f1               ldb  [,s++]
5175 e3fb 1d                  sex
5176 e3fc 34 06               pshs d
5177 e3fe cc 00 40            ldd  #64
5178 e401 10 a3 e1            cmpd ,s++
5179 e404 2e 05               bgt  *+7
5180 e406 cc 00 00            ldd  #0
5181 e409 20 03               bra  *+5
5182 e40b cc 00 01            ldd  #1
5183 e40e 10 83 00 00         cmpd #0
5184 e412 10 27 00 19         lbeq cc209
5185 e416 31 64               leay 4,s
5186 e418 1f 20               tfr  y,d
5187 e41a 34 06               pshs d
5188 e41c e6 f1               ldb  [,s++]
5189 e41e 1d                  sex
5190 e41f 34 06               pshs d
5191 e421 cc 00 30            ldd  #48
5192 e424 35 10               puls x
5193 e426 34 06               pshs d
5194 e428 1f 10               tfr  x,d
5195 e42a a3 e1               subd ,s++
5196 e42c 32 61               leas 1,s
5197 e42e 39                  rts
5198                         *   else return (c-0x37);
5199                         cc209:  
5200 e42f 31 64               leay 4,s
5201 e431 1f 20               tfr  y,d
5202 e433 34 06               pshs d
5203 e435 e6 f1               ldb  [,s++]
5204 e437 1d                  sex
5205 e438 34 06               pshs d
5206 e43a cc 00 37            ldd  #55
5207 e43d 35 10               puls x
5208 e43f 34 06               pshs d
5209 e441 1f 10               tfr  x,d
5210 e443 a3 e1               subd ,s++
5211 e445 32 61               leas 1,s
5212 e447 39                  rts
5213                         cc210:  
5214                         * }
5215 e448 32 61               leas 1,s
5216 e44a 39                  rts
5217                         * gethex()
5218                         
5219                         * .global gethex
5220                         gethex: 
5221                         * {
5222                         *   char a,b;
5223                         *   a = getchar();
5224 e44b 32 7e               leas -2,s
5225 e44d 31 61               leay 1,s
5226 e44f 1f 20               tfr  y,d
5227 e451 34 06               pshs d
5228 e453 bd e0 92            jsr getchar
5229 e456 e7 f1               stb  [,s++]
5230                         *   b = getchar();
5231 e458 31 e4               leay 0,s
5232 e45a 1f 20               tfr  y,d
5233 e45c 34 06               pshs d
5234 e45e bd e0 92            jsr getchar
5235 e461 e7 f1               stb  [,s++]
5236                         *   
5237                         *   a = nibble2hex(a)<<4;
5238 e463 31 61               leay 1,s
5239 e465 1f 20               tfr  y,d
5240 e467 34 06               pshs d
5241 e469 31 63               leay 3,s
5242 e46b 1f 20               tfr  y,d
5243 e46d 34 06               pshs d
5244 e46f e6 f1               ldb  [,s++]
5245 e471 1d                  sex
5246 e472 34 06               pshs d
5247 e474 bd e3 f1            jsr nibble2h
5248 e477 32 62               leas 2,s
5249 e479 34 06               pshs d
5250 e47b cc 00 04            ldd  #4
5251 e47e 5a                  decb
5252 e47f 2d 06               blt  *+8
5253 e481 68 61               asl  1,s
5254 e483 69 e4               rol  ,s
5255 e485 20 f7               bra  *-7
5256 e487 35 06               puls d
5257 e489 e7 f1               stb  [,s++]
5258                         *   b = nibble2hex(b);
5259 e48b 31 e4               leay 0,s
5260 e48d 1f 20               tfr  y,d
5261 e48f 34 06               pshs d
5262 e491 31 62               leay 2,s
5263 e493 1f 20               tfr  y,d
5264 e495 34 06               pshs d
5265 e497 e6 f1               ldb  [,s++]
5266 e499 1d                  sex
5267 e49a 34 06               pshs d
5268 e49c bd e3 f1            jsr nibble2h
5269 e49f 32 62               leas 2,s
5270 e4a1 e7 f1               stb  [,s++]
5271                         *   a = a|b;
5272 e4a3 31 61               leay 1,s
5273 e4a5 1f 20               tfr  y,d
5274 e4a7 34 06               pshs d
5275 e4a9 31 63               leay 3,s
5276 e4ab 1f 20               tfr  y,d
5277 e4ad 34 06               pshs d
5278 e4af e6 f1               ldb  [,s++]
5279 e4b1 1d                  sex
5280 e4b2 34 06               pshs d
5281 e4b4 31 64               leay 4,s
5282 e4b6 1f 20               tfr  y,d
5283 e4b8 34 06               pshs d
5284 e4ba e6 f1               ldb  [,s++]
5285 e4bc 1d                  sex
5286 e4bd aa e0               ora  ,s+
5287 e4bf ea e0               orb  ,s+
5288 e4c1 e7 f1               stb  [,s++]
5289                         *   bcc = bcc+a;  /* compute check sum */
5290 e4c3 f6 70 0f            ldb  bcc
5291 e4c6 1d                  sex
5292 e4c7 34 06               pshs d
5293 e4c9 31 63               leay 3,s
5294 e4cb 1f 20               tfr  y,d
5295 e4cd 34 06               pshs d
5296 e4cf e6 f1               ldb  [,s++]
5297 e4d1 1d                  sex
5298 e4d2 e3 e1               addd ,s++
5299 e4d4 f7 70 0f            stb  bcc
5300                         *   
5301                         *   return (a);
5302 e4d7 31 61               leay 1,s
5303 e4d9 1f 20               tfr  y,d
5304 e4db 34 06               pshs d
5305 e4dd e6 f1               ldb  [,s++]
5306 e4df 1d                  sex
5307 e4e0 32 62               leas 2,s
5308 e4e2 39                  rts
5309                         * }
5310                         * get16bitaddress()
5311                         
5312                         * .global get16bit
5313                         get16bit: 
5314                         * {
5315                         *   int load_address;
5316                         *   load_address =0;
5317 e4e3 32 7e               leas -2,s
5318 e4e5 31 e4               leay 0,s
5319 e4e7 1f 20               tfr  y,d
5320 e4e9 34 06               pshs d
5321 e4eb cc 00 00            ldd  #0
5322 e4ee ed f1               std  [,s++]
5323                         *   load_address |= gethex();
5324 e4f0 31 e4               leay 0,s
5325 e4f2 1f 20               tfr  y,d
5326 e4f4 34 06               pshs d
5327 e4f6 bd e4 4b            jsr gethex
5328 e4f9 ae f4               ldx  [,s]
5329 e4fb 34 10               pshs x
5330 e4fd aa e0               ora  ,s+
5331 e4ff ea e0               orb  ,s+
5332 e501 ed f1               std  [,s++]
5333                         *   load_address <<=8;
5334 e503 31 e4               leay 0,s
5335 e505 1f 20               tfr  y,d
5336 e507 34 06               pshs d
5337 e509 cc 00 08            ldd  #8
5338 e50c ae f4               ldx  [,s]
5339 e50e 34 10               pshs x
5340 e510 5a                  decb
5341 e511 2d 06               blt  *+8
5342 e513 68 61               asl  1,s
5343 e515 69 e4               rol  ,s
5344 e517 20 f7               bra  *-7
5345 e519 35 06               puls d
5346 e51b ed f1               std  [,s++]
5347                         *   load_address |= gethex();
5348 e51d 31 e4               leay 0,s
5349 e51f 1f 20               tfr  y,d
5350 e521 34 06               pshs d
5351 e523 bd e4 4b            jsr gethex
5352 e526 ae f4               ldx  [,s]
5353 e528 34 10               pshs x
5354 e52a aa e0               ora  ,s+
5355 e52c ea e0               orb  ,s+
5356 e52e ed f1               std  [,s++]
5357                         *   return load_address;
5358 e530 31 e4               leay 0,s
5359 e532 1f 20               tfr  y,d
5360 e534 34 06               pshs d
5361 e536 ec f1               ldd  [,s++]
5362 e538 32 62               leas 2,s
5363 e53a 39                  rts
5364                         * }
5365                         * read_record1()
5366                         
5367                         * .global read_rec
5368                         read_rec: 
5369                         * {
5370                         *    
5371                         *    char x;
5372                         *    char byte_count;
5373                         *    int address16bit;
5374                         *    bcc =0;
5375 e53b 32 7c               leas -4,s
5376 e53d cc 00 00            ldd  #0
5377 e540 f7 70 0f            stb  bcc
5378                         *    byte_count = gethex()-3;  /* only data record */
5379 e543 31 62               leay 2,s
5380 e545 1f 20               tfr  y,d
5381 e547 34 06               pshs d
5382 e549 bd e4 4b            jsr gethex
5383 e54c 34 06               pshs d
5384 e54e cc 00 03            ldd  #3
5385 e551 35 10               puls x
5386 e553 34 06               pshs d
5387 e555 1f 10               tfr  x,d
5388 e557 a3 e1               subd ,s++
5389 e559 e7 f1               stb  [,s++]
5390                         *    address16bit = get16bitaddress();
5391 e55b 31 e4               leay 0,s
5392 e55d 1f 20               tfr  y,d
5393 e55f 34 06               pshs d
5394 e561 bd e4 e3            jsr get16bit
5395 e564 ed f1               std  [,s++]
5396                         *    dptr = address16bit;
5397 e566 31 e4               leay 0,s
5398 e568 1f 20               tfr  y,d
5399 e56a 34 06               pshs d
5400 e56c ec f1               ldd  [,s++]
5401 e56e fd 70 43            std  dptr
5402                         *   for(x=0; x<byte_count; x++)
5403 e571 31 63               leay 3,s
5404 e573 1f 20               tfr  y,d
5405 e575 34 06               pshs d
5406 e577 cc 00 00            ldd  #0
5407 e57a e7 f1               stb  [,s++]
5408                         cc213:  
5409 e57c 31 63               leay 3,s
5410 e57e 1f 20               tfr  y,d
5411 e580 34 06               pshs d
5412 e582 e6 f1               ldb  [,s++]
5413 e584 1d                  sex
5414 e585 34 06               pshs d
5415 e587 31 64               leay 4,s
5416 e589 1f 20               tfr  y,d
5417 e58b 34 06               pshs d
5418 e58d e6 f1               ldb  [,s++]
5419 e58f 1d                  sex
5420 e590 10 a3 e1            cmpd ,s++
5421 e593 2e 05               bgt  *+7
5422 e595 cc 00 00            ldd  #0
5423 e598 20 03               bra  *+5
5424 e59a cc 00 01            ldd  #1
5425 e59d 10 83 00 00         cmpd #0
5426 e5a1 10 27 00 33         lbeq cc212
5427 e5a5 7e e5 be            jmp cc214
5428                         cc211:  
5429 e5a8 31 63               leay 3,s
5430 e5aa 1f 20               tfr  y,d
5431 e5ac 34 06               pshs d
5432 e5ae 34 06               pshs d
5433 e5b0 e6 f1               ldb  [,s++]
5434 e5b2 1d                  sex
5435 e5b3 c3 00 01            addd #1
5436 e5b6 e7 f1               stb  [,s++]
5437 e5b8 83 00 01            subd #1
5438 e5bb 7e e5 7c            jmp cc213
5439                         cc214:  
5440                         *    {
5441                         *     *(dptr+x) = gethex();
5442 e5be fc 70 43            ldd  dptr
5443 e5c1 34 06               pshs d
5444 e5c3 31 65               leay 5,s
5445 e5c5 1f 20               tfr  y,d
5446 e5c7 34 06               pshs d
5447 e5c9 e6 f1               ldb  [,s++]
5448 e5cb 1d                  sex
5449 e5cc e3 e1               addd ,s++
5450 e5ce 34 06               pshs d
5451 e5d0 bd e4 4b            jsr gethex
5452 e5d3 e7 f1               stb  [,s++]
5453                         *    }
5454 e5d5 7e e5 a8            jmp cc211
5455                         cc212:  
5456                         *    bcc = ~bcc;   /* one's complement */
5457 e5d8 f6 70 0f            ldb  bcc
5458 e5db 1d                  sex
5459 e5dc 43                  coma
5460 e5dd 53                  comb
5461 e5de f7 70 0f            stb  bcc
5462                         *    *gpio1=bcc;    /* loading indicator */
5463 e5e1 fc 70 3b            ldd  gpio1
5464 e5e4 34 06               pshs d
5465 e5e6 f6 70 0f            ldb  bcc
5466 e5e9 1d                  sex
5467 e5ea e7 f1               stb  [,s++]
5468                         *     save_bcc= bcc;
5469 e5ec f6 70 0f            ldb  bcc
5470 e5ef 1d                  sex
5471 e5f0 f7 70 10            stb  save_bcc
5472                         *   if(save_bcc != gethex()) bcc_error=1;
5473 e5f3 f6 70 10            ldb  save_bcc
5474 e5f6 1d                  sex
5475 e5f7 34 06               pshs d
5476 e5f9 bd e4 4b            jsr gethex
5477 e5fc 10 a3 e1            cmpd ,s++
5478 e5ff 26 05               bne   *+7
5479 e601 cc 00 00            ldd  #0
5480 e604 20 03               bra  *+5
5481 e606 cc 00 01            ldd  #1
5482 e609 10 83 00 00         cmpd #0
5483 e60d 10 27 00 06         lbeq cc215
5484 e611 cc 00 01            ldd  #1
5485 e614 f7 70 11            stb  bcc_erro
5486                         * }
5487                         cc215:  
5488 e617 32 64               leas 4,s
5489 e619 39                  rts
5490                         * get_s_record()
5491                         
5492                         * .global get_s_re
5493                         get_s_re: 
5494                         * {
5495                         *    end =0;
5496 e61a cc 00 00            ldd  #0
5497 e61d fd 70 1e            std  end
5498                         *    bcc_error=0;
5499 e620 cc 00 00            ldd  #0
5500 e623 f7 70 11            stb  bcc_erro
5501                         *      
5502                         *    while(end==0)
5503                         cc216:  
5504 e626 fc 70 1e            ldd  end
5505 e629 34 06               pshs d
5506 e62b cc 00 00            ldd  #0
5507 e62e 10 a3 e1            cmpd ,s++
5508 e631 27 05               beq  *+7
5509 e633 cc 00 00            ldd  #0
5510 e636 20 03               bra  *+5
5511 e638 cc 00 01            ldd  #1
5512 e63b 10 83 00 00         cmpd #0
5513 e63f 10 27 00 65         lbeq cc217
5514                         *    {
5515                         * 	
5516                         *  
5517                         * 	 while(getchar() != 'S')
5518                         cc218:  
5519 e643 bd e0 92            jsr getchar
5520 e646 34 06               pshs d
5521 e648 cc 00 53            ldd  #83
5522 e64b 10 a3 e1            cmpd ,s++
5523 e64e 26 05               bne   *+7
5524 e650 cc 00 00            ldd  #0
5525 e653 20 03               bra  *+5
5526 e655 cc 00 01            ldd  #1
5527 e658 10 83 00 00         cmpd #0
5528 e65c 10 27 00 06         lbeq cc219
5529                         *       continue;
5530 e660 7e e6 43            jmp cc218
5531 e663 7e e6 43            jmp cc218
5532                         cc219:  
5533                         *       switch(getchar()) /* get record type */
5534 e666 bd e0 92            jsr getchar
5535 e669 7e e6 90            jmp cc222
5536                         *       {
5537                         *        case '0': end=0; break;
5538                         cc223:  
5539 e66c cc 00 00            ldd  #0
5540 e66f fd 70 1e            std  end
5541 e672 7e e6 a5            jmp cc221
5542                         *        case '1': read_record1(); break;
5543                         cc224:  
5544 e675 bd e5 3b            jsr read_rec
5545 e678 7e e6 a5            jmp cc221
5546                         *        case '8': end=1; break;
5547                         cc225:  
5548 e67b cc 00 01            ldd  #1
5549 e67e fd 70 1e            std  end
5550 e681 7e e6 a5            jmp cc221
5551                         *        case '9': end=1; break;
5552                         cc226:  
5553 e684 cc 00 01            ldd  #1
5554 e687 fd 70 1e            std  end
5555 e68a 7e e6 a5            jmp cc221
5556                         *       }
5557 e68d 7e e6 a5            jmp cc221
5558                         cc222:  
5559 e690 bd c0 f9            jsr ccswitch
5560 e693 e6 6c 00 30         FDB cc223,48
5561 e697 e6 75 00 31         FDB cc224,49
5562 e69b e6 7b 00 38         FDB cc225,56
5563 e69f e6 84 00 39         FDB cc226,57
5564 e6a3 00 00               FDB 0
5565                         cc221:  
5566                         *     }
5567 e6a5 7e e6 26            jmp cc216
5568                         cc217:  
5569                         *    newline();
5570 e6a8 bd e0 fd            jsr newline
5571                         *    if(bcc_error) puts("check sum errors!");
5572 e6ab f6 70 11            ldb  bcc_erro
5573 e6ae 1d                  sex
5574 e6af 10 83 00 00         cmpd #0
5575 e6b3 10 27 00 0d         lbeq cc227
5576 e6b7 cc e6 d2            ldd  #cc1+0
5577 e6ba 34 06               pshs d
5578 e6bc bd e0 53            jsr puts
5579 e6bf 32 62               leas 2,s
5580                         *    else puts("0 error...");
5581 e6c1 7e e6 ce            jmp cc228
5582                         cc227:  
5583 e6c4 cc e6 e4            ldd  #cc1+18
5584 e6c7 34 06               pshs d
5585 e6c9 bd e0 53            jsr puts
5586 e6cc 32 62               leas 2,s
5587                         cc228:  
5588                         *     key_data();
5589 e6ce bd ce 35            jsr key_data
5590                         * }
5591 e6d1 39                  rts
5592                         cc1:  
5593 e6d2 63 68 65 63 6b 20   FCB 99,104,101,99,107,32,115,117,109,32
     73 75 6d 20
5594 e6dc 65 72 72 6f 72 73   FCB 101,114,114,111,114,115,33,0,48,32
     21 00 30 20
5595 e6e6 65 72 72 6f 72 2e   FCB 101,114,114,111,114,46,46,46,0
     2e 2e 00
5596                         * key_load()
5597                         
5598                         * .global key_load
5599                         key_load: 
5600                         * {
5601                         *   newline();
5602 e6ef bd e0 fd            jsr newline
5603                         *   puts("Load Motorola s-record");
5604 e6f2 cc e7 00            ldd  #cc229+0
5605 e6f5 34 06               pshs d
5606 e6f7 bd e0 53            jsr puts
5607 e6fa 32 62               leas 2,s
5608                         *    get_s_record();  /* accept only S1 record */
5609 e6fc bd e6 1a            jsr get_s_re
5610                         * }
5611 e6ff 39                  rts
5612                         cc229:  
5613 e700 4c 6f 61 64 20 4d   FCB 76,111,97,100,32,77,111,116,111,114
     6f 74 6f 72
5614 e70a 6f 6c 61 20 73 2d   FCB 111,108,97,32,115,45,114,101,99,111
     72 65 63 6f
5615 e714 72 64 00            FCB 114,100,0
5616                         * initreg()
5617                         
5618                         * .global initreg
5619                         initreg: 
5620                         * {
5621                         * 	 PC = 0x200;
5622 e717 cc 02 00            ldd  #512
5623 e71a fd 70 16            std  PC
5624                         *    save_PC = 0x200;
5625 e71d cc 02 00            ldd  #512
5626 e720 fd 70 18            std  save_PC
5627                         *    USER_U = 0x7F00;
5628 e723 cc 7f 00            ldd  #32512
5629 e726 fd 70 27            std  USER_U
5630                         *    #asm
5631 e729 1f a8              	   TFR CC,A
5632 e72b b7 70 31           	   STA USER_P
5633                         
5634                         *    #endasm  
5635                         * 	   
5636                         *    gpio1 = 0x8000;
5637 e72e cc 80 00            ldd  #-32768
5638 e731 fd 70 3b            std  gpio1
5639                         *    port2 = 0x8003;
5640 e734 cc 80 03            ldd  #-32765
5641 e737 fd 70 3d            std  port2
5642                         *    port1 = 0x8002;
5643 e73a cc 80 02            ldd  #-32766
5644 e73d fd 70 3f            std  port1
5645                         *    port0 = 0x8001;
5646 e740 cc 80 01            ldd  #-32767
5647 e743 fd 70 41            std  port0
5648                         *   
5649                         * }
5650 e746 39                  rts
5651                         * wait1s()
5652                         
5653                         * .global wait1s
5654                         wait1s: 
5655                         * {
5656                         * 	  #asm
5657 e747 1c ef              		andcc #$ef
5658                         
5659                         *       #endasm
5660                         * 		  while(tick<100);
5661                         cc231:  
5662 e749 f6 70 0e            ldb  tick
5663 e74c 1d                  sex
5664 e74d 34 06               pshs d
5665 e74f cc 00 64            ldd  #100
5666 e752 10 a3 e1            cmpd ,s++
5667 e755 2e 05               bgt  *+7
5668 e757 cc 00 00            ldd  #0
5669 e75a 20 03               bra  *+5
5670 e75c cc 00 01            ldd  #1
5671 e75f 10 83 00 00         cmpd #0
5672 e763 10 27 00 03         lbeq cc232
5673 e767 7e e7 49            jmp cc231
5674                         cc232:  
5675                         * 	  tick=0;
5676 e76a cc 00 00            ldd  #0
5677 e76d f7 70 0e            stb  tick
5678                         * }
5679 e770 39                  rts
5680                         *  
5681                         * main()
5682                         
5683                         * .global main
5684                         main: 
5685                         * {
5686                         *     initreg();
5687 e771 bd e7 17            jsr initreg
5688                         *     
5689                         * 	*gpio1=0;
5690 e774 fc 70 3b            ldd  gpio1
5691 e777 34 06               pshs d
5692 e779 cc 00 00            ldd  #0
5693 e77c e7 f1               stb  [,s++]
5694                         * 	*port2=0;
5695 e77e fc 70 3d            ldd  port2
5696 e781 34 06               pshs d
5697 e783 cc 00 00            ldd  #0
5698 e786 e7 f1               stb  [,s++]
5699                         * 	*port1=0xff;
5700 e788 fc 70 3f            ldd  port1
5701 e78b 34 06               pshs d
5702 e78d cc 00 ff            ldd  #255
5703 e790 e7 f1               stb  [,s++]
5704                         * 	flag=0;
5705 e792 cc 00 00            ldd  #0
5706 e795 f7 70 0d            stb  flag
5707                         *    
5708                         *    initacia();
5709 e798 bd df 85            jsr initacia
5710                         *    newline();
5711 e79b bd e0 fd            jsr newline
5712                         *    puts("6809 MICROPROCESSOR KIT 2017");
5713 e79e cc e8 79            ldd  #cc230+0
5714 e7a1 34 06               pshs d
5715 e7a3 bd e0 53            jsr puts
5716 e7a6 32 62               leas 2,s
5717                         *    
5718                         *    InitLcd(); 
5719 e7a8 bd c2 3a            jsr InitLcd
5720                         *    InitLcd();
5721 e7ab bd c2 3a            jsr InitLcd
5722                         *    PutLCD("6809 MICROPROCESSOR");
5723 e7ae cc e8 96            ldd  #cc230+29
5724 e7b1 34 06               pshs d
5725 e7b3 bd c2 7d            jsr PutLCD
5726 e7b6 32 62               leas 2,s
5727                         *    goto_xy(0,1);
5728 e7b8 cc 00 00            ldd  #0
5729 e7bb 34 06               pshs d
5730 e7bd cc 00 01            ldd  #1
5731 e7c0 34 06               pshs d
5732 e7c2 bd c1 a9            jsr goto_xy
5733 e7c5 32 64               leas 4,s
5734                         *    PutLCD("32kB RAM UART LCD");
5735 e7c7 cc e8 aa            ldd  #cc230+49
5736 e7ca 34 06               pshs d
5737 e7cc bd c2 7d            jsr PutLCD
5738 e7cf 32 62               leas 2,s
5739                         *   
5740                         *    buffer[5]= convert[6];
5741 e7d1 cc 70 35            ldd  #buffer
5742 e7d4 34 06               pshs d
5743 e7d6 cc 00 05            ldd  #5
5744 e7d9 e3 e1               addd ,s++
5745 e7db 34 06               pshs d
5746 e7dd cc c1 0d            ldd  #convert
5747 e7e0 34 06               pshs d
5748 e7e2 cc 00 06            ldd  #6
5749 e7e5 e3 e1               addd ,s++
5750 e7e7 34 06               pshs d
5751 e7e9 e6 f1               ldb  [,s++]
5752 e7eb 1d                  sex
5753 e7ec e7 f1               stb  [,s++]
5754                         *    buffer[4]= convert[8];
5755 e7ee cc 70 35            ldd  #buffer
5756 e7f1 34 06               pshs d
5757 e7f3 cc 00 04            ldd  #4
5758 e7f6 e3 e1               addd ,s++
5759 e7f8 34 06               pshs d
5760 e7fa cc c1 0d            ldd  #convert
5761 e7fd 34 06               pshs d
5762 e7ff cc 00 08            ldd  #8
5763 e802 e3 e1               addd ,s++
5764 e804 34 06               pshs d
5765 e806 e6 f1               ldb  [,s++]
5766 e808 1d                  sex
5767 e809 e7 f1               stb  [,s++]
5768                         *    buffer[3]= convert[0];
5769 e80b cc 70 35            ldd  #buffer
5770 e80e 34 06               pshs d
5771 e810 cc 00 03            ldd  #3
5772 e813 e3 e1               addd ,s++
5773 e815 34 06               pshs d
5774 e817 cc c1 0d            ldd  #convert
5775 e81a 34 06               pshs d
5776 e81c cc 00 00            ldd  #0
5777 e81f e3 e1               addd ,s++
5778 e821 34 06               pshs d
5779 e823 e6 f1               ldb  [,s++]
5780 e825 1d                  sex
5781 e826 e7 f1               stb  [,s++]
5782                         *    buffer[2]= convert[9];
5783 e828 cc 70 35            ldd  #buffer
5784 e82b 34 06               pshs d
5785 e82d cc 00 02            ldd  #2
5786 e830 e3 e1               addd ,s++
5787 e832 34 06               pshs d
5788 e834 cc c1 0d            ldd  #convert
5789 e837 34 06               pshs d
5790 e839 cc 00 09            ldd  #9
5791 e83c e3 e1               addd ,s++
5792 e83e 34 06               pshs d
5793 e840 e6 f1               ldb  [,s++]
5794 e842 1d                  sex
5795 e843 e7 f1               stb  [,s++]
5796                         *    buffer[1]=0;
5797 e845 cc 70 35            ldd  #buffer
5798 e848 34 06               pshs d
5799 e84a cc 00 01            ldd  #1
5800 e84d e3 e1               addd ,s++
5801 e84f 34 06               pshs d
5802 e851 cc 00 00            ldd  #0
5803 e854 e7 f1               stb  [,s++]
5804                         *    buffer[0]=0;
5805 e856 cc 70 35            ldd  #buffer
5806 e859 34 06               pshs d
5807 e85b cc 00 00            ldd  #0
5808 e85e e3 e1               addd ,s++
5809 e860 34 06               pshs d
5810 e862 cc 00 00            ldd  #0
5811 e865 e7 f1               stb  [,s++]
5812                         *    
5813                         * 	
5814                         *     while(1)
5815                         cc233:  
5816 e867 cc 00 01            ldd  #1
5817 e86a 10 83 00 00         cmpd #0
5818 e86e 10 27 00 06         lbeq cc234
5819                         * 	{
5820                         *        scan1();  
5821 e872 bd df 09            jsr scan1
5822                         * 	}
5823 e875 7e e8 67            jmp cc233
5824                         cc234:  
5825                         * }
5826 e878 39                  rts
5827                         cc230:  
5828 e879 36 38 30 39 20 4d   FCB 54,56,48,57,32,77,73,67,82,79
     49 43 52 4f
5829 e883 50 52 4f 43 45 53   FCB 80,82,79,67,69,83,83,79,82,32
     53 4f 52 20
5830 e88d 4b 49 54 20 32 30   FCB 75,73,84,32,50,48,49,55,0,54
     31 37 00 36
5831 e897 38 30 39 20 4d 49   FCB 56,48,57,32,77,73,67,82,79,80
     43 52 4f 50
5832 e8a1 52 4f 43 45 53 53   FCB 82,79,67,69,83,83,79,82,0,51
     4f 52 00 33
5833 e8ab 32 6b 42 20 52 41   FCB 50,107,66,32,82,65,77,32,85,65
     4d 20 55 41
5834 e8b5 52 54 20 4c 43 44   FCB 82,84,32,76,67,68,0
     00
5835                           END
ADR1       7047 *0211 0270 0278 0285 0291 0292 0298 0302 0312 0316 
                      0320 0325 0332 
ADR2       7049 *0212 0271 0277 0295 0297 0313 0317 0321 0326 0333 
ADR3       704b *0213 0287 0299 0314 0315 0319 0323 0324 0328 0329 
                      0331 0335 0337 
ADR31      704c *0214 0269 0273 0281 0303 
DIVD       c08b *0290 0300 
InitLcd    c23a *0561 5719 5721 
LcdReady   c129 *0409 0465 0483 0564 0574 0652 0687 
NOCARRY    c0e9 *0332 0330 
NOSUB      c09f *0299 0296 
PC         7016 *0094 2038 2054 2202 2204 2352 2354 2396 2464 2487 
                      2494 2505 2507 2515 2621 2768 3767 3824 3826 3875 4944 
                      5156 5623 
PutLCD     c27d *0602 5725 5737 
SAVE_SP    702b *0142 0260 2619 3279 
SWEND      c10b *0358 0354 
SWLOOP     c0fb *0352 0356 
USER_A     702f *0152 0246 2630 2861 3104 
USER_B     7030 *0156 0248 2629 2955 3049 
USER_DP    7032 *0164 0250 2625 3310 
USER_P     7031 *0160 0244 2623 3403 3535 5632 
USER_PC    7025 *0130 0258 
USER_U     7027 *0134 0256 2620 3247 5629 
USER_X     7029 *0138 0252 2627 3182 
USER_Y     702d *0147 0254 2628 3215 
ab         d4c7 *3045 3681 
acca       d365 *2857 3673 
accb       d416 *2951 3677 
address_   cd90 *2035 2122 
bcc        700f *0072 5290 5299 5377 5457 5461 5465 5469 
bcc_erro   7011 *0080 5485 5500 5572 
beep       de94 *4392 4191 
buffer     7035 *0174 1435 1445 1461 1481 1667 1672 1687 1692 1708 
                      1713 1726 1731 1744 1749 1762 1767 1788 1793 1806 1811 
                      1824 1829 1844 1849 1864 1869 1884 1889 1919 1950 1981 
                      2012 2063 2094 2259 2295 2531 2539 2547 2555 2563 2571 
                      2786 2794 2802 2810 2818 2826 2834 2842 2865 2896 2915 
                      2923 2931 2939 2959 2990 3009 3017 3025 3033 3053 3084 
                      3108 3139 3159 3167 3192 3200 3224 3232 3256 3264 3287 
                      3295 3314 3345 3364 3372 3380 3388 3415 3424 3441 3450 
                      3467 3476 3493 3502 3512 3520 3547 3556 3573 3582 3599 
                      3608 3625 3634 3644 3652 3943 3950 4034 4056 4148 4157 
                      4165 5741 5755 5769 5783 5797 5805 
cc1        e6d2 *5592 5576 5583 
cc10       c1ef *0521 0552 
cc100      d8cc *3589 3580 
cc101      d8f5 *3607 3598 
cc102      d906 *3615 3606 
cc103      d92f *3633 3624 
cc104      d940 *3641 3632 
cc106      d9d6 *3726 3674 3678 3682 3686 3690 3694 3698 3702 3706 
                      3710 3712 
cc107      d9a9 *3713 3669 
cc108      d96a *3672 3715 
cc109      d970 *3676 3716 
cc11       c208 *0534 0553 
cc110      d976 *3680 3717 
cc111      d97c *3684 3718 
cc112      d982 *3688 3719 
cc113      d988 *3692 3720 
cc114      d98e *3696 3721 
cc115      d994 *3700 3722 
cc116      d99a *3704 3723 
cc117      d9a0 *3708 3724 
cc118      dab2 *3835 3764 
cc119      da19 *3760 3746 3757 
cc12       c2c1 *0638 0675 
cc120      da1c *3762 3759 
cc121      da50 *3784 3813 
cc122      da8c *3814 3782 
cc123      da30 *3772 3789 
cc124      da5f *3790 3783 
cc125      db6b *3927 3872 
cc126      daf5 *3868 3854 3865 
cc127      daf8 *3870 3867 
cc128      db2c *3892 3918 
cc129      db62 *3919 3890 
cc13       c304 *0676 0636 
cc130      db0c *3880 3897 
cc131      db3b *3898 3891 
cc132      db96 *3958 4002 
cc133      dbee *4003 3961 
cc134      dba1 *3965 3979 
cc135      dbc5 *3980 3976 
cc136      dc15 *4026 4041 
cc137      dc38 *4042 4024 
cc138      dbf5 *4014 4031 
cc139      dc24 *4032 4025 
cc14       c28a *0613 0648 
cc140      dc8a *4097 4093 
cc141      dd2f *4195 4190 
cc142      de02 *4304 4206 
cc144      ddff *4300 4216 4220 4224 4228 4232 4236 4240 4244 4248 
                      4258 4262 4266 4270 4274 4278 4281 
cc145      ddbe *4282 4211 
cc146      dd54 *4214 4284 
cc147      dd5a *4218 4285 
cc148      dd60 *4222 4286 
cc149      dd66 *4226 4287 
cc15       c2d7 *0649 0637 
cc150      dd6c *4230 4288 
cc151      dd72 *4234 4289 
cc152      dd78 *4238 4290 
cc153      dd7e *4242 4291 
cc154      dd84 *4246 4292 
cc155      dd8a *4250 4293 
cc156      dd9d *4260 4294 
cc157      dda3 *4264 4295 
cc158      dda9 *4268 4296 
cc159      ddaf *4272 4297 
cc16       c34c *0730 0725 
cc160      ddb5 *4276 4298 
cc161      de57 *4353 4303 
cc163      de57 *4351 4314 4318 4322 4326 4330 4334 4338 4340 
cc164      de36 *4341 4309 
cc165      de09 *4312 4343 
cc166      de0f *4316 4344 
cc167      de15 *4320 4345 
cc168      de1b *4324 4346 
cc169      de21 *4328 4347 
cc17       c375 *0749 0744 
cc170      de27 *4332 4348 
cc171      de2d *4336 4349 
cc172      de7e *4376 4384 4385 
cc173      de93 *4386 4374 
cc174      de5e *4364 4381 
cc175      de8d *4382 4375 
cc176      ded1 *4424 4454 
cc177      df06 *4455 4422 
cc178      deab *4408 4434 
cc179      dee7 *4435 4423 
cc18       c39e *0768 0763 
cc180      df09 *4465 4480 4481 
cc181      df31 *4482 4478 
cc182      df3b *4489 4504 4505 
cc183      df63 *4506 4502 
cc184      dffe *4611 4633 4634 
cc185      e034 *4635 4631 
cc186      e053 *4662 4693 
cc187      e091 *4694 4671 
cc188      e09f *4714 4736 4737 
cc189      e0d5 *4738 4734 
cc19       c3c7 *0787 0782 
cc190      e171 *4831 4821 
cc191      e183 *4840 4830 
cc192      e1cb *4873 4863 
cc193      e1dd *4882 4872 
cc194      e26b *4967 5150 
cc195      e3e2 *5151 4965 
cc196      e246 *4952 4976 
cc197      e280 *4977 4966 
cc198      e2c7 *5012 5044 
cc199      e304 *5045 5010 
cc2        c135 *0419 0455 
cc20       c3f0 *0806 0801 
cc200      e2a2 *4997 5021 
cc201      e2dc *5022 5011 
cc202      e33e *5072 5138 
cc203      e3cc *5139 5070 
cc204      e319 *5057 5081 
cc205      e353 *5082 5071 
cc206      e3bf *5130 5122 
cc207      e3a9 *5120 5107 5118 
cc208      e3c9 *5135 5129 
cc209      e42f *5199 5184 
cc21       c419 *0825 0820 
cc210      e448 *5213 
cc211      e5a8 *5428 5454 
cc212      e5d8 *5455 5426 
cc213      e57c *5408 5438 
cc214      e5be *5439 5427 
cc215      e617 *5487 5483 
cc216      e626 *5503 5567 
cc217      e6a8 *5568 5513 
cc218      e643 *5518 5530 5531 
cc219      e666 *5532 5528 
cc22       c442 *0844 0839 
cc221      e6a5 *5565 5541 5545 5550 5555 5557 
cc222      e690 *5558 5535 
cc223      e66c *5538 5560 
cc224      e675 *5543 5561 
cc225      e67b *5547 5562 
cc226      e684 *5552 5563 
cc227      e6c4 *5582 5575 
cc228      e6ce *5587 5581 
cc229      e700 *5612 5604 
cc23       c46b *0863 0858 
cc230      e879 *5827 5713 5723 5735 
cc231      e749 *5661 5673 
cc232      e76a *5674 5672 
cc233      e867 *5815 5823 
cc234      e878 *5824 5818 
cc24       c494 *0882 0877 
cc25       c4bd *0901 0896 
cc26       c4e6 *0920 0915 
cc27       c50f *0939 0934 
cc28       c538 *0958 0953 
cc29       c561 *0977 0972 
cc3        c194 *0456 0450 
cc30       c58a *0996 0991 
cc31       c5b3 *1016 1010 
cc32       c5dc *1035 1030 
cc33       c605 *1054 1049 
cc34       c62e *1073 1068 
cc35       c657 *1092 1087 
cc36       c680 *1111 1106 
cc37       c6a9 *1130 1125 
cc38       c6d2 *1149 1144 
cc39       c6fb *1168 1163 
cc4        c180 *0448 0436 0446 
cc40       c724 *1187 1182 
cc41       c74d *1206 1201 
cc42       c776 *1225 1220 
cc43       c79f *1244 1239 
cc44       c7c8 *1263 1258 
cc45       c7f1 *1282 1277 
cc46       c81a *1301 1296 
cc47       c843 *1323 1315 
cc48       c87f *1364 1373 1374 
cc49       c895 *1375 1362 
cc50       c859 *1348 1370 
cc51       c88f *1371 1363 
cc52       c8db *1415 1616 
cc53       ca76 *1617 1413 
cc54       c8bb *1403 1420 
cc55       c8ea *1421 1414 
cc56       c9ab *1507 1500 
cc57       c962 *1478 1460 1476 
cc58       c996 *1498 1480 1496 
cc59       c9ae *1509 1506 
cc6        c239 *0555 0506 0519 0532 0545 0547 
cc60       c9f4 *1545 1600 
cc61       ca5c *1601 1543 
cc62       c9d3 *1532 1551 
cc63       ca04 *1552 1544 
cc64       ca35 *1580 1569 
cc65       ca42 *1586 1579 
cc66       caae *1644 1640 
cc67       cea7 *2212 2199 
cc68       ce8a *2195 2181 2192 
cc69       ce8d *2197 2194 
cc7        c224 *0548 0492 
cc70       ced7 *2236 2223 
cc71       cf19 *2272 2247 
cc72       cf7a *2319 2283 
cc73       cf7a *2316 2313 
cc74       cfc7 *2363 2349 
cc75       cff7 *2387 2374 
cc76       d02d *2419 2415 
cc77       d09b *2489 2485 
cc78       d1b6 *2637 2616 
cc79       d187 *2612 2598 2609 
cc8        c1bd *0495 0550 
cc80       d18a *2614 2611 
cc81       d22b *2694 2648 
cc82       d20e *2677 2666 
cc83       d21b *2683 2676 
cc84       d2d5 *2778 2705 
cc85       d294 *2741 2764 
cc86       d2c3 *2765 2739 
cc87       d274 *2729 2746 
cc88       d2a3 *2747 2740 
cc89       d76f *3423 3414 
cc9        c1d6 *0508 0551 
cc90       d780 *3431 3422 
cc91       d7a9 *3449 3440 
cc92       d7ba *3457 3448 
cc93       d7e3 *3475 3466 
cc94       d7f4 *3483 3474 
cc95       d81d *3501 3492 
cc96       d82e *3509 3500 
cc97       d881 *3555 3546 
cc98       d892 *3563 3554 
cc99       d8bb *3581 3572 
ccd1       c063 *0272 
ccd2       c070 *0278 0272 
ccd3       c084 *0286 0280 
ccd4       c0b3 *0308 0304 
ccdiv      c05a *0269 
ccmult     c0b4 *0312 
ccswitch   c0f9 *0351 0549 3714 4283 4342 5559 
clear_bu   dbef *4009 4054 4146 
clr_scre   c195 *0462 0584 
cold_msg   c11d *0397 
convert    c10d *0390 1924 1955 1986 2017 2068 2099 2870 2901 2964 
                      2995 3058 3089 3113 3144 3319 3350 5746 5760 5774 5788 
cut_byte   dab3 *3841 4247 
data_dis   cda1 *2051 2124 
data_hex   cff8 *2392 4317 
delay_be   de58 *4359 4445 4452 
delay_ms   c853 *1342 0595 1503 1520 4486 4510 
delay_nu   c846 *1329 1508 
desti      7020 *0115 2653 2669 2680 2709 2723 2767 4068 
dot_addr   cac6 *1664 2140 2519 
dot_data   cbaf *1785 2113 2155 2453 2772 
dptr       7043 *0200 0416 0420 0468 0470 0486 0496 0509 0522 0535 
                      0567 0569 0577 0579 0655 0657 0690 0692 2055 2057 2397 
                      2399 2445 2721 2755 3768 3793 3798 3816 3876 3901 3906 
                      4945 4982 5025 5085 5141 5147 5155 5401 5442 
dptr2      7045 *0205 2724 2750 
end        701e *0111 2290 2304 2711 5497 5504 5540 5549 5554 
enter_nu   dc66 *4080 4325 4329 4333 4337 
flag       700d *0062 4180 4251 4257 5706 
get16bit   e4e3 *5313 5394 
get_s_re   e61a *5493 5609 
getchar    e092 *4701 5228 5234 5519 5534 
gethex     e44b *5220 5327 5351 5382 5451 5476 
goto_xy    c1a9 *0479 0590 5732 
gpio1      703b *0180 3990 5463 5638 5690 
hex4       cc9c *1909 2043 2687 3188 3220 3252 3284 3987 4127 
hex_addr   d077 *2472 4313 
hi_cc      d851 *3532 3709 
hit        700b *0053 2143 2158 2230 2257 2293 2381 2405 2422 2475 
                      2492 2691 4074 4083 4100 4144 
i          7000 *0011 1402 1404 1416 1418 1437 1447 1463 1483 2728 
                      2730 2742 2744 2752 2757 4013 4015 4027 4029 4036 
initacia   df85 *4532 5709 
initreg    e717 *5619 5687 
insert     d9d7 *3733 4243 
irq_serv   c023 *0239 0230 
j          7002 *0016 3771 3773 3785 3787 3795 3800 3879 3881 3893 
                      3895 3903 3908 4363 4365 4377 4379 
k          7005 *0026 1387 1426 1604 1614 4801 4803 4809 4811 4822 
                      4832 4851 4853 4864 4874 4911 4913 4927 4929 
key        7009 *0043 1396 1573 1642 1648 2439 2509 3667 4117 4196 
                      4209 4515 4517 4522 
key_PC     d06d *2460 0261 4231 
key_addr   ce22 *2130 4215 5158 
key_cal    dc39 *4048 4265 
key_code   c321 *0706 4520 
key_copy   dccb *4137 4269 
key_data   ce35 *2149 2209 2359 2466 4219 5589 
key_dump   e233 *4939 4273 
key_exe    dd0e *4177 4524 
key_go     d145 *2586 4235 
key_load   e6ef *5599 4277 
key_minu   cf7b *2324 4227 
key_plus   ce48 *2167 4223 
key_reg    d2d6 *2783 4239 
key_test   db6c *3932 4261 
low_cc     d73f *3400 3705 
main       e771 *5684 0238 
n          7004 *0021 1347 1349 1365 1368 1531 1533 1546 1549 2061 
                      2070 2082 2092 2101 2863 2872 2884 2894 2903 2957 2966 
                      2978 2988 2997 3051 3060 3072 3082 3091 3106 3115 3127 
                      3137 3146 3312 3321 3333 3343 3352 3405 3407 3433 3459 
                      3485 3537 3539 3565 3591 3617 
newline    e0fd *4767 4980 5153 5570 5602 5711 
nibble2h   e3f1 *5165 5247 5268 
num        701a *0103 2226 2253 2289 2377 2652 2708 4095 4102 4113 
                      4115 4123 4125 
o          7008 *0039 1528 1555 1588 1598 1623 1626 
port0      7041 *0195 1524 1619 5647 
port1      703f *0190 1424 4438 4447 5644 5700 
port2      703d *0185 1433 1512 4398 5641 5695 
positive   700c *0057 2233 2384 2656 
print_er   d0d8 *2527 2314 
putch_lc   c307 *0683 
putchar    dff1 *4599 4681 4772 4777 4828 4838 4870 4880 4989 5041 
                      5049 5126 5133 
puts       e053 *4658 5578 5585 5606 5715 
q          7007 *0035 1399 1571 1581 1584 5095 5097 5108 5123 
read_mem   ce1b *2119 2138 2153 2207 2357 2451 2517 2770 3829 3921 
read_rec   e53b *5368 5544 
reg_disp   d963 *3664 4321 
reg_dp     d68e *3307 3701 
reg_s      d65b *3276 3697 
reg_u      d628 *3244 3693 
reg_x      d5c2 *3179 3685 
reg_y      d5f5 *3212 3689 
save_PC    7018 *0098 0259 2463 5626 
save_bcc   7010 *0076 5471 5473 
scan       c896 *1381 3978 4466 4490 4514 
scan1      df09 *4462 5821 
send_hex   e112 *4784 4916 4932 5036 
send_wor   e1de *4888 4984 
start      701c *0107 2227 2254 2306 2378 2667 2674 2678 2682 2685 
                      2713 2720 4065 
state      7024 *0125 2135 2161 2171 2182 2213 2237 2251 2273 2287 
                      2327 2337 2364 2580 2588 2599 2638 2695 2775 2851 3736 
                      3747 3832 3844 3855 3924 4052 4141 4307 
swi_serv   c027 *0242 0225 
t          7022 *0120 3941 3985 3992 3995 3997 
temp       7012 *0085 1333 1336 2718 2732 
temp16     7014 *0089 1917 1926 1937 1948 1957 1968 1979 1988 1999 
                      2010 2019 2039 2041 3183 3186 3216 3218 3248 3250 3280 
                      3282 4904 4906 
tick       700e *0067 0240 3966 3983 5662 5677 
timeout    7033 *0169 0413 0437 0452 0454 
u          7006 *0031 1390 
wait1s     e747 *5654 
x          700a *0048 2403 2417 2424 2434 2436 2443 2447 
